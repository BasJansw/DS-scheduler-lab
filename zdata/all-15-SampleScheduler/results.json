{
    "scrabble": {
        "times": [
            1340.409,
            540.148,
            688.788,
            671.213,
            515.194,
            612.319,
            485.694,
            504.337,
            503.658,
            731.371,
            506.581,
            508.256,
            712.324,
            529.432,
            629.085
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\n"
    },
    "page-rank": {
        "times": [
            19321.381,
            11882.37,
            10904.079,
            10098.302,
            10210.062,
            10322.43,
            9792.112,
            10533.398,
            9904.279,
            11496.663,
            12269.642,
            12082.532,
            14579.697,
            10665.832,
            10694.042
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n"
    },
    "future-genetic": {
        "times": [
            3091.85,
            2145.413,
            2257.713,
            2139.178,
            2386.849,
            2138.739,
            2522.864,
            2368.451,
            2233.919,
            2141.382,
            2343.948,
            2046.774,
            2208.031,
            1947.972,
            2171.57
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n"
    },
    "akka-uct": {
        "times": [
            20638.239,
            16657.596,
            15909.681,
            16286.544,
            16959.407,
            16144.774,
            15480.727,
            16176.863,
            14858.877,
            14123.488,
            13064.575,
            12850.766,
            13043.63,
            13480.408,
            13966.419
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\n"
    },
    "movie-lens": {
        "times": [
            20672.727,
            15181.029,
            14314.287,
            15033.691,
            13559.245,
            14911.923,
            13751.839,
            15192.674,
            16038.266,
            15109.523,
            16407.743,
            16225.258,
            15855.108,
            15379.761,
            11941.992
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n"
    },
    "scala-doku": {
        "times": [
            3053.135,
            2118.346,
            2133.615,
            2601.509,
            2217.977,
            2177.174,
            2242.484,
            2269.094,
            2363.995,
            2193.283,
            2291.995,
            2109.893,
            2276.484,
            2176.834,
            2165.827
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\n"
    },
    "chi-square": {
        "times": [
            3604.161,
            1206.039,
            802.005,
            890.021,
            756.979,
            768.275,
            832.614,
            824.732,
            858.442,
            851.31,
            1073.187,
            968.823,
            871.115,
            828.153,
            786.784
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 57.024 ms, heap usage 111.776 MB -> 64.309 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3604.161 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 138.331 ms, heap usage 497.256 MB -> 210.379 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1206.039 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.180 ms, heap usage 342.662 MB -> 210.448 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (802.005 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.097 ms, heap usage 228.745 MB -> 210.498 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (890.021 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 118.591 ms, heap usage 227.856 MB -> 210.547 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (756.979 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 131.581 ms, heap usage 227.959 MB -> 210.595 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (768.275 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.534 ms, heap usage 227.892 MB -> 210.642 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (832.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.913 ms, heap usage 234.703 MB -> 210.693 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (824.732 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.609 ms, heap usage 228.480 MB -> 210.788 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (858.442 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 118.947 ms, heap usage 226.559 MB -> 210.837 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (851.310 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 216.735 MB -> 210.865 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1073.187 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.850 ms, heap usage 215.881 MB -> 210.904 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (968.823 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.393 ms, heap usage 437.051 MB -> 210.986 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (871.115 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.423 ms, heap usage 445.626 MB -> 211.024 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (828.153 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 132.380 ms, heap usage 445.115 MB -> 211.059 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (786.784 ms) ======\n"
    },
    "fj-kmeans": {
        "times": [
            5546.65,
            5178.673,
            5323.796,
            5470.135,
            5281.052,
            5257.988,
            5357.991,
            5478.297,
            5249.333,
            5127.839,
            5823.739,
            5724.478,
            6334.825,
            5658.329,
            6717.217
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 57.024 ms, heap usage 111.776 MB -> 64.309 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3604.161 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 138.331 ms, heap usage 497.256 MB -> 210.379 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1206.039 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.180 ms, heap usage 342.662 MB -> 210.448 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (802.005 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.097 ms, heap usage 228.745 MB -> 210.498 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (890.021 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 118.591 ms, heap usage 227.856 MB -> 210.547 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (756.979 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 131.581 ms, heap usage 227.959 MB -> 210.595 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (768.275 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.534 ms, heap usage 227.892 MB -> 210.642 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (832.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.913 ms, heap usage 234.703 MB -> 210.693 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (824.732 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.609 ms, heap usage 228.480 MB -> 210.788 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (858.442 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 118.947 ms, heap usage 226.559 MB -> 210.837 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (851.310 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 216.735 MB -> 210.865 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1073.187 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.850 ms, heap usage 215.881 MB -> 210.904 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (968.823 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.393 ms, heap usage 437.051 MB -> 210.986 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (871.115 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.423 ms, heap usage 445.626 MB -> 211.024 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (828.153 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 132.380 ms, heap usage 445.115 MB -> 211.059 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (786.784 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 116.387 ms, heap usage 316.060 MB -> 147.470 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5546.650 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 111.086 ms, heap usage 296.868 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5178.673 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 104.222 ms, heap usage 248.316 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5323.796 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.356 ms, heap usage 384.850 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5470.135 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 118.199 ms, heap usage 301.234 MB -> 147.423 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5281.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 119.291 ms, heap usage 423.626 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5257.988 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 117.705 ms, heap usage 223.339 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5357.991 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 110.036 ms, heap usage 389.213 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5478.297 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 121.025 ms, heap usage 345.195 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5249.333 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.886 ms, heap usage 269.229 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5127.839 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.849 ms, heap usage 244.809 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5823.739 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 146.697 ms, heap usage 175.499 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5724.478 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 142.389 ms, heap usage 472.226 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6334.825 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 133.763 ms, heap usage 251.181 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5658.329 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 131.517 ms, heap usage 402.200 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6717.217 ms) ======\n"
    },
    "rx-scrabble": {
        "times": [
            658.405,
            317.82,
            234.506,
            221.936,
            201.599,
            224.815,
            222.268,
            162.776,
            173.289,
            192.864,
            129.19,
            161.823,
            209.179,
            189.248,
            155.206
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 57.024 ms, heap usage 111.776 MB -> 64.309 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3604.161 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 138.331 ms, heap usage 497.256 MB -> 210.379 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1206.039 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.180 ms, heap usage 342.662 MB -> 210.448 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (802.005 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.097 ms, heap usage 228.745 MB -> 210.498 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (890.021 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 118.591 ms, heap usage 227.856 MB -> 210.547 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (756.979 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 131.581 ms, heap usage 227.959 MB -> 210.595 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (768.275 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.534 ms, heap usage 227.892 MB -> 210.642 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (832.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.913 ms, heap usage 234.703 MB -> 210.693 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (824.732 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.609 ms, heap usage 228.480 MB -> 210.788 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (858.442 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 118.947 ms, heap usage 226.559 MB -> 210.837 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (851.310 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 216.735 MB -> 210.865 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1073.187 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.850 ms, heap usage 215.881 MB -> 210.904 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (968.823 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.393 ms, heap usage 437.051 MB -> 210.986 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (871.115 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.423 ms, heap usage 445.626 MB -> 211.024 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (828.153 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 132.380 ms, heap usage 445.115 MB -> 211.059 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (786.784 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 116.387 ms, heap usage 316.060 MB -> 147.470 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5546.650 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 111.086 ms, heap usage 296.868 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5178.673 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 104.222 ms, heap usage 248.316 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5323.796 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.356 ms, heap usage 384.850 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5470.135 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 118.199 ms, heap usage 301.234 MB -> 147.423 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5281.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 119.291 ms, heap usage 423.626 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5257.988 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 117.705 ms, heap usage 223.339 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5357.991 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 110.036 ms, heap usage 389.213 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5478.297 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 121.025 ms, heap usage 345.195 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5249.333 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.886 ms, heap usage 269.229 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5127.839 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.849 ms, heap usage 244.809 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5823.739 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 146.697 ms, heap usage 175.499 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5724.478 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 142.389 ms, heap usage 472.226 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6334.825 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 133.763 ms, heap usage 251.181 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5658.329 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 131.517 ms, heap usage 402.200 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6717.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 89.399 ms, heap usage 171.725 MB -> 98.329 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (658.405 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 119.710 ms, heap usage 252.329 MB -> 98.918 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (317.820 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 86.808 ms, heap usage 240.918 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (234.506 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.869 ms, heap usage 239.916 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (221.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 128.459 ms, heap usage 239.439 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (201.599 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.146 ms, heap usage 238.904 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (224.815 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 89.459 ms, heap usage 241.155 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (222.268 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 97.592 ms, heap usage 240.317 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (162.776 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 82.902 ms, heap usage 240.211 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (173.289 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 82.188 ms, heap usage 240.244 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (192.864 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 87.035 ms, heap usage 240.731 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (129.190 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 78.267 ms, heap usage 240.872 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (161.823 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 87.999 ms, heap usage 240.251 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (209.179 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.076 ms, heap usage 240.753 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (189.248 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 79.462 ms, heap usage 240.758 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (155.206 ms) ======\n"
    },
    "db-shootout": {
        "times": [
            8178.488,
            8139.624,
            7733.762,
            6815.819,
            7443.934,
            11781.997,
            8639.666,
            7947.788,
            10834.754,
            9192.447,
            8215.907,
            9294.779,
            10589.094,
            9324.678,
            7049.835
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 57.024 ms, heap usage 111.776 MB -> 64.309 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3604.161 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 138.331 ms, heap usage 497.256 MB -> 210.379 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1206.039 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.180 ms, heap usage 342.662 MB -> 210.448 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (802.005 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.097 ms, heap usage 228.745 MB -> 210.498 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (890.021 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 118.591 ms, heap usage 227.856 MB -> 210.547 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (756.979 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 131.581 ms, heap usage 227.959 MB -> 210.595 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (768.275 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.534 ms, heap usage 227.892 MB -> 210.642 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (832.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.913 ms, heap usage 234.703 MB -> 210.693 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (824.732 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.609 ms, heap usage 228.480 MB -> 210.788 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (858.442 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 118.947 ms, heap usage 226.559 MB -> 210.837 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (851.310 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 216.735 MB -> 210.865 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1073.187 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.850 ms, heap usage 215.881 MB -> 210.904 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (968.823 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.393 ms, heap usage 437.051 MB -> 210.986 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (871.115 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.423 ms, heap usage 445.626 MB -> 211.024 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (828.153 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 132.380 ms, heap usage 445.115 MB -> 211.059 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (786.784 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 116.387 ms, heap usage 316.060 MB -> 147.470 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5546.650 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 111.086 ms, heap usage 296.868 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5178.673 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 104.222 ms, heap usage 248.316 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5323.796 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.356 ms, heap usage 384.850 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5470.135 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 118.199 ms, heap usage 301.234 MB -> 147.423 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5281.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 119.291 ms, heap usage 423.626 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5257.988 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 117.705 ms, heap usage 223.339 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5357.991 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 110.036 ms, heap usage 389.213 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5478.297 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 121.025 ms, heap usage 345.195 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5249.333 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.886 ms, heap usage 269.229 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5127.839 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.849 ms, heap usage 244.809 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5823.739 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 146.697 ms, heap usage 175.499 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5724.478 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 142.389 ms, heap usage 472.226 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6334.825 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 133.763 ms, heap usage 251.181 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5658.329 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 131.517 ms, heap usage 402.200 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6717.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 89.399 ms, heap usage 171.725 MB -> 98.329 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (658.405 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 119.710 ms, heap usage 252.329 MB -> 98.918 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (317.820 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 86.808 ms, heap usage 240.918 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (234.506 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.869 ms, heap usage 239.916 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (221.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 128.459 ms, heap usage 239.439 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (201.599 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.146 ms, heap usage 238.904 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (224.815 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 89.459 ms, heap usage 241.155 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (222.268 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 97.592 ms, heap usage 240.317 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (162.776 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 82.902 ms, heap usage 240.211 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (173.289 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 82.188 ms, heap usage 240.244 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (192.864 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 87.035 ms, heap usage 240.731 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (129.190 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 78.267 ms, heap usage 240.872 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (161.823 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 87.999 ms, heap usage 240.251 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (209.179 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.076 ms, heap usage 240.753 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (189.248 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 79.462 ms, heap usage 240.758 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (155.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 85.249 ms, heap usage 209.534 MB -> 101.361 MB.\n====== db-shootout (database) [default], iteration 0 completed (8178.488 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 97.054 ms, heap usage 225.642 MB -> 109.901 MB.\n====== db-shootout (database) [default], iteration 1 completed (8139.624 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 77.040 ms, heap usage 163.573 MB -> 111.847 MB.\n====== db-shootout (database) [default], iteration 2 completed (7733.762 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 83.562 ms, heap usage 196.819 MB -> 111.010 MB.\n====== db-shootout (database) [default], iteration 3 completed (6815.819 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 64.493 ms, heap usage 378.799 MB -> 112.387 MB.\n====== db-shootout (database) [default], iteration 4 completed (7443.934 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.668 ms, heap usage 258.599 MB -> 112.317 MB.\n====== db-shootout (database) [default], iteration 5 completed (11781.997 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 150.175 ms, heap usage 480.968 MB -> 112.405 MB.\n====== db-shootout (database) [default], iteration 6 completed (8639.666 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 90.800 ms, heap usage 162.455 MB -> 108.554 MB.\n====== db-shootout (database) [default], iteration 7 completed (7947.788 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 249.811 ms, heap usage 301.609 MB -> 109.781 MB.\n====== db-shootout (database) [default], iteration 8 completed (10834.754 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 77.843 ms, heap usage 212.355 MB -> 108.400 MB.\n====== db-shootout (database) [default], iteration 9 completed (9192.447 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 84.474 ms, heap usage 727.798 MB -> 113.932 MB.\n====== db-shootout (database) [default], iteration 10 completed (8215.907 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 81.573 ms, heap usage 490.439 MB -> 112.682 MB.\n====== db-shootout (database) [default], iteration 11 completed (9294.779 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 688.794 ms, heap usage 618.538 MB -> 110.652 MB.\n====== db-shootout (database) [default], iteration 12 completed (10589.094 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 1453.918 ms, heap usage 530.866 MB -> 110.423 MB.\n====== db-shootout (database) [default], iteration 13 completed (9324.678 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 77.820 ms, heap usage 358.356 MB -> 110.437 MB.\n====== db-shootout (database) [default], iteration 14 completed (7049.835 ms) ======\n"
    },
    "finagle-http": {
        "times": [
            16125.319,
            9563.126,
            5442.927,
            3964.873,
            3482.041,
            3358.311,
            3329.506,
            3180.565,
            3322.154,
            4063.772,
            4190.495,
            3988.006,
            3860.58,
            3829.378,
            3756.43
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 57.024 ms, heap usage 111.776 MB -> 64.309 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3604.161 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 138.331 ms, heap usage 497.256 MB -> 210.379 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1206.039 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.180 ms, heap usage 342.662 MB -> 210.448 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (802.005 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.097 ms, heap usage 228.745 MB -> 210.498 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (890.021 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 118.591 ms, heap usage 227.856 MB -> 210.547 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (756.979 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 131.581 ms, heap usage 227.959 MB -> 210.595 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (768.275 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.534 ms, heap usage 227.892 MB -> 210.642 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (832.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.913 ms, heap usage 234.703 MB -> 210.693 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (824.732 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.609 ms, heap usage 228.480 MB -> 210.788 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (858.442 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 118.947 ms, heap usage 226.559 MB -> 210.837 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (851.310 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 216.735 MB -> 210.865 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1073.187 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.850 ms, heap usage 215.881 MB -> 210.904 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (968.823 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.393 ms, heap usage 437.051 MB -> 210.986 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (871.115 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.423 ms, heap usage 445.626 MB -> 211.024 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (828.153 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 132.380 ms, heap usage 445.115 MB -> 211.059 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (786.784 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 116.387 ms, heap usage 316.060 MB -> 147.470 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5546.650 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 111.086 ms, heap usage 296.868 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5178.673 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 104.222 ms, heap usage 248.316 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5323.796 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.356 ms, heap usage 384.850 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5470.135 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 118.199 ms, heap usage 301.234 MB -> 147.423 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5281.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 119.291 ms, heap usage 423.626 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5257.988 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 117.705 ms, heap usage 223.339 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5357.991 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 110.036 ms, heap usage 389.213 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5478.297 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 121.025 ms, heap usage 345.195 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5249.333 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.886 ms, heap usage 269.229 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5127.839 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.849 ms, heap usage 244.809 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5823.739 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 146.697 ms, heap usage 175.499 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5724.478 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 142.389 ms, heap usage 472.226 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6334.825 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 133.763 ms, heap usage 251.181 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5658.329 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 131.517 ms, heap usage 402.200 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6717.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 89.399 ms, heap usage 171.725 MB -> 98.329 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (658.405 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 119.710 ms, heap usage 252.329 MB -> 98.918 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (317.820 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 86.808 ms, heap usage 240.918 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (234.506 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.869 ms, heap usage 239.916 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (221.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 128.459 ms, heap usage 239.439 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (201.599 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.146 ms, heap usage 238.904 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (224.815 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 89.459 ms, heap usage 241.155 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (222.268 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 97.592 ms, heap usage 240.317 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (162.776 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 82.902 ms, heap usage 240.211 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (173.289 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 82.188 ms, heap usage 240.244 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (192.864 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 87.035 ms, heap usage 240.731 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (129.190 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 78.267 ms, heap usage 240.872 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (161.823 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 87.999 ms, heap usage 240.251 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (209.179 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.076 ms, heap usage 240.753 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (189.248 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 79.462 ms, heap usage 240.758 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (155.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 85.249 ms, heap usage 209.534 MB -> 101.361 MB.\n====== db-shootout (database) [default], iteration 0 completed (8178.488 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 97.054 ms, heap usage 225.642 MB -> 109.901 MB.\n====== db-shootout (database) [default], iteration 1 completed (8139.624 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 77.040 ms, heap usage 163.573 MB -> 111.847 MB.\n====== db-shootout (database) [default], iteration 2 completed (7733.762 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 83.562 ms, heap usage 196.819 MB -> 111.010 MB.\n====== db-shootout (database) [default], iteration 3 completed (6815.819 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 64.493 ms, heap usage 378.799 MB -> 112.387 MB.\n====== db-shootout (database) [default], iteration 4 completed (7443.934 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.668 ms, heap usage 258.599 MB -> 112.317 MB.\n====== db-shootout (database) [default], iteration 5 completed (11781.997 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 150.175 ms, heap usage 480.968 MB -> 112.405 MB.\n====== db-shootout (database) [default], iteration 6 completed (8639.666 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 90.800 ms, heap usage 162.455 MB -> 108.554 MB.\n====== db-shootout (database) [default], iteration 7 completed (7947.788 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 249.811 ms, heap usage 301.609 MB -> 109.781 MB.\n====== db-shootout (database) [default], iteration 8 completed (10834.754 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 77.843 ms, heap usage 212.355 MB -> 108.400 MB.\n====== db-shootout (database) [default], iteration 9 completed (9192.447 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 84.474 ms, heap usage 727.798 MB -> 113.932 MB.\n====== db-shootout (database) [default], iteration 10 completed (8215.907 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 81.573 ms, heap usage 490.439 MB -> 112.682 MB.\n====== db-shootout (database) [default], iteration 11 completed (9294.779 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 688.794 ms, heap usage 618.538 MB -> 110.652 MB.\n====== db-shootout (database) [default], iteration 12 completed (10589.094 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 1453.918 ms, heap usage 530.866 MB -> 110.423 MB.\n====== db-shootout (database) [default], iteration 13 completed (9324.678 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 77.820 ms, heap usage 358.356 MB -> 110.437 MB.\n====== db-shootout (database) [default], iteration 14 completed (7049.835 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :40767 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 79.764 ms, heap usage 628.172 MB -> 112.987 MB.\n====== finagle-http (web) [default], iteration 0 completed (16125.319 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 85.284 ms, heap usage 264.326 MB -> 115.853 MB.\n====== finagle-http (web) [default], iteration 1 completed (9563.126 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 100.262 ms, heap usage 178.466 MB -> 115.981 MB.\n====== finagle-http (web) [default], iteration 2 completed (5442.927 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 90.114 ms, heap usage 147.058 MB -> 116.704 MB.\n====== finagle-http (web) [default], iteration 3 completed (3964.873 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 83.538 ms, heap usage 140.228 MB -> 116.062 MB.\n====== finagle-http (web) [default], iteration 4 completed (3482.041 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 86.191 ms, heap usage 138.623 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 5 completed (3358.311 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 72.643 ms, heap usage 137.736 MB -> 115.957 MB.\n====== finagle-http (web) [default], iteration 6 completed (3329.506 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 76.530 ms, heap usage 291.603 MB -> 115.964 MB.\n====== finagle-http (web) [default], iteration 7 completed (3180.565 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 76.005 ms, heap usage 294.614 MB -> 116.091 MB.\n====== finagle-http (web) [default], iteration 8 completed (3322.154 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 73.133 ms, heap usage 309.144 MB -> 116.094 MB.\n====== finagle-http (web) [default], iteration 9 completed (4063.772 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.828 ms, heap usage 306.260 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 10 completed (4190.495 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.150 ms, heap usage 306.602 MB -> 115.953 MB.\n====== finagle-http (web) [default], iteration 11 completed (3988.006 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.622 ms, heap usage 307.366 MB -> 115.960 MB.\n====== finagle-http (web) [default], iteration 12 completed (3860.580 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 90.378 ms, heap usage 305.608 MB -> 115.952 MB.\n====== finagle-http (web) [default], iteration 13 completed (3829.378 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 88.649 ms, heap usage 305.958 MB -> 116.090 MB.\n====== finagle-http (web) [default], iteration 14 completed (3756.430 ms) ======\n"
    },
    "reactors": {
        "times": [
            16462.593,
            12978.946,
            13289.425,
            12317.448,
            12099.577,
            11762.808,
            12780.514,
            11939.982,
            11962.495,
            11865.639,
            11700.59,
            12003.59,
            11851.069,
            11846.81,
            11659.2
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 57.024 ms, heap usage 111.776 MB -> 64.309 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3604.161 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 138.331 ms, heap usage 497.256 MB -> 210.379 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1206.039 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.180 ms, heap usage 342.662 MB -> 210.448 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (802.005 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.097 ms, heap usage 228.745 MB -> 210.498 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (890.021 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 118.591 ms, heap usage 227.856 MB -> 210.547 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (756.979 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 131.581 ms, heap usage 227.959 MB -> 210.595 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (768.275 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.534 ms, heap usage 227.892 MB -> 210.642 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (832.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.913 ms, heap usage 234.703 MB -> 210.693 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (824.732 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.609 ms, heap usage 228.480 MB -> 210.788 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (858.442 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 118.947 ms, heap usage 226.559 MB -> 210.837 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (851.310 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 216.735 MB -> 210.865 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1073.187 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.850 ms, heap usage 215.881 MB -> 210.904 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (968.823 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.393 ms, heap usage 437.051 MB -> 210.986 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (871.115 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.423 ms, heap usage 445.626 MB -> 211.024 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (828.153 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 132.380 ms, heap usage 445.115 MB -> 211.059 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (786.784 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 116.387 ms, heap usage 316.060 MB -> 147.470 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5546.650 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 111.086 ms, heap usage 296.868 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5178.673 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 104.222 ms, heap usage 248.316 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5323.796 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.356 ms, heap usage 384.850 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5470.135 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 118.199 ms, heap usage 301.234 MB -> 147.423 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5281.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 119.291 ms, heap usage 423.626 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5257.988 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 117.705 ms, heap usage 223.339 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5357.991 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 110.036 ms, heap usage 389.213 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5478.297 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 121.025 ms, heap usage 345.195 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5249.333 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.886 ms, heap usage 269.229 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5127.839 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.849 ms, heap usage 244.809 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5823.739 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 146.697 ms, heap usage 175.499 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5724.478 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 142.389 ms, heap usage 472.226 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6334.825 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 133.763 ms, heap usage 251.181 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5658.329 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 131.517 ms, heap usage 402.200 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6717.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 89.399 ms, heap usage 171.725 MB -> 98.329 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (658.405 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 119.710 ms, heap usage 252.329 MB -> 98.918 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (317.820 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 86.808 ms, heap usage 240.918 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (234.506 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.869 ms, heap usage 239.916 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (221.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 128.459 ms, heap usage 239.439 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (201.599 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.146 ms, heap usage 238.904 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (224.815 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 89.459 ms, heap usage 241.155 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (222.268 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 97.592 ms, heap usage 240.317 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (162.776 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 82.902 ms, heap usage 240.211 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (173.289 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 82.188 ms, heap usage 240.244 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (192.864 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 87.035 ms, heap usage 240.731 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (129.190 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 78.267 ms, heap usage 240.872 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (161.823 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 87.999 ms, heap usage 240.251 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (209.179 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.076 ms, heap usage 240.753 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (189.248 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 79.462 ms, heap usage 240.758 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (155.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 85.249 ms, heap usage 209.534 MB -> 101.361 MB.\n====== db-shootout (database) [default], iteration 0 completed (8178.488 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 97.054 ms, heap usage 225.642 MB -> 109.901 MB.\n====== db-shootout (database) [default], iteration 1 completed (8139.624 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 77.040 ms, heap usage 163.573 MB -> 111.847 MB.\n====== db-shootout (database) [default], iteration 2 completed (7733.762 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 83.562 ms, heap usage 196.819 MB -> 111.010 MB.\n====== db-shootout (database) [default], iteration 3 completed (6815.819 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 64.493 ms, heap usage 378.799 MB -> 112.387 MB.\n====== db-shootout (database) [default], iteration 4 completed (7443.934 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.668 ms, heap usage 258.599 MB -> 112.317 MB.\n====== db-shootout (database) [default], iteration 5 completed (11781.997 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 150.175 ms, heap usage 480.968 MB -> 112.405 MB.\n====== db-shootout (database) [default], iteration 6 completed (8639.666 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 90.800 ms, heap usage 162.455 MB -> 108.554 MB.\n====== db-shootout (database) [default], iteration 7 completed (7947.788 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 249.811 ms, heap usage 301.609 MB -> 109.781 MB.\n====== db-shootout (database) [default], iteration 8 completed (10834.754 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 77.843 ms, heap usage 212.355 MB -> 108.400 MB.\n====== db-shootout (database) [default], iteration 9 completed (9192.447 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 84.474 ms, heap usage 727.798 MB -> 113.932 MB.\n====== db-shootout (database) [default], iteration 10 completed (8215.907 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 81.573 ms, heap usage 490.439 MB -> 112.682 MB.\n====== db-shootout (database) [default], iteration 11 completed (9294.779 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 688.794 ms, heap usage 618.538 MB -> 110.652 MB.\n====== db-shootout (database) [default], iteration 12 completed (10589.094 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 1453.918 ms, heap usage 530.866 MB -> 110.423 MB.\n====== db-shootout (database) [default], iteration 13 completed (9324.678 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 77.820 ms, heap usage 358.356 MB -> 110.437 MB.\n====== db-shootout (database) [default], iteration 14 completed (7049.835 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :40767 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 79.764 ms, heap usage 628.172 MB -> 112.987 MB.\n====== finagle-http (web) [default], iteration 0 completed (16125.319 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 85.284 ms, heap usage 264.326 MB -> 115.853 MB.\n====== finagle-http (web) [default], iteration 1 completed (9563.126 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 100.262 ms, heap usage 178.466 MB -> 115.981 MB.\n====== finagle-http (web) [default], iteration 2 completed (5442.927 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 90.114 ms, heap usage 147.058 MB -> 116.704 MB.\n====== finagle-http (web) [default], iteration 3 completed (3964.873 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 83.538 ms, heap usage 140.228 MB -> 116.062 MB.\n====== finagle-http (web) [default], iteration 4 completed (3482.041 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 86.191 ms, heap usage 138.623 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 5 completed (3358.311 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 72.643 ms, heap usage 137.736 MB -> 115.957 MB.\n====== finagle-http (web) [default], iteration 6 completed (3329.506 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 76.530 ms, heap usage 291.603 MB -> 115.964 MB.\n====== finagle-http (web) [default], iteration 7 completed (3180.565 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 76.005 ms, heap usage 294.614 MB -> 116.091 MB.\n====== finagle-http (web) [default], iteration 8 completed (3322.154 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 73.133 ms, heap usage 309.144 MB -> 116.094 MB.\n====== finagle-http (web) [default], iteration 9 completed (4063.772 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.828 ms, heap usage 306.260 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 10 completed (4190.495 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.150 ms, heap usage 306.602 MB -> 115.953 MB.\n====== finagle-http (web) [default], iteration 11 completed (3988.006 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.622 ms, heap usage 307.366 MB -> 115.960 MB.\n====== finagle-http (web) [default], iteration 12 completed (3860.580 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 90.378 ms, heap usage 305.608 MB -> 115.952 MB.\n====== finagle-http (web) [default], iteration 13 completed (3829.378 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 88.649 ms, heap usage 305.958 MB -> 116.090 MB.\n====== finagle-http (web) [default], iteration 14 completed (3756.430 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 69.771 ms, heap usage 321.007 MB -> 117.166 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16462.593 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 89.655 ms, heap usage 714.025 MB -> 118.261 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12978.946 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 71.674 ms, heap usage 620.447 MB -> 113.634 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (13289.425 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 70.956 ms, heap usage 620.934 MB -> 113.643 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12317.448 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.165 ms, heap usage 628.025 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12099.577 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 91.926 ms, heap usage 641.437 MB -> 113.653 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (11762.808 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 91.532 ms, heap usage 640.911 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12780.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 73.684 ms, heap usage 647.268 MB -> 113.662 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11939.982 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 81.023 ms, heap usage 630.064 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11962.495 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.889 ms, heap usage 641.991 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11865.639 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.469 ms, heap usage 642.252 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11700.590 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 74.819 ms, heap usage 634.476 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12003.590 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 86.586 ms, heap usage 637.097 MB -> 113.667 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11851.069 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 77.749 ms, heap usage 639.661 MB -> 113.661 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11846.810 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 68.273 ms, heap usage 634.862 MB -> 113.666 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (11659.200 ms) ======\n"
    },
    "dec-tree": {
        "times": [
            8359.398,
            2252.165,
            1579.383,
            1401.174,
            1327.201,
            1285.131,
            1307.092,
            1272.034,
            1215.064,
            1231.511,
            1267.367,
            1212.737,
            1233.533,
            1224.511,
            1249.193
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 57.024 ms, heap usage 111.776 MB -> 64.309 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3604.161 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 138.331 ms, heap usage 497.256 MB -> 210.379 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1206.039 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.180 ms, heap usage 342.662 MB -> 210.448 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (802.005 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.097 ms, heap usage 228.745 MB -> 210.498 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (890.021 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 118.591 ms, heap usage 227.856 MB -> 210.547 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (756.979 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 131.581 ms, heap usage 227.959 MB -> 210.595 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (768.275 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.534 ms, heap usage 227.892 MB -> 210.642 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (832.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.913 ms, heap usage 234.703 MB -> 210.693 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (824.732 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.609 ms, heap usage 228.480 MB -> 210.788 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (858.442 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 118.947 ms, heap usage 226.559 MB -> 210.837 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (851.310 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 216.735 MB -> 210.865 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1073.187 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.850 ms, heap usage 215.881 MB -> 210.904 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (968.823 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.393 ms, heap usage 437.051 MB -> 210.986 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (871.115 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.423 ms, heap usage 445.626 MB -> 211.024 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (828.153 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 132.380 ms, heap usage 445.115 MB -> 211.059 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (786.784 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 116.387 ms, heap usage 316.060 MB -> 147.470 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5546.650 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 111.086 ms, heap usage 296.868 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5178.673 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 104.222 ms, heap usage 248.316 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5323.796 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.356 ms, heap usage 384.850 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5470.135 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 118.199 ms, heap usage 301.234 MB -> 147.423 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5281.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 119.291 ms, heap usage 423.626 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5257.988 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 117.705 ms, heap usage 223.339 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5357.991 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 110.036 ms, heap usage 389.213 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5478.297 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 121.025 ms, heap usage 345.195 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5249.333 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.886 ms, heap usage 269.229 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5127.839 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.849 ms, heap usage 244.809 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5823.739 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 146.697 ms, heap usage 175.499 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5724.478 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 142.389 ms, heap usage 472.226 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6334.825 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 133.763 ms, heap usage 251.181 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5658.329 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 131.517 ms, heap usage 402.200 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6717.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 89.399 ms, heap usage 171.725 MB -> 98.329 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (658.405 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 119.710 ms, heap usage 252.329 MB -> 98.918 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (317.820 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 86.808 ms, heap usage 240.918 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (234.506 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.869 ms, heap usage 239.916 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (221.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 128.459 ms, heap usage 239.439 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (201.599 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.146 ms, heap usage 238.904 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (224.815 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 89.459 ms, heap usage 241.155 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (222.268 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 97.592 ms, heap usage 240.317 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (162.776 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 82.902 ms, heap usage 240.211 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (173.289 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 82.188 ms, heap usage 240.244 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (192.864 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 87.035 ms, heap usage 240.731 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (129.190 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 78.267 ms, heap usage 240.872 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (161.823 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 87.999 ms, heap usage 240.251 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (209.179 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.076 ms, heap usage 240.753 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (189.248 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 79.462 ms, heap usage 240.758 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (155.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 85.249 ms, heap usage 209.534 MB -> 101.361 MB.\n====== db-shootout (database) [default], iteration 0 completed (8178.488 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 97.054 ms, heap usage 225.642 MB -> 109.901 MB.\n====== db-shootout (database) [default], iteration 1 completed (8139.624 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 77.040 ms, heap usage 163.573 MB -> 111.847 MB.\n====== db-shootout (database) [default], iteration 2 completed (7733.762 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 83.562 ms, heap usage 196.819 MB -> 111.010 MB.\n====== db-shootout (database) [default], iteration 3 completed (6815.819 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 64.493 ms, heap usage 378.799 MB -> 112.387 MB.\n====== db-shootout (database) [default], iteration 4 completed (7443.934 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.668 ms, heap usage 258.599 MB -> 112.317 MB.\n====== db-shootout (database) [default], iteration 5 completed (11781.997 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 150.175 ms, heap usage 480.968 MB -> 112.405 MB.\n====== db-shootout (database) [default], iteration 6 completed (8639.666 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 90.800 ms, heap usage 162.455 MB -> 108.554 MB.\n====== db-shootout (database) [default], iteration 7 completed (7947.788 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 249.811 ms, heap usage 301.609 MB -> 109.781 MB.\n====== db-shootout (database) [default], iteration 8 completed (10834.754 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 77.843 ms, heap usage 212.355 MB -> 108.400 MB.\n====== db-shootout (database) [default], iteration 9 completed (9192.447 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 84.474 ms, heap usage 727.798 MB -> 113.932 MB.\n====== db-shootout (database) [default], iteration 10 completed (8215.907 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 81.573 ms, heap usage 490.439 MB -> 112.682 MB.\n====== db-shootout (database) [default], iteration 11 completed (9294.779 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 688.794 ms, heap usage 618.538 MB -> 110.652 MB.\n====== db-shootout (database) [default], iteration 12 completed (10589.094 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 1453.918 ms, heap usage 530.866 MB -> 110.423 MB.\n====== db-shootout (database) [default], iteration 13 completed (9324.678 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 77.820 ms, heap usage 358.356 MB -> 110.437 MB.\n====== db-shootout (database) [default], iteration 14 completed (7049.835 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :40767 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 79.764 ms, heap usage 628.172 MB -> 112.987 MB.\n====== finagle-http (web) [default], iteration 0 completed (16125.319 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 85.284 ms, heap usage 264.326 MB -> 115.853 MB.\n====== finagle-http (web) [default], iteration 1 completed (9563.126 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 100.262 ms, heap usage 178.466 MB -> 115.981 MB.\n====== finagle-http (web) [default], iteration 2 completed (5442.927 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 90.114 ms, heap usage 147.058 MB -> 116.704 MB.\n====== finagle-http (web) [default], iteration 3 completed (3964.873 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 83.538 ms, heap usage 140.228 MB -> 116.062 MB.\n====== finagle-http (web) [default], iteration 4 completed (3482.041 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 86.191 ms, heap usage 138.623 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 5 completed (3358.311 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 72.643 ms, heap usage 137.736 MB -> 115.957 MB.\n====== finagle-http (web) [default], iteration 6 completed (3329.506 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 76.530 ms, heap usage 291.603 MB -> 115.964 MB.\n====== finagle-http (web) [default], iteration 7 completed (3180.565 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 76.005 ms, heap usage 294.614 MB -> 116.091 MB.\n====== finagle-http (web) [default], iteration 8 completed (3322.154 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 73.133 ms, heap usage 309.144 MB -> 116.094 MB.\n====== finagle-http (web) [default], iteration 9 completed (4063.772 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.828 ms, heap usage 306.260 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 10 completed (4190.495 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.150 ms, heap usage 306.602 MB -> 115.953 MB.\n====== finagle-http (web) [default], iteration 11 completed (3988.006 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.622 ms, heap usage 307.366 MB -> 115.960 MB.\n====== finagle-http (web) [default], iteration 12 completed (3860.580 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 90.378 ms, heap usage 305.608 MB -> 115.952 MB.\n====== finagle-http (web) [default], iteration 13 completed (3829.378 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 88.649 ms, heap usage 305.958 MB -> 116.090 MB.\n====== finagle-http (web) [default], iteration 14 completed (3756.430 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 69.771 ms, heap usage 321.007 MB -> 117.166 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16462.593 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 89.655 ms, heap usage 714.025 MB -> 118.261 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12978.946 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 71.674 ms, heap usage 620.447 MB -> 113.634 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (13289.425 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 70.956 ms, heap usage 620.934 MB -> 113.643 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12317.448 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.165 ms, heap usage 628.025 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12099.577 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 91.926 ms, heap usage 641.437 MB -> 113.653 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (11762.808 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 91.532 ms, heap usage 640.911 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12780.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 73.684 ms, heap usage 647.268 MB -> 113.662 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11939.982 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 81.023 ms, heap usage 630.064 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11962.495 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.889 ms, heap usage 641.991 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11865.639 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.469 ms, heap usage 642.252 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11700.590 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 74.819 ms, heap usage 634.476 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12003.590 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 86.586 ms, heap usage 637.097 MB -> 113.667 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11851.069 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 77.749 ms, heap usage 639.661 MB -> 113.661 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11846.810 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 68.273 ms, heap usage 634.862 MB -> 113.666 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (11659.200 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.240 ms, heap usage 223.260 MB -> 126.812 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8359.398 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 193.640 ms, heap usage 238.332 MB -> 159.038 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2252.165 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 123.113 ms, heap usage 475.399 MB -> 159.598 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1579.383 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 92.963 ms, heap usage 438.994 MB -> 159.989 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1401.174 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 87.620 ms, heap usage 470.232 MB -> 160.198 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1327.201 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.082 ms, heap usage 466.302 MB -> 160.409 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1285.131 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 94.458 ms, heap usage 459.694 MB -> 160.487 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1307.092 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 101.470 ms, heap usage 450.330 MB -> 160.683 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1272.034 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 90.283 ms, heap usage 453.780 MB -> 160.831 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1215.064 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.802 ms, heap usage 450.996 MB -> 161.106 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1231.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 101.875 ms, heap usage 466.286 MB -> 161.225 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1267.367 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.689 ms, heap usage 445.291 MB -> 161.359 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1212.737 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.024 ms, heap usage 470.293 MB -> 161.480 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1233.533 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 97.202 ms, heap usage 477.434 MB -> 161.634 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1224.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 97.570 ms, heap usage 455.767 MB -> 161.770 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1249.193 ms) ======\n"
    },
    "scala-stm-bench7": {
        "times": [
            2270.567,
            1534.303,
            1269.554,
            1335.067,
            1246.417,
            1299.472,
            1233.081,
            1227.486,
            1204.561,
            1228.785,
            1219.735,
            1310.336,
            1221.388,
            1204.953,
            1222.566
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 57.024 ms, heap usage 111.776 MB -> 64.309 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3604.161 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 138.331 ms, heap usage 497.256 MB -> 210.379 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1206.039 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.180 ms, heap usage 342.662 MB -> 210.448 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (802.005 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.097 ms, heap usage 228.745 MB -> 210.498 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (890.021 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 118.591 ms, heap usage 227.856 MB -> 210.547 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (756.979 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 131.581 ms, heap usage 227.959 MB -> 210.595 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (768.275 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.534 ms, heap usage 227.892 MB -> 210.642 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (832.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.913 ms, heap usage 234.703 MB -> 210.693 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (824.732 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.609 ms, heap usage 228.480 MB -> 210.788 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (858.442 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 118.947 ms, heap usage 226.559 MB -> 210.837 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (851.310 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 216.735 MB -> 210.865 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1073.187 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.850 ms, heap usage 215.881 MB -> 210.904 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (968.823 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.393 ms, heap usage 437.051 MB -> 210.986 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (871.115 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.423 ms, heap usage 445.626 MB -> 211.024 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (828.153 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 132.380 ms, heap usage 445.115 MB -> 211.059 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (786.784 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 116.387 ms, heap usage 316.060 MB -> 147.470 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5546.650 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 111.086 ms, heap usage 296.868 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5178.673 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 104.222 ms, heap usage 248.316 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5323.796 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.356 ms, heap usage 384.850 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5470.135 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 118.199 ms, heap usage 301.234 MB -> 147.423 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5281.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 119.291 ms, heap usage 423.626 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5257.988 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 117.705 ms, heap usage 223.339 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5357.991 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 110.036 ms, heap usage 389.213 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5478.297 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 121.025 ms, heap usage 345.195 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5249.333 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.886 ms, heap usage 269.229 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5127.839 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.849 ms, heap usage 244.809 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5823.739 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 146.697 ms, heap usage 175.499 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5724.478 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 142.389 ms, heap usage 472.226 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6334.825 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 133.763 ms, heap usage 251.181 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5658.329 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 131.517 ms, heap usage 402.200 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6717.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 89.399 ms, heap usage 171.725 MB -> 98.329 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (658.405 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 119.710 ms, heap usage 252.329 MB -> 98.918 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (317.820 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 86.808 ms, heap usage 240.918 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (234.506 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.869 ms, heap usage 239.916 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (221.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 128.459 ms, heap usage 239.439 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (201.599 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.146 ms, heap usage 238.904 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (224.815 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 89.459 ms, heap usage 241.155 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (222.268 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 97.592 ms, heap usage 240.317 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (162.776 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 82.902 ms, heap usage 240.211 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (173.289 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 82.188 ms, heap usage 240.244 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (192.864 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 87.035 ms, heap usage 240.731 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (129.190 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 78.267 ms, heap usage 240.872 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (161.823 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 87.999 ms, heap usage 240.251 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (209.179 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.076 ms, heap usage 240.753 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (189.248 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 79.462 ms, heap usage 240.758 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (155.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 85.249 ms, heap usage 209.534 MB -> 101.361 MB.\n====== db-shootout (database) [default], iteration 0 completed (8178.488 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 97.054 ms, heap usage 225.642 MB -> 109.901 MB.\n====== db-shootout (database) [default], iteration 1 completed (8139.624 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 77.040 ms, heap usage 163.573 MB -> 111.847 MB.\n====== db-shootout (database) [default], iteration 2 completed (7733.762 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 83.562 ms, heap usage 196.819 MB -> 111.010 MB.\n====== db-shootout (database) [default], iteration 3 completed (6815.819 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 64.493 ms, heap usage 378.799 MB -> 112.387 MB.\n====== db-shootout (database) [default], iteration 4 completed (7443.934 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.668 ms, heap usage 258.599 MB -> 112.317 MB.\n====== db-shootout (database) [default], iteration 5 completed (11781.997 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 150.175 ms, heap usage 480.968 MB -> 112.405 MB.\n====== db-shootout (database) [default], iteration 6 completed (8639.666 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 90.800 ms, heap usage 162.455 MB -> 108.554 MB.\n====== db-shootout (database) [default], iteration 7 completed (7947.788 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 249.811 ms, heap usage 301.609 MB -> 109.781 MB.\n====== db-shootout (database) [default], iteration 8 completed (10834.754 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 77.843 ms, heap usage 212.355 MB -> 108.400 MB.\n====== db-shootout (database) [default], iteration 9 completed (9192.447 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 84.474 ms, heap usage 727.798 MB -> 113.932 MB.\n====== db-shootout (database) [default], iteration 10 completed (8215.907 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 81.573 ms, heap usage 490.439 MB -> 112.682 MB.\n====== db-shootout (database) [default], iteration 11 completed (9294.779 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 688.794 ms, heap usage 618.538 MB -> 110.652 MB.\n====== db-shootout (database) [default], iteration 12 completed (10589.094 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 1453.918 ms, heap usage 530.866 MB -> 110.423 MB.\n====== db-shootout (database) [default], iteration 13 completed (9324.678 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 77.820 ms, heap usage 358.356 MB -> 110.437 MB.\n====== db-shootout (database) [default], iteration 14 completed (7049.835 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :40767 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 79.764 ms, heap usage 628.172 MB -> 112.987 MB.\n====== finagle-http (web) [default], iteration 0 completed (16125.319 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 85.284 ms, heap usage 264.326 MB -> 115.853 MB.\n====== finagle-http (web) [default], iteration 1 completed (9563.126 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 100.262 ms, heap usage 178.466 MB -> 115.981 MB.\n====== finagle-http (web) [default], iteration 2 completed (5442.927 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 90.114 ms, heap usage 147.058 MB -> 116.704 MB.\n====== finagle-http (web) [default], iteration 3 completed (3964.873 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 83.538 ms, heap usage 140.228 MB -> 116.062 MB.\n====== finagle-http (web) [default], iteration 4 completed (3482.041 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 86.191 ms, heap usage 138.623 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 5 completed (3358.311 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 72.643 ms, heap usage 137.736 MB -> 115.957 MB.\n====== finagle-http (web) [default], iteration 6 completed (3329.506 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 76.530 ms, heap usage 291.603 MB -> 115.964 MB.\n====== finagle-http (web) [default], iteration 7 completed (3180.565 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 76.005 ms, heap usage 294.614 MB -> 116.091 MB.\n====== finagle-http (web) [default], iteration 8 completed (3322.154 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 73.133 ms, heap usage 309.144 MB -> 116.094 MB.\n====== finagle-http (web) [default], iteration 9 completed (4063.772 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.828 ms, heap usage 306.260 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 10 completed (4190.495 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.150 ms, heap usage 306.602 MB -> 115.953 MB.\n====== finagle-http (web) [default], iteration 11 completed (3988.006 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.622 ms, heap usage 307.366 MB -> 115.960 MB.\n====== finagle-http (web) [default], iteration 12 completed (3860.580 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 90.378 ms, heap usage 305.608 MB -> 115.952 MB.\n====== finagle-http (web) [default], iteration 13 completed (3829.378 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 88.649 ms, heap usage 305.958 MB -> 116.090 MB.\n====== finagle-http (web) [default], iteration 14 completed (3756.430 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 69.771 ms, heap usage 321.007 MB -> 117.166 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16462.593 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 89.655 ms, heap usage 714.025 MB -> 118.261 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12978.946 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 71.674 ms, heap usage 620.447 MB -> 113.634 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (13289.425 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 70.956 ms, heap usage 620.934 MB -> 113.643 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12317.448 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.165 ms, heap usage 628.025 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12099.577 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 91.926 ms, heap usage 641.437 MB -> 113.653 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (11762.808 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 91.532 ms, heap usage 640.911 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12780.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 73.684 ms, heap usage 647.268 MB -> 113.662 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11939.982 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 81.023 ms, heap usage 630.064 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11962.495 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.889 ms, heap usage 641.991 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11865.639 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.469 ms, heap usage 642.252 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11700.590 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 74.819 ms, heap usage 634.476 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12003.590 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 86.586 ms, heap usage 637.097 MB -> 113.667 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11851.069 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 77.749 ms, heap usage 639.661 MB -> 113.661 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11846.810 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 68.273 ms, heap usage 634.862 MB -> 113.666 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (11659.200 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.240 ms, heap usage 223.260 MB -> 126.812 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8359.398 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 193.640 ms, heap usage 238.332 MB -> 159.038 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2252.165 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 123.113 ms, heap usage 475.399 MB -> 159.598 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1579.383 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 92.963 ms, heap usage 438.994 MB -> 159.989 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1401.174 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 87.620 ms, heap usage 470.232 MB -> 160.198 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1327.201 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.082 ms, heap usage 466.302 MB -> 160.409 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1285.131 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 94.458 ms, heap usage 459.694 MB -> 160.487 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1307.092 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 101.470 ms, heap usage 450.330 MB -> 160.683 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1272.034 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 90.283 ms, heap usage 453.780 MB -> 160.831 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1215.064 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.802 ms, heap usage 450.996 MB -> 161.106 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1231.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 101.875 ms, heap usage 466.286 MB -> 161.225 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1267.367 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.689 ms, heap usage 445.291 MB -> 161.359 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1212.737 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.024 ms, heap usage 470.293 MB -> 161.480 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1233.533 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 97.202 ms, heap usage 477.434 MB -> 161.634 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1224.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 97.570 ms, heap usage 455.767 MB -> 161.770 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1249.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 110.194 ms, heap usage 467.137 MB -> 141.959 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 542\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 47\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 27\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 542\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 7\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 7\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 27\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 127.19 op/s (127.19 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2270.567 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.411 ms, heap usage 461.992 MB -> 142.225 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 479\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 542\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 7\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 27\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 312.50 op/s (312.50 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1534.303 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 103.429 ms, heap usage 505.402 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 335\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 38\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 542\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 7\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 27\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 17\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 643.43 op/s (643.43 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.554 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 102.552 ms, heap usage 512.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 366\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 542\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 7\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 20\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 27\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 17\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 798.00 op/s (798.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1335.067 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 110.023 ms, heap usage 514.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 350\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 542\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 7\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 20\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 27\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1098.90 op/s (1098.90 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1246.417 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 105.370 ms, heap usage 515.533 MB -> 142.220 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 345\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 542\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 7\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 27\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1348.31 op/s (1348.31 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1299.472 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 102.936 ms, heap usage 514.417 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 542\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 8\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 20\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 27\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1521.74 op/s (1521.74 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1233.081 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 102.927 ms, heap usage 514.790 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 314\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 542\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 8\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 20\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 27\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 24\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1899.11 op/s (1899.11 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1227.486 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 112.387 ms, heap usage 515.184 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 334\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 542\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 8\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 27\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 24\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2080.92 op/s (2080.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1204.561 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 104.938 ms, heap usage 513.277 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 321\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 542\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 8\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 20\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 27\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 24\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2395.21 op/s (2395.21 op/s including failed)\nElapsed time: 0.33 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1228.785 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 109.005 ms, heap usage 514.527 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 329\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 542\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 8\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 20\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 27\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 24\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2588.24 op/s (2588.24 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1219.735 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 109.314 ms, heap usage 513.998 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 396\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 542\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 8\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 27\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 24\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2341.46 op/s (2341.46 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1310.336 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.556 ms, heap usage 513.533 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 338\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 542\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 8\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 20\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 27\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 24\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2971.43 op/s (2971.43 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1221.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 95.297 ms, heap usage 516.781 MB -> 142.219 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 331\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 542\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 8\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 20\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 27\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 24\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3323.44 op/s (3323.44 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1204.953 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 101.392 ms, heap usage 513.469 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 336\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 542\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 8\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 20\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 27\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 24\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3389.83 op/s (3389.83 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1222.566 ms) ======\n"
    },
    "naive-bayes": {
        "times": [
            27413.906,
            15208.606,
            14978.574,
            15189.159,
            14534.248,
            14454.292,
            15506.628,
            14635.336,
            14851.176,
            14585.233,
            14514.373,
            14488.137,
            15544.839,
            14873.637,
            14295.178
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 57.024 ms, heap usage 111.776 MB -> 64.309 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3604.161 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 138.331 ms, heap usage 497.256 MB -> 210.379 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1206.039 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.180 ms, heap usage 342.662 MB -> 210.448 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (802.005 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.097 ms, heap usage 228.745 MB -> 210.498 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (890.021 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 118.591 ms, heap usage 227.856 MB -> 210.547 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (756.979 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 131.581 ms, heap usage 227.959 MB -> 210.595 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (768.275 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.534 ms, heap usage 227.892 MB -> 210.642 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (832.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.913 ms, heap usage 234.703 MB -> 210.693 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (824.732 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.609 ms, heap usage 228.480 MB -> 210.788 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (858.442 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 118.947 ms, heap usage 226.559 MB -> 210.837 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (851.310 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 216.735 MB -> 210.865 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1073.187 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.850 ms, heap usage 215.881 MB -> 210.904 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (968.823 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.393 ms, heap usage 437.051 MB -> 210.986 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (871.115 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.423 ms, heap usage 445.626 MB -> 211.024 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (828.153 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 132.380 ms, heap usage 445.115 MB -> 211.059 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (786.784 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 116.387 ms, heap usage 316.060 MB -> 147.470 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5546.650 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 111.086 ms, heap usage 296.868 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5178.673 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 104.222 ms, heap usage 248.316 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5323.796 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.356 ms, heap usage 384.850 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5470.135 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 118.199 ms, heap usage 301.234 MB -> 147.423 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5281.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 119.291 ms, heap usage 423.626 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5257.988 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 117.705 ms, heap usage 223.339 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5357.991 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 110.036 ms, heap usage 389.213 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5478.297 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 121.025 ms, heap usage 345.195 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5249.333 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.886 ms, heap usage 269.229 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5127.839 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.849 ms, heap usage 244.809 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5823.739 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 146.697 ms, heap usage 175.499 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5724.478 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 142.389 ms, heap usage 472.226 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6334.825 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 133.763 ms, heap usage 251.181 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5658.329 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 131.517 ms, heap usage 402.200 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6717.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 89.399 ms, heap usage 171.725 MB -> 98.329 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (658.405 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 119.710 ms, heap usage 252.329 MB -> 98.918 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (317.820 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 86.808 ms, heap usage 240.918 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (234.506 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.869 ms, heap usage 239.916 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (221.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 128.459 ms, heap usage 239.439 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (201.599 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.146 ms, heap usage 238.904 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (224.815 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 89.459 ms, heap usage 241.155 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (222.268 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 97.592 ms, heap usage 240.317 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (162.776 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 82.902 ms, heap usage 240.211 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (173.289 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 82.188 ms, heap usage 240.244 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (192.864 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 87.035 ms, heap usage 240.731 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (129.190 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 78.267 ms, heap usage 240.872 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (161.823 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 87.999 ms, heap usage 240.251 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (209.179 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.076 ms, heap usage 240.753 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (189.248 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 79.462 ms, heap usage 240.758 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (155.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 85.249 ms, heap usage 209.534 MB -> 101.361 MB.\n====== db-shootout (database) [default], iteration 0 completed (8178.488 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 97.054 ms, heap usage 225.642 MB -> 109.901 MB.\n====== db-shootout (database) [default], iteration 1 completed (8139.624 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 77.040 ms, heap usage 163.573 MB -> 111.847 MB.\n====== db-shootout (database) [default], iteration 2 completed (7733.762 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 83.562 ms, heap usage 196.819 MB -> 111.010 MB.\n====== db-shootout (database) [default], iteration 3 completed (6815.819 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 64.493 ms, heap usage 378.799 MB -> 112.387 MB.\n====== db-shootout (database) [default], iteration 4 completed (7443.934 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.668 ms, heap usage 258.599 MB -> 112.317 MB.\n====== db-shootout (database) [default], iteration 5 completed (11781.997 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 150.175 ms, heap usage 480.968 MB -> 112.405 MB.\n====== db-shootout (database) [default], iteration 6 completed (8639.666 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 90.800 ms, heap usage 162.455 MB -> 108.554 MB.\n====== db-shootout (database) [default], iteration 7 completed (7947.788 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 249.811 ms, heap usage 301.609 MB -> 109.781 MB.\n====== db-shootout (database) [default], iteration 8 completed (10834.754 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 77.843 ms, heap usage 212.355 MB -> 108.400 MB.\n====== db-shootout (database) [default], iteration 9 completed (9192.447 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 84.474 ms, heap usage 727.798 MB -> 113.932 MB.\n====== db-shootout (database) [default], iteration 10 completed (8215.907 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 81.573 ms, heap usage 490.439 MB -> 112.682 MB.\n====== db-shootout (database) [default], iteration 11 completed (9294.779 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 688.794 ms, heap usage 618.538 MB -> 110.652 MB.\n====== db-shootout (database) [default], iteration 12 completed (10589.094 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 1453.918 ms, heap usage 530.866 MB -> 110.423 MB.\n====== db-shootout (database) [default], iteration 13 completed (9324.678 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 77.820 ms, heap usage 358.356 MB -> 110.437 MB.\n====== db-shootout (database) [default], iteration 14 completed (7049.835 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :40767 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 79.764 ms, heap usage 628.172 MB -> 112.987 MB.\n====== finagle-http (web) [default], iteration 0 completed (16125.319 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 85.284 ms, heap usage 264.326 MB -> 115.853 MB.\n====== finagle-http (web) [default], iteration 1 completed (9563.126 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 100.262 ms, heap usage 178.466 MB -> 115.981 MB.\n====== finagle-http (web) [default], iteration 2 completed (5442.927 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 90.114 ms, heap usage 147.058 MB -> 116.704 MB.\n====== finagle-http (web) [default], iteration 3 completed (3964.873 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 83.538 ms, heap usage 140.228 MB -> 116.062 MB.\n====== finagle-http (web) [default], iteration 4 completed (3482.041 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 86.191 ms, heap usage 138.623 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 5 completed (3358.311 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 72.643 ms, heap usage 137.736 MB -> 115.957 MB.\n====== finagle-http (web) [default], iteration 6 completed (3329.506 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 76.530 ms, heap usage 291.603 MB -> 115.964 MB.\n====== finagle-http (web) [default], iteration 7 completed (3180.565 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 76.005 ms, heap usage 294.614 MB -> 116.091 MB.\n====== finagle-http (web) [default], iteration 8 completed (3322.154 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 73.133 ms, heap usage 309.144 MB -> 116.094 MB.\n====== finagle-http (web) [default], iteration 9 completed (4063.772 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.828 ms, heap usage 306.260 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 10 completed (4190.495 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.150 ms, heap usage 306.602 MB -> 115.953 MB.\n====== finagle-http (web) [default], iteration 11 completed (3988.006 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.622 ms, heap usage 307.366 MB -> 115.960 MB.\n====== finagle-http (web) [default], iteration 12 completed (3860.580 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 90.378 ms, heap usage 305.608 MB -> 115.952 MB.\n====== finagle-http (web) [default], iteration 13 completed (3829.378 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 88.649 ms, heap usage 305.958 MB -> 116.090 MB.\n====== finagle-http (web) [default], iteration 14 completed (3756.430 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 69.771 ms, heap usage 321.007 MB -> 117.166 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16462.593 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 89.655 ms, heap usage 714.025 MB -> 118.261 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12978.946 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 71.674 ms, heap usage 620.447 MB -> 113.634 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (13289.425 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 70.956 ms, heap usage 620.934 MB -> 113.643 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12317.448 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.165 ms, heap usage 628.025 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12099.577 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 91.926 ms, heap usage 641.437 MB -> 113.653 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (11762.808 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 91.532 ms, heap usage 640.911 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12780.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 73.684 ms, heap usage 647.268 MB -> 113.662 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11939.982 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 81.023 ms, heap usage 630.064 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11962.495 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.889 ms, heap usage 641.991 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11865.639 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.469 ms, heap usage 642.252 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11700.590 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 74.819 ms, heap usage 634.476 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12003.590 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 86.586 ms, heap usage 637.097 MB -> 113.667 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11851.069 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 77.749 ms, heap usage 639.661 MB -> 113.661 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11846.810 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 68.273 ms, heap usage 634.862 MB -> 113.666 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (11659.200 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.240 ms, heap usage 223.260 MB -> 126.812 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8359.398 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 193.640 ms, heap usage 238.332 MB -> 159.038 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2252.165 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 123.113 ms, heap usage 475.399 MB -> 159.598 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1579.383 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 92.963 ms, heap usage 438.994 MB -> 159.989 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1401.174 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 87.620 ms, heap usage 470.232 MB -> 160.198 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1327.201 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.082 ms, heap usage 466.302 MB -> 160.409 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1285.131 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 94.458 ms, heap usage 459.694 MB -> 160.487 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1307.092 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 101.470 ms, heap usage 450.330 MB -> 160.683 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1272.034 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 90.283 ms, heap usage 453.780 MB -> 160.831 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1215.064 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.802 ms, heap usage 450.996 MB -> 161.106 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1231.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 101.875 ms, heap usage 466.286 MB -> 161.225 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1267.367 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.689 ms, heap usage 445.291 MB -> 161.359 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1212.737 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.024 ms, heap usage 470.293 MB -> 161.480 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1233.533 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 97.202 ms, heap usage 477.434 MB -> 161.634 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1224.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 97.570 ms, heap usage 455.767 MB -> 161.770 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1249.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 110.194 ms, heap usage 467.137 MB -> 141.959 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 542\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 47\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 27\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 542\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 7\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 7\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 27\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 127.19 op/s (127.19 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2270.567 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.411 ms, heap usage 461.992 MB -> 142.225 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 479\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 542\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 7\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 27\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 312.50 op/s (312.50 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1534.303 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 103.429 ms, heap usage 505.402 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 335\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 38\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 542\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 7\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 27\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 17\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 643.43 op/s (643.43 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.554 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 102.552 ms, heap usage 512.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 366\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 542\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 7\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 20\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 27\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 17\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 798.00 op/s (798.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1335.067 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 110.023 ms, heap usage 514.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 350\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 542\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 7\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 20\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 27\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1098.90 op/s (1098.90 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1246.417 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 105.370 ms, heap usage 515.533 MB -> 142.220 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 345\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 542\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 7\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 27\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1348.31 op/s (1348.31 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1299.472 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 102.936 ms, heap usage 514.417 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 542\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 8\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 20\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 27\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1521.74 op/s (1521.74 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1233.081 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 102.927 ms, heap usage 514.790 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 314\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 542\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 8\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 20\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 27\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 24\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1899.11 op/s (1899.11 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1227.486 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 112.387 ms, heap usage 515.184 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 334\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 542\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 8\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 27\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 24\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2080.92 op/s (2080.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1204.561 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 104.938 ms, heap usage 513.277 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 321\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 542\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 8\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 20\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 27\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 24\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2395.21 op/s (2395.21 op/s including failed)\nElapsed time: 0.33 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1228.785 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 109.005 ms, heap usage 514.527 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 329\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 542\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 8\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 20\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 27\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 24\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2588.24 op/s (2588.24 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1219.735 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 109.314 ms, heap usage 513.998 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 396\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 542\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 8\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 27\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 24\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2341.46 op/s (2341.46 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1310.336 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.556 ms, heap usage 513.533 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 338\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 542\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 8\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 20\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 27\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 24\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2971.43 op/s (2971.43 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1221.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 95.297 ms, heap usage 516.781 MB -> 142.219 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 331\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 542\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 8\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 20\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 27\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 24\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3323.44 op/s (3323.44 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1204.953 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 101.392 ms, heap usage 513.469 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 336\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 542\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 8\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 20\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 27\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 24\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3389.83 op/s (3389.83 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1222.566 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 142.397 ms, heap usage 449.286 MB -> 153.585 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27413.906 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.102 ms, heap usage 485.868 MB -> 429.353 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15208.606 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 120.590 ms, heap usage 750.040 MB -> 429.543 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (14978.574 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 117.090 ms, heap usage 531.569 MB -> 429.685 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15189.159 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.359 ms, heap usage 448.734 MB -> 429.736 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (14534.248 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.133 ms, heap usage 531.585 MB -> 428.861 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14454.292 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 144.980 ms, heap usage 748.013 MB -> 424.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15506.628 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 125.931 ms, heap usage 744.255 MB -> 424.332 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14635.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.965 ms, heap usage 743.985 MB -> 424.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14851.176 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 127.019 ms, heap usage 526.461 MB -> 424.569 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14585.233 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 158.456 ms, heap usage 744.335 MB -> 421.769 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (14514.373 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 113.150 ms, heap usage 433.039 MB -> 421.869 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14488.137 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 152.550 ms, heap usage 492.501 MB -> 421.987 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15544.839 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 126.209 ms, heap usage 741.709 MB -> 422.028 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14873.637 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.078 ms, heap usage 637.867 MB -> 422.091 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14295.178 ms) ======\n"
    },
    "als": {
        "times": [
            18473.338,
            8621.66,
            8049.485,
            8129.205,
            8240.756,
            9468.687,
            9309.41,
            8001.285,
            7411.873,
            7192.411,
            7561.985,
            7334.663,
            7283.065,
            7547.761,
            11748.921
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 57.024 ms, heap usage 111.776 MB -> 64.309 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3604.161 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 138.331 ms, heap usage 497.256 MB -> 210.379 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1206.039 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.180 ms, heap usage 342.662 MB -> 210.448 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (802.005 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.097 ms, heap usage 228.745 MB -> 210.498 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (890.021 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 118.591 ms, heap usage 227.856 MB -> 210.547 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (756.979 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 131.581 ms, heap usage 227.959 MB -> 210.595 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (768.275 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.534 ms, heap usage 227.892 MB -> 210.642 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (832.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.913 ms, heap usage 234.703 MB -> 210.693 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (824.732 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.609 ms, heap usage 228.480 MB -> 210.788 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (858.442 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 118.947 ms, heap usage 226.559 MB -> 210.837 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (851.310 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 216.735 MB -> 210.865 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1073.187 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.850 ms, heap usage 215.881 MB -> 210.904 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (968.823 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.393 ms, heap usage 437.051 MB -> 210.986 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (871.115 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.423 ms, heap usage 445.626 MB -> 211.024 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (828.153 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 132.380 ms, heap usage 445.115 MB -> 211.059 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (786.784 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 116.387 ms, heap usage 316.060 MB -> 147.470 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5546.650 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 111.086 ms, heap usage 296.868 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5178.673 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 104.222 ms, heap usage 248.316 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5323.796 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.356 ms, heap usage 384.850 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5470.135 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 118.199 ms, heap usage 301.234 MB -> 147.423 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5281.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 119.291 ms, heap usage 423.626 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5257.988 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 117.705 ms, heap usage 223.339 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5357.991 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 110.036 ms, heap usage 389.213 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5478.297 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 121.025 ms, heap usage 345.195 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5249.333 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.886 ms, heap usage 269.229 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5127.839 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.849 ms, heap usage 244.809 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5823.739 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 146.697 ms, heap usage 175.499 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5724.478 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 142.389 ms, heap usage 472.226 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6334.825 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 133.763 ms, heap usage 251.181 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5658.329 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 131.517 ms, heap usage 402.200 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6717.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 89.399 ms, heap usage 171.725 MB -> 98.329 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (658.405 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 119.710 ms, heap usage 252.329 MB -> 98.918 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (317.820 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 86.808 ms, heap usage 240.918 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (234.506 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.869 ms, heap usage 239.916 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (221.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 128.459 ms, heap usage 239.439 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (201.599 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.146 ms, heap usage 238.904 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (224.815 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 89.459 ms, heap usage 241.155 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (222.268 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 97.592 ms, heap usage 240.317 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (162.776 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 82.902 ms, heap usage 240.211 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (173.289 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 82.188 ms, heap usage 240.244 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (192.864 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 87.035 ms, heap usage 240.731 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (129.190 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 78.267 ms, heap usage 240.872 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (161.823 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 87.999 ms, heap usage 240.251 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (209.179 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.076 ms, heap usage 240.753 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (189.248 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 79.462 ms, heap usage 240.758 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (155.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 85.249 ms, heap usage 209.534 MB -> 101.361 MB.\n====== db-shootout (database) [default], iteration 0 completed (8178.488 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 97.054 ms, heap usage 225.642 MB -> 109.901 MB.\n====== db-shootout (database) [default], iteration 1 completed (8139.624 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 77.040 ms, heap usage 163.573 MB -> 111.847 MB.\n====== db-shootout (database) [default], iteration 2 completed (7733.762 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 83.562 ms, heap usage 196.819 MB -> 111.010 MB.\n====== db-shootout (database) [default], iteration 3 completed (6815.819 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 64.493 ms, heap usage 378.799 MB -> 112.387 MB.\n====== db-shootout (database) [default], iteration 4 completed (7443.934 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.668 ms, heap usage 258.599 MB -> 112.317 MB.\n====== db-shootout (database) [default], iteration 5 completed (11781.997 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 150.175 ms, heap usage 480.968 MB -> 112.405 MB.\n====== db-shootout (database) [default], iteration 6 completed (8639.666 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 90.800 ms, heap usage 162.455 MB -> 108.554 MB.\n====== db-shootout (database) [default], iteration 7 completed (7947.788 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 249.811 ms, heap usage 301.609 MB -> 109.781 MB.\n====== db-shootout (database) [default], iteration 8 completed (10834.754 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 77.843 ms, heap usage 212.355 MB -> 108.400 MB.\n====== db-shootout (database) [default], iteration 9 completed (9192.447 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 84.474 ms, heap usage 727.798 MB -> 113.932 MB.\n====== db-shootout (database) [default], iteration 10 completed (8215.907 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 81.573 ms, heap usage 490.439 MB -> 112.682 MB.\n====== db-shootout (database) [default], iteration 11 completed (9294.779 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 688.794 ms, heap usage 618.538 MB -> 110.652 MB.\n====== db-shootout (database) [default], iteration 12 completed (10589.094 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 1453.918 ms, heap usage 530.866 MB -> 110.423 MB.\n====== db-shootout (database) [default], iteration 13 completed (9324.678 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 77.820 ms, heap usage 358.356 MB -> 110.437 MB.\n====== db-shootout (database) [default], iteration 14 completed (7049.835 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :40767 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 79.764 ms, heap usage 628.172 MB -> 112.987 MB.\n====== finagle-http (web) [default], iteration 0 completed (16125.319 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 85.284 ms, heap usage 264.326 MB -> 115.853 MB.\n====== finagle-http (web) [default], iteration 1 completed (9563.126 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 100.262 ms, heap usage 178.466 MB -> 115.981 MB.\n====== finagle-http (web) [default], iteration 2 completed (5442.927 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 90.114 ms, heap usage 147.058 MB -> 116.704 MB.\n====== finagle-http (web) [default], iteration 3 completed (3964.873 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 83.538 ms, heap usage 140.228 MB -> 116.062 MB.\n====== finagle-http (web) [default], iteration 4 completed (3482.041 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 86.191 ms, heap usage 138.623 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 5 completed (3358.311 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 72.643 ms, heap usage 137.736 MB -> 115.957 MB.\n====== finagle-http (web) [default], iteration 6 completed (3329.506 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 76.530 ms, heap usage 291.603 MB -> 115.964 MB.\n====== finagle-http (web) [default], iteration 7 completed (3180.565 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 76.005 ms, heap usage 294.614 MB -> 116.091 MB.\n====== finagle-http (web) [default], iteration 8 completed (3322.154 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 73.133 ms, heap usage 309.144 MB -> 116.094 MB.\n====== finagle-http (web) [default], iteration 9 completed (4063.772 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.828 ms, heap usage 306.260 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 10 completed (4190.495 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.150 ms, heap usage 306.602 MB -> 115.953 MB.\n====== finagle-http (web) [default], iteration 11 completed (3988.006 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.622 ms, heap usage 307.366 MB -> 115.960 MB.\n====== finagle-http (web) [default], iteration 12 completed (3860.580 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 90.378 ms, heap usage 305.608 MB -> 115.952 MB.\n====== finagle-http (web) [default], iteration 13 completed (3829.378 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 88.649 ms, heap usage 305.958 MB -> 116.090 MB.\n====== finagle-http (web) [default], iteration 14 completed (3756.430 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 69.771 ms, heap usage 321.007 MB -> 117.166 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16462.593 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 89.655 ms, heap usage 714.025 MB -> 118.261 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12978.946 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 71.674 ms, heap usage 620.447 MB -> 113.634 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (13289.425 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 70.956 ms, heap usage 620.934 MB -> 113.643 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12317.448 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.165 ms, heap usage 628.025 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12099.577 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 91.926 ms, heap usage 641.437 MB -> 113.653 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (11762.808 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 91.532 ms, heap usage 640.911 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12780.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 73.684 ms, heap usage 647.268 MB -> 113.662 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11939.982 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 81.023 ms, heap usage 630.064 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11962.495 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.889 ms, heap usage 641.991 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11865.639 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.469 ms, heap usage 642.252 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11700.590 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 74.819 ms, heap usage 634.476 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12003.590 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 86.586 ms, heap usage 637.097 MB -> 113.667 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11851.069 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 77.749 ms, heap usage 639.661 MB -> 113.661 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11846.810 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 68.273 ms, heap usage 634.862 MB -> 113.666 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (11659.200 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.240 ms, heap usage 223.260 MB -> 126.812 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8359.398 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 193.640 ms, heap usage 238.332 MB -> 159.038 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2252.165 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 123.113 ms, heap usage 475.399 MB -> 159.598 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1579.383 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 92.963 ms, heap usage 438.994 MB -> 159.989 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1401.174 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 87.620 ms, heap usage 470.232 MB -> 160.198 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1327.201 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.082 ms, heap usage 466.302 MB -> 160.409 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1285.131 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 94.458 ms, heap usage 459.694 MB -> 160.487 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1307.092 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 101.470 ms, heap usage 450.330 MB -> 160.683 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1272.034 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 90.283 ms, heap usage 453.780 MB -> 160.831 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1215.064 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.802 ms, heap usage 450.996 MB -> 161.106 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1231.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 101.875 ms, heap usage 466.286 MB -> 161.225 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1267.367 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.689 ms, heap usage 445.291 MB -> 161.359 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1212.737 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.024 ms, heap usage 470.293 MB -> 161.480 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1233.533 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 97.202 ms, heap usage 477.434 MB -> 161.634 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1224.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 97.570 ms, heap usage 455.767 MB -> 161.770 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1249.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 110.194 ms, heap usage 467.137 MB -> 141.959 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 542\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 47\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 27\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 542\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 7\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 7\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 27\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 127.19 op/s (127.19 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2270.567 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.411 ms, heap usage 461.992 MB -> 142.225 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 479\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 542\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 7\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 27\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 312.50 op/s (312.50 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1534.303 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 103.429 ms, heap usage 505.402 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 335\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 38\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 542\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 7\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 27\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 17\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 643.43 op/s (643.43 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.554 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 102.552 ms, heap usage 512.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 366\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 542\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 7\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 20\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 27\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 17\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 798.00 op/s (798.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1335.067 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 110.023 ms, heap usage 514.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 350\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 542\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 7\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 20\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 27\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1098.90 op/s (1098.90 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1246.417 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 105.370 ms, heap usage 515.533 MB -> 142.220 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 345\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 542\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 7\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 27\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1348.31 op/s (1348.31 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1299.472 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 102.936 ms, heap usage 514.417 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 542\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 8\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 20\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 27\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1521.74 op/s (1521.74 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1233.081 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 102.927 ms, heap usage 514.790 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 314\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 542\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 8\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 20\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 27\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 24\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1899.11 op/s (1899.11 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1227.486 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 112.387 ms, heap usage 515.184 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 334\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 542\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 8\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 27\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 24\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2080.92 op/s (2080.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1204.561 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 104.938 ms, heap usage 513.277 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 321\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 542\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 8\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 20\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 27\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 24\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2395.21 op/s (2395.21 op/s including failed)\nElapsed time: 0.33 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1228.785 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 109.005 ms, heap usage 514.527 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 329\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 542\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 8\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 20\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 27\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 24\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2588.24 op/s (2588.24 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1219.735 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 109.314 ms, heap usage 513.998 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 396\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 542\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 8\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 27\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 24\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2341.46 op/s (2341.46 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1310.336 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.556 ms, heap usage 513.533 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 338\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 542\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 8\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 20\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 27\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 24\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2971.43 op/s (2971.43 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1221.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 95.297 ms, heap usage 516.781 MB -> 142.219 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 331\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 542\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 8\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 20\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 27\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 24\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3323.44 op/s (3323.44 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1204.953 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 101.392 ms, heap usage 513.469 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 336\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 542\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 8\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 20\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 27\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 24\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3389.83 op/s (3389.83 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1222.566 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 142.397 ms, heap usage 449.286 MB -> 153.585 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27413.906 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.102 ms, heap usage 485.868 MB -> 429.353 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15208.606 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 120.590 ms, heap usage 750.040 MB -> 429.543 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (14978.574 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 117.090 ms, heap usage 531.569 MB -> 429.685 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15189.159 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.359 ms, heap usage 448.734 MB -> 429.736 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (14534.248 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.133 ms, heap usage 531.585 MB -> 428.861 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14454.292 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 144.980 ms, heap usage 748.013 MB -> 424.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15506.628 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 125.931 ms, heap usage 744.255 MB -> 424.332 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14635.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.965 ms, heap usage 743.985 MB -> 424.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14851.176 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 127.019 ms, heap usage 526.461 MB -> 424.569 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14585.233 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 158.456 ms, heap usage 744.335 MB -> 421.769 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (14514.373 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 113.150 ms, heap usage 433.039 MB -> 421.869 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14488.137 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 152.550 ms, heap usage 492.501 MB -> 421.987 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15544.839 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 126.209 ms, heap usage 741.709 MB -> 422.028 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14873.637 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.078 ms, heap usage 637.867 MB -> 422.091 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14295.178 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 156.311 ms, heap usage 721.605 MB -> 167.517 MB.\n====== als (apache-spark) [default], iteration 0 completed (18473.338 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 237.583 ms, heap usage 490.473 MB -> 193.215 MB.\n====== als (apache-spark) [default], iteration 1 completed (8621.660 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 135.947 ms, heap usage 351.895 MB -> 193.795 MB.\n====== als (apache-spark) [default], iteration 2 completed (8049.485 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.025 ms, heap usage 618.026 MB -> 194.697 MB.\n====== als (apache-spark) [default], iteration 3 completed (8129.205 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 155.068 ms, heap usage 460.812 MB -> 195.244 MB.\n====== als (apache-spark) [default], iteration 4 completed (8240.756 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 205.851 ms, heap usage 326.065 MB -> 195.528 MB.\n====== als (apache-spark) [default], iteration 5 completed (9468.687 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 226.225 ms, heap usage 733.345 MB -> 196.486 MB.\n====== als (apache-spark) [default], iteration 6 completed (9309.410 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 184.231 ms, heap usage 487.781 MB -> 196.681 MB.\n====== als (apache-spark) [default], iteration 7 completed (8001.285 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 173.830 ms, heap usage 505.959 MB -> 197.162 MB.\n====== als (apache-spark) [default], iteration 8 completed (7411.873 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 137.025 ms, heap usage 690.332 MB -> 198.171 MB.\n====== als (apache-spark) [default], iteration 9 completed (7192.411 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 140.481 ms, heap usage 585.415 MB -> 198.215 MB.\n====== als (apache-spark) [default], iteration 10 completed (7561.985 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 140.398 ms, heap usage 492.504 MB -> 198.282 MB.\n====== als (apache-spark) [default], iteration 11 completed (7334.663 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 133.016 ms, heap usage 603.538 MB -> 198.696 MB.\n====== als (apache-spark) [default], iteration 12 completed (7283.065 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 136.910 ms, heap usage 506.800 MB -> 198.997 MB.\n====== als (apache-spark) [default], iteration 13 completed (7547.761 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 298.707 ms, heap usage 495.750 MB -> 198.980 MB.\n====== als (apache-spark) [default], iteration 14 completed (11748.921 ms) ======\n"
    },
    "par-mnemonics": {
        "times": [
            4932.848,
            4203.397,
            4282.457,
            4139.491,
            4579.149,
            4618.768,
            4937.971,
            4095.594,
            4047.537,
            4029.317,
            4006.681,
            4330.704,
            3769.735,
            3639.238,
            3494.136
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 57.024 ms, heap usage 111.776 MB -> 64.309 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3604.161 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 138.331 ms, heap usage 497.256 MB -> 210.379 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1206.039 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.180 ms, heap usage 342.662 MB -> 210.448 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (802.005 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.097 ms, heap usage 228.745 MB -> 210.498 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (890.021 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 118.591 ms, heap usage 227.856 MB -> 210.547 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (756.979 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 131.581 ms, heap usage 227.959 MB -> 210.595 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (768.275 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.534 ms, heap usage 227.892 MB -> 210.642 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (832.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.913 ms, heap usage 234.703 MB -> 210.693 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (824.732 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.609 ms, heap usage 228.480 MB -> 210.788 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (858.442 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 118.947 ms, heap usage 226.559 MB -> 210.837 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (851.310 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 216.735 MB -> 210.865 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1073.187 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.850 ms, heap usage 215.881 MB -> 210.904 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (968.823 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.393 ms, heap usage 437.051 MB -> 210.986 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (871.115 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.423 ms, heap usage 445.626 MB -> 211.024 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (828.153 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 132.380 ms, heap usage 445.115 MB -> 211.059 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (786.784 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 116.387 ms, heap usage 316.060 MB -> 147.470 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5546.650 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 111.086 ms, heap usage 296.868 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5178.673 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 104.222 ms, heap usage 248.316 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5323.796 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.356 ms, heap usage 384.850 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5470.135 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 118.199 ms, heap usage 301.234 MB -> 147.423 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5281.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 119.291 ms, heap usage 423.626 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5257.988 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 117.705 ms, heap usage 223.339 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5357.991 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 110.036 ms, heap usage 389.213 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5478.297 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 121.025 ms, heap usage 345.195 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5249.333 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.886 ms, heap usage 269.229 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5127.839 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.849 ms, heap usage 244.809 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5823.739 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 146.697 ms, heap usage 175.499 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5724.478 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 142.389 ms, heap usage 472.226 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6334.825 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 133.763 ms, heap usage 251.181 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5658.329 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 131.517 ms, heap usage 402.200 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6717.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 89.399 ms, heap usage 171.725 MB -> 98.329 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (658.405 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 119.710 ms, heap usage 252.329 MB -> 98.918 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (317.820 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 86.808 ms, heap usage 240.918 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (234.506 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.869 ms, heap usage 239.916 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (221.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 128.459 ms, heap usage 239.439 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (201.599 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.146 ms, heap usage 238.904 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (224.815 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 89.459 ms, heap usage 241.155 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (222.268 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 97.592 ms, heap usage 240.317 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (162.776 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 82.902 ms, heap usage 240.211 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (173.289 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 82.188 ms, heap usage 240.244 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (192.864 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 87.035 ms, heap usage 240.731 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (129.190 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 78.267 ms, heap usage 240.872 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (161.823 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 87.999 ms, heap usage 240.251 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (209.179 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.076 ms, heap usage 240.753 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (189.248 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 79.462 ms, heap usage 240.758 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (155.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 85.249 ms, heap usage 209.534 MB -> 101.361 MB.\n====== db-shootout (database) [default], iteration 0 completed (8178.488 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 97.054 ms, heap usage 225.642 MB -> 109.901 MB.\n====== db-shootout (database) [default], iteration 1 completed (8139.624 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 77.040 ms, heap usage 163.573 MB -> 111.847 MB.\n====== db-shootout (database) [default], iteration 2 completed (7733.762 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 83.562 ms, heap usage 196.819 MB -> 111.010 MB.\n====== db-shootout (database) [default], iteration 3 completed (6815.819 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 64.493 ms, heap usage 378.799 MB -> 112.387 MB.\n====== db-shootout (database) [default], iteration 4 completed (7443.934 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.668 ms, heap usage 258.599 MB -> 112.317 MB.\n====== db-shootout (database) [default], iteration 5 completed (11781.997 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 150.175 ms, heap usage 480.968 MB -> 112.405 MB.\n====== db-shootout (database) [default], iteration 6 completed (8639.666 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 90.800 ms, heap usage 162.455 MB -> 108.554 MB.\n====== db-shootout (database) [default], iteration 7 completed (7947.788 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 249.811 ms, heap usage 301.609 MB -> 109.781 MB.\n====== db-shootout (database) [default], iteration 8 completed (10834.754 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 77.843 ms, heap usage 212.355 MB -> 108.400 MB.\n====== db-shootout (database) [default], iteration 9 completed (9192.447 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 84.474 ms, heap usage 727.798 MB -> 113.932 MB.\n====== db-shootout (database) [default], iteration 10 completed (8215.907 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 81.573 ms, heap usage 490.439 MB -> 112.682 MB.\n====== db-shootout (database) [default], iteration 11 completed (9294.779 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 688.794 ms, heap usage 618.538 MB -> 110.652 MB.\n====== db-shootout (database) [default], iteration 12 completed (10589.094 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 1453.918 ms, heap usage 530.866 MB -> 110.423 MB.\n====== db-shootout (database) [default], iteration 13 completed (9324.678 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 77.820 ms, heap usage 358.356 MB -> 110.437 MB.\n====== db-shootout (database) [default], iteration 14 completed (7049.835 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :40767 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 79.764 ms, heap usage 628.172 MB -> 112.987 MB.\n====== finagle-http (web) [default], iteration 0 completed (16125.319 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 85.284 ms, heap usage 264.326 MB -> 115.853 MB.\n====== finagle-http (web) [default], iteration 1 completed (9563.126 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 100.262 ms, heap usage 178.466 MB -> 115.981 MB.\n====== finagle-http (web) [default], iteration 2 completed (5442.927 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 90.114 ms, heap usage 147.058 MB -> 116.704 MB.\n====== finagle-http (web) [default], iteration 3 completed (3964.873 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 83.538 ms, heap usage 140.228 MB -> 116.062 MB.\n====== finagle-http (web) [default], iteration 4 completed (3482.041 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 86.191 ms, heap usage 138.623 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 5 completed (3358.311 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 72.643 ms, heap usage 137.736 MB -> 115.957 MB.\n====== finagle-http (web) [default], iteration 6 completed (3329.506 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 76.530 ms, heap usage 291.603 MB -> 115.964 MB.\n====== finagle-http (web) [default], iteration 7 completed (3180.565 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 76.005 ms, heap usage 294.614 MB -> 116.091 MB.\n====== finagle-http (web) [default], iteration 8 completed (3322.154 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 73.133 ms, heap usage 309.144 MB -> 116.094 MB.\n====== finagle-http (web) [default], iteration 9 completed (4063.772 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.828 ms, heap usage 306.260 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 10 completed (4190.495 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.150 ms, heap usage 306.602 MB -> 115.953 MB.\n====== finagle-http (web) [default], iteration 11 completed (3988.006 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.622 ms, heap usage 307.366 MB -> 115.960 MB.\n====== finagle-http (web) [default], iteration 12 completed (3860.580 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 90.378 ms, heap usage 305.608 MB -> 115.952 MB.\n====== finagle-http (web) [default], iteration 13 completed (3829.378 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 88.649 ms, heap usage 305.958 MB -> 116.090 MB.\n====== finagle-http (web) [default], iteration 14 completed (3756.430 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 69.771 ms, heap usage 321.007 MB -> 117.166 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16462.593 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 89.655 ms, heap usage 714.025 MB -> 118.261 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12978.946 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 71.674 ms, heap usage 620.447 MB -> 113.634 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (13289.425 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 70.956 ms, heap usage 620.934 MB -> 113.643 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12317.448 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.165 ms, heap usage 628.025 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12099.577 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 91.926 ms, heap usage 641.437 MB -> 113.653 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (11762.808 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 91.532 ms, heap usage 640.911 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12780.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 73.684 ms, heap usage 647.268 MB -> 113.662 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11939.982 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 81.023 ms, heap usage 630.064 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11962.495 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.889 ms, heap usage 641.991 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11865.639 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.469 ms, heap usage 642.252 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11700.590 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 74.819 ms, heap usage 634.476 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12003.590 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 86.586 ms, heap usage 637.097 MB -> 113.667 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11851.069 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 77.749 ms, heap usage 639.661 MB -> 113.661 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11846.810 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 68.273 ms, heap usage 634.862 MB -> 113.666 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (11659.200 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.240 ms, heap usage 223.260 MB -> 126.812 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8359.398 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 193.640 ms, heap usage 238.332 MB -> 159.038 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2252.165 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 123.113 ms, heap usage 475.399 MB -> 159.598 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1579.383 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 92.963 ms, heap usage 438.994 MB -> 159.989 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1401.174 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 87.620 ms, heap usage 470.232 MB -> 160.198 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1327.201 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.082 ms, heap usage 466.302 MB -> 160.409 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1285.131 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 94.458 ms, heap usage 459.694 MB -> 160.487 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1307.092 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 101.470 ms, heap usage 450.330 MB -> 160.683 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1272.034 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 90.283 ms, heap usage 453.780 MB -> 160.831 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1215.064 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.802 ms, heap usage 450.996 MB -> 161.106 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1231.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 101.875 ms, heap usage 466.286 MB -> 161.225 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1267.367 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.689 ms, heap usage 445.291 MB -> 161.359 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1212.737 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.024 ms, heap usage 470.293 MB -> 161.480 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1233.533 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 97.202 ms, heap usage 477.434 MB -> 161.634 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1224.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 97.570 ms, heap usage 455.767 MB -> 161.770 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1249.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 110.194 ms, heap usage 467.137 MB -> 141.959 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 542\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 47\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 27\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 542\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 7\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 7\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 27\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 127.19 op/s (127.19 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2270.567 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.411 ms, heap usage 461.992 MB -> 142.225 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 479\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 542\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 7\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 27\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 312.50 op/s (312.50 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1534.303 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 103.429 ms, heap usage 505.402 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 335\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 38\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 542\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 7\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 27\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 17\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 643.43 op/s (643.43 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.554 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 102.552 ms, heap usage 512.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 366\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 542\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 7\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 20\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 27\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 17\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 798.00 op/s (798.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1335.067 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 110.023 ms, heap usage 514.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 350\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 542\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 7\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 20\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 27\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1098.90 op/s (1098.90 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1246.417 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 105.370 ms, heap usage 515.533 MB -> 142.220 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 345\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 542\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 7\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 27\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1348.31 op/s (1348.31 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1299.472 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 102.936 ms, heap usage 514.417 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 542\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 8\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 20\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 27\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1521.74 op/s (1521.74 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1233.081 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 102.927 ms, heap usage 514.790 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 314\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 542\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 8\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 20\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 27\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 24\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1899.11 op/s (1899.11 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1227.486 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 112.387 ms, heap usage 515.184 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 334\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 542\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 8\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 27\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 24\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2080.92 op/s (2080.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1204.561 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 104.938 ms, heap usage 513.277 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 321\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 542\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 8\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 20\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 27\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 24\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2395.21 op/s (2395.21 op/s including failed)\nElapsed time: 0.33 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1228.785 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 109.005 ms, heap usage 514.527 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 329\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 542\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 8\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 20\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 27\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 24\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2588.24 op/s (2588.24 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1219.735 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 109.314 ms, heap usage 513.998 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 396\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 542\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 8\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 27\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 24\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2341.46 op/s (2341.46 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1310.336 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.556 ms, heap usage 513.533 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 338\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 542\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 8\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 20\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 27\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 24\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2971.43 op/s (2971.43 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1221.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 95.297 ms, heap usage 516.781 MB -> 142.219 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 331\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 542\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 8\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 20\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 27\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 24\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3323.44 op/s (3323.44 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1204.953 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 101.392 ms, heap usage 513.469 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 336\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 542\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 8\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 20\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 27\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 24\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3389.83 op/s (3389.83 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1222.566 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 142.397 ms, heap usage 449.286 MB -> 153.585 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27413.906 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.102 ms, heap usage 485.868 MB -> 429.353 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15208.606 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 120.590 ms, heap usage 750.040 MB -> 429.543 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (14978.574 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 117.090 ms, heap usage 531.569 MB -> 429.685 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15189.159 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.359 ms, heap usage 448.734 MB -> 429.736 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (14534.248 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.133 ms, heap usage 531.585 MB -> 428.861 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14454.292 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 144.980 ms, heap usage 748.013 MB -> 424.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15506.628 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 125.931 ms, heap usage 744.255 MB -> 424.332 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14635.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.965 ms, heap usage 743.985 MB -> 424.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14851.176 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 127.019 ms, heap usage 526.461 MB -> 424.569 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14585.233 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 158.456 ms, heap usage 744.335 MB -> 421.769 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (14514.373 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 113.150 ms, heap usage 433.039 MB -> 421.869 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14488.137 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 152.550 ms, heap usage 492.501 MB -> 421.987 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15544.839 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 126.209 ms, heap usage 741.709 MB -> 422.028 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14873.637 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.078 ms, heap usage 637.867 MB -> 422.091 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14295.178 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 156.311 ms, heap usage 721.605 MB -> 167.517 MB.\n====== als (apache-spark) [default], iteration 0 completed (18473.338 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 237.583 ms, heap usage 490.473 MB -> 193.215 MB.\n====== als (apache-spark) [default], iteration 1 completed (8621.660 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 135.947 ms, heap usage 351.895 MB -> 193.795 MB.\n====== als (apache-spark) [default], iteration 2 completed (8049.485 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.025 ms, heap usage 618.026 MB -> 194.697 MB.\n====== als (apache-spark) [default], iteration 3 completed (8129.205 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 155.068 ms, heap usage 460.812 MB -> 195.244 MB.\n====== als (apache-spark) [default], iteration 4 completed (8240.756 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 205.851 ms, heap usage 326.065 MB -> 195.528 MB.\n====== als (apache-spark) [default], iteration 5 completed (9468.687 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 226.225 ms, heap usage 733.345 MB -> 196.486 MB.\n====== als (apache-spark) [default], iteration 6 completed (9309.410 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 184.231 ms, heap usage 487.781 MB -> 196.681 MB.\n====== als (apache-spark) [default], iteration 7 completed (8001.285 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 173.830 ms, heap usage 505.959 MB -> 197.162 MB.\n====== als (apache-spark) [default], iteration 8 completed (7411.873 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 137.025 ms, heap usage 690.332 MB -> 198.171 MB.\n====== als (apache-spark) [default], iteration 9 completed (7192.411 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 140.481 ms, heap usage 585.415 MB -> 198.215 MB.\n====== als (apache-spark) [default], iteration 10 completed (7561.985 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 140.398 ms, heap usage 492.504 MB -> 198.282 MB.\n====== als (apache-spark) [default], iteration 11 completed (7334.663 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 133.016 ms, heap usage 603.538 MB -> 198.696 MB.\n====== als (apache-spark) [default], iteration 12 completed (7283.065 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 136.910 ms, heap usage 506.800 MB -> 198.997 MB.\n====== als (apache-spark) [default], iteration 13 completed (7547.761 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 298.707 ms, heap usage 495.750 MB -> 198.980 MB.\n====== als (apache-spark) [default], iteration 14 completed (11748.921 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 187.611 ms, heap usage 692.183 MB -> 185.740 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4932.848 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 128.818 ms, heap usage 317.374 MB -> 179.677 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4203.397 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 126.039 ms, heap usage 311.939 MB -> 179.675 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4282.457 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 130.409 ms, heap usage 366.195 MB -> 179.677 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4139.491 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 122.012 ms, heap usage 317.085 MB -> 179.665 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4579.149 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 123.564 ms, heap usage 372.121 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (4618.768 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 125.018 ms, heap usage 462.714 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (4937.971 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 137.300 ms, heap usage 567.562 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4095.594 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 118.409 ms, heap usage 307.369 MB -> 179.667 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (4047.537 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 116.988 ms, heap usage 303.117 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4029.317 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.553 ms, heap usage 279.661 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4006.681 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 112.397 ms, heap usage 279.117 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4330.704 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 116.739 ms, heap usage 313.116 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3769.735 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 111.424 ms, heap usage 307.166 MB -> 179.672 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3639.238 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 114.887 ms, heap usage 314.046 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3494.136 ms) ======\n"
    },
    "scala-kmeans": {
        "times": [
            301.041,
            191.693,
            192.253,
            175.154,
            174.247,
            181.024,
            181.233,
            190.03,
            186.131,
            166.078,
            177.734,
            177.714,
            163.342,
            171.678,
            179.927
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 57.024 ms, heap usage 111.776 MB -> 64.309 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3604.161 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 138.331 ms, heap usage 497.256 MB -> 210.379 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1206.039 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.180 ms, heap usage 342.662 MB -> 210.448 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (802.005 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.097 ms, heap usage 228.745 MB -> 210.498 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (890.021 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 118.591 ms, heap usage 227.856 MB -> 210.547 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (756.979 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 131.581 ms, heap usage 227.959 MB -> 210.595 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (768.275 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.534 ms, heap usage 227.892 MB -> 210.642 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (832.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.913 ms, heap usage 234.703 MB -> 210.693 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (824.732 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.609 ms, heap usage 228.480 MB -> 210.788 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (858.442 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 118.947 ms, heap usage 226.559 MB -> 210.837 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (851.310 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 216.735 MB -> 210.865 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1073.187 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.850 ms, heap usage 215.881 MB -> 210.904 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (968.823 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.393 ms, heap usage 437.051 MB -> 210.986 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (871.115 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.423 ms, heap usage 445.626 MB -> 211.024 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (828.153 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 132.380 ms, heap usage 445.115 MB -> 211.059 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (786.784 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 116.387 ms, heap usage 316.060 MB -> 147.470 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5546.650 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 111.086 ms, heap usage 296.868 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5178.673 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 104.222 ms, heap usage 248.316 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5323.796 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.356 ms, heap usage 384.850 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5470.135 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 118.199 ms, heap usage 301.234 MB -> 147.423 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5281.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 119.291 ms, heap usage 423.626 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5257.988 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 117.705 ms, heap usage 223.339 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5357.991 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 110.036 ms, heap usage 389.213 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5478.297 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 121.025 ms, heap usage 345.195 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5249.333 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.886 ms, heap usage 269.229 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5127.839 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.849 ms, heap usage 244.809 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5823.739 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 146.697 ms, heap usage 175.499 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5724.478 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 142.389 ms, heap usage 472.226 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6334.825 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 133.763 ms, heap usage 251.181 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5658.329 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 131.517 ms, heap usage 402.200 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6717.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 89.399 ms, heap usage 171.725 MB -> 98.329 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (658.405 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 119.710 ms, heap usage 252.329 MB -> 98.918 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (317.820 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 86.808 ms, heap usage 240.918 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (234.506 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.869 ms, heap usage 239.916 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (221.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 128.459 ms, heap usage 239.439 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (201.599 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.146 ms, heap usage 238.904 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (224.815 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 89.459 ms, heap usage 241.155 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (222.268 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 97.592 ms, heap usage 240.317 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (162.776 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 82.902 ms, heap usage 240.211 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (173.289 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 82.188 ms, heap usage 240.244 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (192.864 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 87.035 ms, heap usage 240.731 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (129.190 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 78.267 ms, heap usage 240.872 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (161.823 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 87.999 ms, heap usage 240.251 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (209.179 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.076 ms, heap usage 240.753 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (189.248 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 79.462 ms, heap usage 240.758 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (155.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 85.249 ms, heap usage 209.534 MB -> 101.361 MB.\n====== db-shootout (database) [default], iteration 0 completed (8178.488 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 97.054 ms, heap usage 225.642 MB -> 109.901 MB.\n====== db-shootout (database) [default], iteration 1 completed (8139.624 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 77.040 ms, heap usage 163.573 MB -> 111.847 MB.\n====== db-shootout (database) [default], iteration 2 completed (7733.762 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 83.562 ms, heap usage 196.819 MB -> 111.010 MB.\n====== db-shootout (database) [default], iteration 3 completed (6815.819 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 64.493 ms, heap usage 378.799 MB -> 112.387 MB.\n====== db-shootout (database) [default], iteration 4 completed (7443.934 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.668 ms, heap usage 258.599 MB -> 112.317 MB.\n====== db-shootout (database) [default], iteration 5 completed (11781.997 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 150.175 ms, heap usage 480.968 MB -> 112.405 MB.\n====== db-shootout (database) [default], iteration 6 completed (8639.666 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 90.800 ms, heap usage 162.455 MB -> 108.554 MB.\n====== db-shootout (database) [default], iteration 7 completed (7947.788 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 249.811 ms, heap usage 301.609 MB -> 109.781 MB.\n====== db-shootout (database) [default], iteration 8 completed (10834.754 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 77.843 ms, heap usage 212.355 MB -> 108.400 MB.\n====== db-shootout (database) [default], iteration 9 completed (9192.447 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 84.474 ms, heap usage 727.798 MB -> 113.932 MB.\n====== db-shootout (database) [default], iteration 10 completed (8215.907 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 81.573 ms, heap usage 490.439 MB -> 112.682 MB.\n====== db-shootout (database) [default], iteration 11 completed (9294.779 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 688.794 ms, heap usage 618.538 MB -> 110.652 MB.\n====== db-shootout (database) [default], iteration 12 completed (10589.094 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 1453.918 ms, heap usage 530.866 MB -> 110.423 MB.\n====== db-shootout (database) [default], iteration 13 completed (9324.678 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 77.820 ms, heap usage 358.356 MB -> 110.437 MB.\n====== db-shootout (database) [default], iteration 14 completed (7049.835 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :40767 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 79.764 ms, heap usage 628.172 MB -> 112.987 MB.\n====== finagle-http (web) [default], iteration 0 completed (16125.319 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 85.284 ms, heap usage 264.326 MB -> 115.853 MB.\n====== finagle-http (web) [default], iteration 1 completed (9563.126 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 100.262 ms, heap usage 178.466 MB -> 115.981 MB.\n====== finagle-http (web) [default], iteration 2 completed (5442.927 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 90.114 ms, heap usage 147.058 MB -> 116.704 MB.\n====== finagle-http (web) [default], iteration 3 completed (3964.873 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 83.538 ms, heap usage 140.228 MB -> 116.062 MB.\n====== finagle-http (web) [default], iteration 4 completed (3482.041 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 86.191 ms, heap usage 138.623 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 5 completed (3358.311 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 72.643 ms, heap usage 137.736 MB -> 115.957 MB.\n====== finagle-http (web) [default], iteration 6 completed (3329.506 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 76.530 ms, heap usage 291.603 MB -> 115.964 MB.\n====== finagle-http (web) [default], iteration 7 completed (3180.565 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 76.005 ms, heap usage 294.614 MB -> 116.091 MB.\n====== finagle-http (web) [default], iteration 8 completed (3322.154 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 73.133 ms, heap usage 309.144 MB -> 116.094 MB.\n====== finagle-http (web) [default], iteration 9 completed (4063.772 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.828 ms, heap usage 306.260 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 10 completed (4190.495 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.150 ms, heap usage 306.602 MB -> 115.953 MB.\n====== finagle-http (web) [default], iteration 11 completed (3988.006 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.622 ms, heap usage 307.366 MB -> 115.960 MB.\n====== finagle-http (web) [default], iteration 12 completed (3860.580 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 90.378 ms, heap usage 305.608 MB -> 115.952 MB.\n====== finagle-http (web) [default], iteration 13 completed (3829.378 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 88.649 ms, heap usage 305.958 MB -> 116.090 MB.\n====== finagle-http (web) [default], iteration 14 completed (3756.430 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 69.771 ms, heap usage 321.007 MB -> 117.166 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16462.593 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 89.655 ms, heap usage 714.025 MB -> 118.261 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12978.946 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 71.674 ms, heap usage 620.447 MB -> 113.634 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (13289.425 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 70.956 ms, heap usage 620.934 MB -> 113.643 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12317.448 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.165 ms, heap usage 628.025 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12099.577 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 91.926 ms, heap usage 641.437 MB -> 113.653 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (11762.808 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 91.532 ms, heap usage 640.911 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12780.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 73.684 ms, heap usage 647.268 MB -> 113.662 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11939.982 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 81.023 ms, heap usage 630.064 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11962.495 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.889 ms, heap usage 641.991 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11865.639 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.469 ms, heap usage 642.252 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11700.590 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 74.819 ms, heap usage 634.476 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12003.590 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 86.586 ms, heap usage 637.097 MB -> 113.667 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11851.069 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 77.749 ms, heap usage 639.661 MB -> 113.661 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11846.810 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 68.273 ms, heap usage 634.862 MB -> 113.666 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (11659.200 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.240 ms, heap usage 223.260 MB -> 126.812 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8359.398 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 193.640 ms, heap usage 238.332 MB -> 159.038 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2252.165 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 123.113 ms, heap usage 475.399 MB -> 159.598 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1579.383 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 92.963 ms, heap usage 438.994 MB -> 159.989 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1401.174 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 87.620 ms, heap usage 470.232 MB -> 160.198 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1327.201 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.082 ms, heap usage 466.302 MB -> 160.409 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1285.131 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 94.458 ms, heap usage 459.694 MB -> 160.487 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1307.092 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 101.470 ms, heap usage 450.330 MB -> 160.683 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1272.034 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 90.283 ms, heap usage 453.780 MB -> 160.831 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1215.064 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.802 ms, heap usage 450.996 MB -> 161.106 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1231.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 101.875 ms, heap usage 466.286 MB -> 161.225 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1267.367 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.689 ms, heap usage 445.291 MB -> 161.359 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1212.737 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.024 ms, heap usage 470.293 MB -> 161.480 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1233.533 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 97.202 ms, heap usage 477.434 MB -> 161.634 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1224.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 97.570 ms, heap usage 455.767 MB -> 161.770 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1249.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 110.194 ms, heap usage 467.137 MB -> 141.959 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 542\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 47\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 27\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 542\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 7\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 7\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 27\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 127.19 op/s (127.19 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2270.567 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.411 ms, heap usage 461.992 MB -> 142.225 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 479\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 542\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 7\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 27\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 312.50 op/s (312.50 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1534.303 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 103.429 ms, heap usage 505.402 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 335\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 38\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 542\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 7\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 27\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 17\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 643.43 op/s (643.43 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.554 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 102.552 ms, heap usage 512.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 366\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 542\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 7\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 20\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 27\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 17\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 798.00 op/s (798.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1335.067 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 110.023 ms, heap usage 514.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 350\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 542\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 7\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 20\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 27\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1098.90 op/s (1098.90 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1246.417 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 105.370 ms, heap usage 515.533 MB -> 142.220 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 345\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 542\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 7\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 27\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1348.31 op/s (1348.31 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1299.472 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 102.936 ms, heap usage 514.417 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 542\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 8\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 20\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 27\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1521.74 op/s (1521.74 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1233.081 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 102.927 ms, heap usage 514.790 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 314\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 542\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 8\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 20\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 27\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 24\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1899.11 op/s (1899.11 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1227.486 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 112.387 ms, heap usage 515.184 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 334\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 542\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 8\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 27\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 24\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2080.92 op/s (2080.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1204.561 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 104.938 ms, heap usage 513.277 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 321\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 542\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 8\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 20\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 27\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 24\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2395.21 op/s (2395.21 op/s including failed)\nElapsed time: 0.33 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1228.785 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 109.005 ms, heap usage 514.527 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 329\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 542\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 8\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 20\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 27\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 24\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2588.24 op/s (2588.24 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1219.735 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 109.314 ms, heap usage 513.998 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 396\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 542\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 8\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 27\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 24\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2341.46 op/s (2341.46 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1310.336 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.556 ms, heap usage 513.533 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 338\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 542\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 8\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 20\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 27\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 24\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2971.43 op/s (2971.43 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1221.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 95.297 ms, heap usage 516.781 MB -> 142.219 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 331\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 542\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 8\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 20\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 27\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 24\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3323.44 op/s (3323.44 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1204.953 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 101.392 ms, heap usage 513.469 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 336\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 542\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 8\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 20\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 27\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 24\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3389.83 op/s (3389.83 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1222.566 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 142.397 ms, heap usage 449.286 MB -> 153.585 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27413.906 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.102 ms, heap usage 485.868 MB -> 429.353 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15208.606 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 120.590 ms, heap usage 750.040 MB -> 429.543 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (14978.574 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 117.090 ms, heap usage 531.569 MB -> 429.685 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15189.159 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.359 ms, heap usage 448.734 MB -> 429.736 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (14534.248 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.133 ms, heap usage 531.585 MB -> 428.861 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14454.292 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 144.980 ms, heap usage 748.013 MB -> 424.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15506.628 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 125.931 ms, heap usage 744.255 MB -> 424.332 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14635.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.965 ms, heap usage 743.985 MB -> 424.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14851.176 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 127.019 ms, heap usage 526.461 MB -> 424.569 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14585.233 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 158.456 ms, heap usage 744.335 MB -> 421.769 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (14514.373 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 113.150 ms, heap usage 433.039 MB -> 421.869 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14488.137 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 152.550 ms, heap usage 492.501 MB -> 421.987 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15544.839 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 126.209 ms, heap usage 741.709 MB -> 422.028 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14873.637 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.078 ms, heap usage 637.867 MB -> 422.091 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14295.178 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 156.311 ms, heap usage 721.605 MB -> 167.517 MB.\n====== als (apache-spark) [default], iteration 0 completed (18473.338 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 237.583 ms, heap usage 490.473 MB -> 193.215 MB.\n====== als (apache-spark) [default], iteration 1 completed (8621.660 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 135.947 ms, heap usage 351.895 MB -> 193.795 MB.\n====== als (apache-spark) [default], iteration 2 completed (8049.485 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.025 ms, heap usage 618.026 MB -> 194.697 MB.\n====== als (apache-spark) [default], iteration 3 completed (8129.205 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 155.068 ms, heap usage 460.812 MB -> 195.244 MB.\n====== als (apache-spark) [default], iteration 4 completed (8240.756 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 205.851 ms, heap usage 326.065 MB -> 195.528 MB.\n====== als (apache-spark) [default], iteration 5 completed (9468.687 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 226.225 ms, heap usage 733.345 MB -> 196.486 MB.\n====== als (apache-spark) [default], iteration 6 completed (9309.410 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 184.231 ms, heap usage 487.781 MB -> 196.681 MB.\n====== als (apache-spark) [default], iteration 7 completed (8001.285 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 173.830 ms, heap usage 505.959 MB -> 197.162 MB.\n====== als (apache-spark) [default], iteration 8 completed (7411.873 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 137.025 ms, heap usage 690.332 MB -> 198.171 MB.\n====== als (apache-spark) [default], iteration 9 completed (7192.411 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 140.481 ms, heap usage 585.415 MB -> 198.215 MB.\n====== als (apache-spark) [default], iteration 10 completed (7561.985 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 140.398 ms, heap usage 492.504 MB -> 198.282 MB.\n====== als (apache-spark) [default], iteration 11 completed (7334.663 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 133.016 ms, heap usage 603.538 MB -> 198.696 MB.\n====== als (apache-spark) [default], iteration 12 completed (7283.065 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 136.910 ms, heap usage 506.800 MB -> 198.997 MB.\n====== als (apache-spark) [default], iteration 13 completed (7547.761 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 298.707 ms, heap usage 495.750 MB -> 198.980 MB.\n====== als (apache-spark) [default], iteration 14 completed (11748.921 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 187.611 ms, heap usage 692.183 MB -> 185.740 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4932.848 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 128.818 ms, heap usage 317.374 MB -> 179.677 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4203.397 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 126.039 ms, heap usage 311.939 MB -> 179.675 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4282.457 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 130.409 ms, heap usage 366.195 MB -> 179.677 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4139.491 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 122.012 ms, heap usage 317.085 MB -> 179.665 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4579.149 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 123.564 ms, heap usage 372.121 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (4618.768 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 125.018 ms, heap usage 462.714 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (4937.971 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 137.300 ms, heap usage 567.562 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4095.594 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 118.409 ms, heap usage 307.369 MB -> 179.667 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (4047.537 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 116.988 ms, heap usage 303.117 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4029.317 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.553 ms, heap usage 279.661 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4006.681 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 112.397 ms, heap usage 279.117 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4330.704 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 116.739 ms, heap usage 313.116 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3769.735 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 111.424 ms, heap usage 307.166 MB -> 179.672 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3639.238 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 114.887 ms, heap usage 314.046 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3494.136 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 208.743 ms, heap usage 359.545 MB -> 201.959 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (301.041 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.992 ms, heap usage 229.959 MB -> 201.995 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (191.693 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 125.615 ms, heap usage 231.993 MB -> 202.003 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (192.253 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 133.266 ms, heap usage 231.990 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (175.154 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 124.824 ms, heap usage 231.993 MB -> 201.998 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (174.247 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 128.714 ms, heap usage 231.990 MB -> 201.995 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (181.024 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 128.089 ms, heap usage 231.990 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (181.233 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 120.693 ms, heap usage 231.993 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (190.030 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 124.157 ms, heap usage 231.991 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (186.131 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 118.065 ms, heap usage 231.990 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (166.078 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 128.042 ms, heap usage 231.991 MB -> 201.996 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (177.734 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 120.100 ms, heap usage 231.991 MB -> 201.992 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (177.714 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 121.825 ms, heap usage 231.994 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (163.342 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 120.932 ms, heap usage 231.992 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (171.678 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 125.264 ms, heap usage 231.992 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (179.927 ms) ======\n"
    },
    "philosophers": {
        "times": [
            1912.599,
            1200.147,
            975.329,
            1001.157,
            1045.017,
            1064.155,
            1156.742,
            1042.461,
            1138.461,
            1001.812,
            975.564,
            1052.043,
            1046.527,
            1114.317,
            985.261
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 57.024 ms, heap usage 111.776 MB -> 64.309 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3604.161 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 138.331 ms, heap usage 497.256 MB -> 210.379 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1206.039 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.180 ms, heap usage 342.662 MB -> 210.448 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (802.005 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.097 ms, heap usage 228.745 MB -> 210.498 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (890.021 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 118.591 ms, heap usage 227.856 MB -> 210.547 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (756.979 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 131.581 ms, heap usage 227.959 MB -> 210.595 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (768.275 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.534 ms, heap usage 227.892 MB -> 210.642 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (832.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.913 ms, heap usage 234.703 MB -> 210.693 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (824.732 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.609 ms, heap usage 228.480 MB -> 210.788 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (858.442 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 118.947 ms, heap usage 226.559 MB -> 210.837 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (851.310 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 216.735 MB -> 210.865 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1073.187 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.850 ms, heap usage 215.881 MB -> 210.904 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (968.823 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.393 ms, heap usage 437.051 MB -> 210.986 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (871.115 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.423 ms, heap usage 445.626 MB -> 211.024 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (828.153 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 132.380 ms, heap usage 445.115 MB -> 211.059 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (786.784 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 116.387 ms, heap usage 316.060 MB -> 147.470 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5546.650 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 111.086 ms, heap usage 296.868 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5178.673 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 104.222 ms, heap usage 248.316 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5323.796 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.356 ms, heap usage 384.850 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5470.135 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 118.199 ms, heap usage 301.234 MB -> 147.423 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5281.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 119.291 ms, heap usage 423.626 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5257.988 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 117.705 ms, heap usage 223.339 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5357.991 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 110.036 ms, heap usage 389.213 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5478.297 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 121.025 ms, heap usage 345.195 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5249.333 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.886 ms, heap usage 269.229 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5127.839 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.849 ms, heap usage 244.809 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5823.739 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 146.697 ms, heap usage 175.499 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5724.478 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 142.389 ms, heap usage 472.226 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6334.825 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 133.763 ms, heap usage 251.181 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5658.329 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 131.517 ms, heap usage 402.200 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6717.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 89.399 ms, heap usage 171.725 MB -> 98.329 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (658.405 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 119.710 ms, heap usage 252.329 MB -> 98.918 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (317.820 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 86.808 ms, heap usage 240.918 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (234.506 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.869 ms, heap usage 239.916 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (221.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 128.459 ms, heap usage 239.439 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (201.599 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.146 ms, heap usage 238.904 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (224.815 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 89.459 ms, heap usage 241.155 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (222.268 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 97.592 ms, heap usage 240.317 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (162.776 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 82.902 ms, heap usage 240.211 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (173.289 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 82.188 ms, heap usage 240.244 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (192.864 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 87.035 ms, heap usage 240.731 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (129.190 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 78.267 ms, heap usage 240.872 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (161.823 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 87.999 ms, heap usage 240.251 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (209.179 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.076 ms, heap usage 240.753 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (189.248 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 79.462 ms, heap usage 240.758 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (155.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 85.249 ms, heap usage 209.534 MB -> 101.361 MB.\n====== db-shootout (database) [default], iteration 0 completed (8178.488 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 97.054 ms, heap usage 225.642 MB -> 109.901 MB.\n====== db-shootout (database) [default], iteration 1 completed (8139.624 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 77.040 ms, heap usage 163.573 MB -> 111.847 MB.\n====== db-shootout (database) [default], iteration 2 completed (7733.762 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 83.562 ms, heap usage 196.819 MB -> 111.010 MB.\n====== db-shootout (database) [default], iteration 3 completed (6815.819 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 64.493 ms, heap usage 378.799 MB -> 112.387 MB.\n====== db-shootout (database) [default], iteration 4 completed (7443.934 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.668 ms, heap usage 258.599 MB -> 112.317 MB.\n====== db-shootout (database) [default], iteration 5 completed (11781.997 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 150.175 ms, heap usage 480.968 MB -> 112.405 MB.\n====== db-shootout (database) [default], iteration 6 completed (8639.666 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 90.800 ms, heap usage 162.455 MB -> 108.554 MB.\n====== db-shootout (database) [default], iteration 7 completed (7947.788 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 249.811 ms, heap usage 301.609 MB -> 109.781 MB.\n====== db-shootout (database) [default], iteration 8 completed (10834.754 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 77.843 ms, heap usage 212.355 MB -> 108.400 MB.\n====== db-shootout (database) [default], iteration 9 completed (9192.447 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 84.474 ms, heap usage 727.798 MB -> 113.932 MB.\n====== db-shootout (database) [default], iteration 10 completed (8215.907 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 81.573 ms, heap usage 490.439 MB -> 112.682 MB.\n====== db-shootout (database) [default], iteration 11 completed (9294.779 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 688.794 ms, heap usage 618.538 MB -> 110.652 MB.\n====== db-shootout (database) [default], iteration 12 completed (10589.094 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 1453.918 ms, heap usage 530.866 MB -> 110.423 MB.\n====== db-shootout (database) [default], iteration 13 completed (9324.678 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 77.820 ms, heap usage 358.356 MB -> 110.437 MB.\n====== db-shootout (database) [default], iteration 14 completed (7049.835 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :40767 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 79.764 ms, heap usage 628.172 MB -> 112.987 MB.\n====== finagle-http (web) [default], iteration 0 completed (16125.319 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 85.284 ms, heap usage 264.326 MB -> 115.853 MB.\n====== finagle-http (web) [default], iteration 1 completed (9563.126 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 100.262 ms, heap usage 178.466 MB -> 115.981 MB.\n====== finagle-http (web) [default], iteration 2 completed (5442.927 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 90.114 ms, heap usage 147.058 MB -> 116.704 MB.\n====== finagle-http (web) [default], iteration 3 completed (3964.873 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 83.538 ms, heap usage 140.228 MB -> 116.062 MB.\n====== finagle-http (web) [default], iteration 4 completed (3482.041 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 86.191 ms, heap usage 138.623 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 5 completed (3358.311 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 72.643 ms, heap usage 137.736 MB -> 115.957 MB.\n====== finagle-http (web) [default], iteration 6 completed (3329.506 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 76.530 ms, heap usage 291.603 MB -> 115.964 MB.\n====== finagle-http (web) [default], iteration 7 completed (3180.565 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 76.005 ms, heap usage 294.614 MB -> 116.091 MB.\n====== finagle-http (web) [default], iteration 8 completed (3322.154 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 73.133 ms, heap usage 309.144 MB -> 116.094 MB.\n====== finagle-http (web) [default], iteration 9 completed (4063.772 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.828 ms, heap usage 306.260 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 10 completed (4190.495 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.150 ms, heap usage 306.602 MB -> 115.953 MB.\n====== finagle-http (web) [default], iteration 11 completed (3988.006 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.622 ms, heap usage 307.366 MB -> 115.960 MB.\n====== finagle-http (web) [default], iteration 12 completed (3860.580 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 90.378 ms, heap usage 305.608 MB -> 115.952 MB.\n====== finagle-http (web) [default], iteration 13 completed (3829.378 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 88.649 ms, heap usage 305.958 MB -> 116.090 MB.\n====== finagle-http (web) [default], iteration 14 completed (3756.430 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 69.771 ms, heap usage 321.007 MB -> 117.166 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16462.593 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 89.655 ms, heap usage 714.025 MB -> 118.261 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12978.946 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 71.674 ms, heap usage 620.447 MB -> 113.634 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (13289.425 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 70.956 ms, heap usage 620.934 MB -> 113.643 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12317.448 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.165 ms, heap usage 628.025 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12099.577 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 91.926 ms, heap usage 641.437 MB -> 113.653 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (11762.808 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 91.532 ms, heap usage 640.911 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12780.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 73.684 ms, heap usage 647.268 MB -> 113.662 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11939.982 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 81.023 ms, heap usage 630.064 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11962.495 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.889 ms, heap usage 641.991 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11865.639 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.469 ms, heap usage 642.252 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11700.590 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 74.819 ms, heap usage 634.476 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12003.590 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 86.586 ms, heap usage 637.097 MB -> 113.667 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11851.069 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 77.749 ms, heap usage 639.661 MB -> 113.661 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11846.810 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 68.273 ms, heap usage 634.862 MB -> 113.666 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (11659.200 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.240 ms, heap usage 223.260 MB -> 126.812 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8359.398 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 193.640 ms, heap usage 238.332 MB -> 159.038 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2252.165 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 123.113 ms, heap usage 475.399 MB -> 159.598 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1579.383 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 92.963 ms, heap usage 438.994 MB -> 159.989 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1401.174 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 87.620 ms, heap usage 470.232 MB -> 160.198 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1327.201 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.082 ms, heap usage 466.302 MB -> 160.409 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1285.131 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 94.458 ms, heap usage 459.694 MB -> 160.487 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1307.092 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 101.470 ms, heap usage 450.330 MB -> 160.683 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1272.034 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 90.283 ms, heap usage 453.780 MB -> 160.831 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1215.064 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.802 ms, heap usage 450.996 MB -> 161.106 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1231.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 101.875 ms, heap usage 466.286 MB -> 161.225 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1267.367 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.689 ms, heap usage 445.291 MB -> 161.359 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1212.737 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.024 ms, heap usage 470.293 MB -> 161.480 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1233.533 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 97.202 ms, heap usage 477.434 MB -> 161.634 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1224.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 97.570 ms, heap usage 455.767 MB -> 161.770 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1249.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 110.194 ms, heap usage 467.137 MB -> 141.959 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 542\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 47\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 27\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 542\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 7\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 7\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 27\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 127.19 op/s (127.19 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2270.567 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.411 ms, heap usage 461.992 MB -> 142.225 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 479\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 542\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 7\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 27\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 312.50 op/s (312.50 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1534.303 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 103.429 ms, heap usage 505.402 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 335\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 38\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 542\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 7\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 27\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 17\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 643.43 op/s (643.43 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.554 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 102.552 ms, heap usage 512.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 366\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 542\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 7\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 20\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 27\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 17\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 798.00 op/s (798.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1335.067 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 110.023 ms, heap usage 514.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 350\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 542\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 7\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 20\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 27\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1098.90 op/s (1098.90 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1246.417 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 105.370 ms, heap usage 515.533 MB -> 142.220 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 345\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 542\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 7\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 27\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1348.31 op/s (1348.31 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1299.472 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 102.936 ms, heap usage 514.417 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 542\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 8\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 20\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 27\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1521.74 op/s (1521.74 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1233.081 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 102.927 ms, heap usage 514.790 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 314\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 542\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 8\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 20\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 27\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 24\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1899.11 op/s (1899.11 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1227.486 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 112.387 ms, heap usage 515.184 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 334\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 542\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 8\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 27\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 24\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2080.92 op/s (2080.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1204.561 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 104.938 ms, heap usage 513.277 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 321\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 542\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 8\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 20\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 27\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 24\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2395.21 op/s (2395.21 op/s including failed)\nElapsed time: 0.33 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1228.785 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 109.005 ms, heap usage 514.527 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 329\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 542\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 8\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 20\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 27\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 24\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2588.24 op/s (2588.24 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1219.735 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 109.314 ms, heap usage 513.998 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 396\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 542\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 8\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 27\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 24\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2341.46 op/s (2341.46 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1310.336 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.556 ms, heap usage 513.533 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 338\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 542\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 8\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 20\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 27\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 24\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2971.43 op/s (2971.43 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1221.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 95.297 ms, heap usage 516.781 MB -> 142.219 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 331\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 542\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 8\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 20\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 27\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 24\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3323.44 op/s (3323.44 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1204.953 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 101.392 ms, heap usage 513.469 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 336\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 542\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 8\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 20\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 27\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 24\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3389.83 op/s (3389.83 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1222.566 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 142.397 ms, heap usage 449.286 MB -> 153.585 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27413.906 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.102 ms, heap usage 485.868 MB -> 429.353 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15208.606 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 120.590 ms, heap usage 750.040 MB -> 429.543 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (14978.574 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 117.090 ms, heap usage 531.569 MB -> 429.685 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15189.159 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.359 ms, heap usage 448.734 MB -> 429.736 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (14534.248 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.133 ms, heap usage 531.585 MB -> 428.861 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14454.292 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 144.980 ms, heap usage 748.013 MB -> 424.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15506.628 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 125.931 ms, heap usage 744.255 MB -> 424.332 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14635.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.965 ms, heap usage 743.985 MB -> 424.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14851.176 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 127.019 ms, heap usage 526.461 MB -> 424.569 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14585.233 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 158.456 ms, heap usage 744.335 MB -> 421.769 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (14514.373 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 113.150 ms, heap usage 433.039 MB -> 421.869 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14488.137 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 152.550 ms, heap usage 492.501 MB -> 421.987 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15544.839 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 126.209 ms, heap usage 741.709 MB -> 422.028 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14873.637 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.078 ms, heap usage 637.867 MB -> 422.091 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14295.178 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 156.311 ms, heap usage 721.605 MB -> 167.517 MB.\n====== als (apache-spark) [default], iteration 0 completed (18473.338 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 237.583 ms, heap usage 490.473 MB -> 193.215 MB.\n====== als (apache-spark) [default], iteration 1 completed (8621.660 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 135.947 ms, heap usage 351.895 MB -> 193.795 MB.\n====== als (apache-spark) [default], iteration 2 completed (8049.485 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.025 ms, heap usage 618.026 MB -> 194.697 MB.\n====== als (apache-spark) [default], iteration 3 completed (8129.205 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 155.068 ms, heap usage 460.812 MB -> 195.244 MB.\n====== als (apache-spark) [default], iteration 4 completed (8240.756 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 205.851 ms, heap usage 326.065 MB -> 195.528 MB.\n====== als (apache-spark) [default], iteration 5 completed (9468.687 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 226.225 ms, heap usage 733.345 MB -> 196.486 MB.\n====== als (apache-spark) [default], iteration 6 completed (9309.410 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 184.231 ms, heap usage 487.781 MB -> 196.681 MB.\n====== als (apache-spark) [default], iteration 7 completed (8001.285 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 173.830 ms, heap usage 505.959 MB -> 197.162 MB.\n====== als (apache-spark) [default], iteration 8 completed (7411.873 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 137.025 ms, heap usage 690.332 MB -> 198.171 MB.\n====== als (apache-spark) [default], iteration 9 completed (7192.411 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 140.481 ms, heap usage 585.415 MB -> 198.215 MB.\n====== als (apache-spark) [default], iteration 10 completed (7561.985 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 140.398 ms, heap usage 492.504 MB -> 198.282 MB.\n====== als (apache-spark) [default], iteration 11 completed (7334.663 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 133.016 ms, heap usage 603.538 MB -> 198.696 MB.\n====== als (apache-spark) [default], iteration 12 completed (7283.065 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 136.910 ms, heap usage 506.800 MB -> 198.997 MB.\n====== als (apache-spark) [default], iteration 13 completed (7547.761 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 298.707 ms, heap usage 495.750 MB -> 198.980 MB.\n====== als (apache-spark) [default], iteration 14 completed (11748.921 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 187.611 ms, heap usage 692.183 MB -> 185.740 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4932.848 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 128.818 ms, heap usage 317.374 MB -> 179.677 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4203.397 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 126.039 ms, heap usage 311.939 MB -> 179.675 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4282.457 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 130.409 ms, heap usage 366.195 MB -> 179.677 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4139.491 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 122.012 ms, heap usage 317.085 MB -> 179.665 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4579.149 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 123.564 ms, heap usage 372.121 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (4618.768 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 125.018 ms, heap usage 462.714 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (4937.971 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 137.300 ms, heap usage 567.562 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4095.594 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 118.409 ms, heap usage 307.369 MB -> 179.667 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (4047.537 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 116.988 ms, heap usage 303.117 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4029.317 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.553 ms, heap usage 279.661 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4006.681 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 112.397 ms, heap usage 279.117 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4330.704 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 116.739 ms, heap usage 313.116 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3769.735 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 111.424 ms, heap usage 307.166 MB -> 179.672 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3639.238 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 114.887 ms, heap usage 314.046 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3494.136 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 208.743 ms, heap usage 359.545 MB -> 201.959 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (301.041 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.992 ms, heap usage 229.959 MB -> 201.995 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (191.693 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 125.615 ms, heap usage 231.993 MB -> 202.003 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (192.253 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 133.266 ms, heap usage 231.990 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (175.154 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 124.824 ms, heap usage 231.993 MB -> 201.998 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (174.247 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 128.714 ms, heap usage 231.990 MB -> 201.995 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (181.024 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 128.089 ms, heap usage 231.990 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (181.233 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 120.693 ms, heap usage 231.993 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (190.030 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 124.157 ms, heap usage 231.991 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (186.131 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 118.065 ms, heap usage 231.990 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (166.078 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 128.042 ms, heap usage 231.991 MB -> 201.996 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (177.734 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 120.100 ms, heap usage 231.991 MB -> 201.992 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (177.714 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 121.825 ms, heap usage 231.994 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (163.342 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 120.932 ms, heap usage 231.992 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (171.678 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 125.264 ms, heap usage 231.992 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (179.927 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 163.526 ms, heap usage 233.492 MB -> 180.993 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1912.599 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 121.020 ms, heap usage 539.493 MB -> 180.920 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1200.147 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 128.035 ms, heap usage 398.871 MB -> 180.918 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (975.329 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 134.919 ms, heap usage 373.131 MB -> 180.913 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1001.157 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 142.035 ms, heap usage 303.533 MB -> 180.913 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1045.017 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 131.471 ms, heap usage 302.342 MB -> 180.916 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1064.155 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 127.636 ms, heap usage 430.420 MB -> 180.923 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (1156.742 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 124.204 ms, heap usage 443.829 MB -> 180.918 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1042.461 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 127.901 ms, heap usage 292.327 MB -> 180.913 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1138.461 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.300 ms, heap usage 375.619 MB -> 180.919 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1001.812 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 124.244 ms, heap usage 413.109 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (975.564 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 131.008 ms, heap usage 403.106 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (1052.043 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 138.411 ms, heap usage 287.078 MB -> 180.917 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1046.527 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 115.852 ms, heap usage 355.604 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1114.317 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 120.500 ms, heap usage 425.101 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (985.261 ms) ======\n"
    },
    "log-regression": {
        "times": [
            7997.144,
            1653.796,
            1404.405,
            1448.247,
            1741.064,
            1311.719,
            1244.456,
            1102.283,
            1100.886,
            1140.53,
            1085.252,
            1072.477,
            1094.953,
            1031.185,
            1040.665
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 57.024 ms, heap usage 111.776 MB -> 64.309 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3604.161 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 138.331 ms, heap usage 497.256 MB -> 210.379 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1206.039 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.180 ms, heap usage 342.662 MB -> 210.448 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (802.005 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.097 ms, heap usage 228.745 MB -> 210.498 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (890.021 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 118.591 ms, heap usage 227.856 MB -> 210.547 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (756.979 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 131.581 ms, heap usage 227.959 MB -> 210.595 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (768.275 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.534 ms, heap usage 227.892 MB -> 210.642 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (832.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.913 ms, heap usage 234.703 MB -> 210.693 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (824.732 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.609 ms, heap usage 228.480 MB -> 210.788 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (858.442 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 118.947 ms, heap usage 226.559 MB -> 210.837 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (851.310 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 216.735 MB -> 210.865 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1073.187 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.850 ms, heap usage 215.881 MB -> 210.904 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (968.823 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.393 ms, heap usage 437.051 MB -> 210.986 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (871.115 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.423 ms, heap usage 445.626 MB -> 211.024 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (828.153 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 132.380 ms, heap usage 445.115 MB -> 211.059 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (786.784 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 116.387 ms, heap usage 316.060 MB -> 147.470 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5546.650 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 111.086 ms, heap usage 296.868 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5178.673 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 104.222 ms, heap usage 248.316 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5323.796 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.356 ms, heap usage 384.850 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5470.135 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 118.199 ms, heap usage 301.234 MB -> 147.423 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5281.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 119.291 ms, heap usage 423.626 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5257.988 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 117.705 ms, heap usage 223.339 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5357.991 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 110.036 ms, heap usage 389.213 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5478.297 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 121.025 ms, heap usage 345.195 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5249.333 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.886 ms, heap usage 269.229 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5127.839 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.849 ms, heap usage 244.809 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5823.739 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 146.697 ms, heap usage 175.499 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5724.478 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 142.389 ms, heap usage 472.226 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6334.825 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 133.763 ms, heap usage 251.181 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5658.329 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 131.517 ms, heap usage 402.200 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6717.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 89.399 ms, heap usage 171.725 MB -> 98.329 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (658.405 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 119.710 ms, heap usage 252.329 MB -> 98.918 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (317.820 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 86.808 ms, heap usage 240.918 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (234.506 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.869 ms, heap usage 239.916 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (221.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 128.459 ms, heap usage 239.439 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (201.599 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.146 ms, heap usage 238.904 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (224.815 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 89.459 ms, heap usage 241.155 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (222.268 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 97.592 ms, heap usage 240.317 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (162.776 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 82.902 ms, heap usage 240.211 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (173.289 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 82.188 ms, heap usage 240.244 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (192.864 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 87.035 ms, heap usage 240.731 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (129.190 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 78.267 ms, heap usage 240.872 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (161.823 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 87.999 ms, heap usage 240.251 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (209.179 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.076 ms, heap usage 240.753 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (189.248 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 79.462 ms, heap usage 240.758 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (155.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 85.249 ms, heap usage 209.534 MB -> 101.361 MB.\n====== db-shootout (database) [default], iteration 0 completed (8178.488 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 97.054 ms, heap usage 225.642 MB -> 109.901 MB.\n====== db-shootout (database) [default], iteration 1 completed (8139.624 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 77.040 ms, heap usage 163.573 MB -> 111.847 MB.\n====== db-shootout (database) [default], iteration 2 completed (7733.762 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 83.562 ms, heap usage 196.819 MB -> 111.010 MB.\n====== db-shootout (database) [default], iteration 3 completed (6815.819 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 64.493 ms, heap usage 378.799 MB -> 112.387 MB.\n====== db-shootout (database) [default], iteration 4 completed (7443.934 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.668 ms, heap usage 258.599 MB -> 112.317 MB.\n====== db-shootout (database) [default], iteration 5 completed (11781.997 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 150.175 ms, heap usage 480.968 MB -> 112.405 MB.\n====== db-shootout (database) [default], iteration 6 completed (8639.666 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 90.800 ms, heap usage 162.455 MB -> 108.554 MB.\n====== db-shootout (database) [default], iteration 7 completed (7947.788 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 249.811 ms, heap usage 301.609 MB -> 109.781 MB.\n====== db-shootout (database) [default], iteration 8 completed (10834.754 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 77.843 ms, heap usage 212.355 MB -> 108.400 MB.\n====== db-shootout (database) [default], iteration 9 completed (9192.447 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 84.474 ms, heap usage 727.798 MB -> 113.932 MB.\n====== db-shootout (database) [default], iteration 10 completed (8215.907 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 81.573 ms, heap usage 490.439 MB -> 112.682 MB.\n====== db-shootout (database) [default], iteration 11 completed (9294.779 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 688.794 ms, heap usage 618.538 MB -> 110.652 MB.\n====== db-shootout (database) [default], iteration 12 completed (10589.094 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 1453.918 ms, heap usage 530.866 MB -> 110.423 MB.\n====== db-shootout (database) [default], iteration 13 completed (9324.678 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 77.820 ms, heap usage 358.356 MB -> 110.437 MB.\n====== db-shootout (database) [default], iteration 14 completed (7049.835 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :40767 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 79.764 ms, heap usage 628.172 MB -> 112.987 MB.\n====== finagle-http (web) [default], iteration 0 completed (16125.319 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 85.284 ms, heap usage 264.326 MB -> 115.853 MB.\n====== finagle-http (web) [default], iteration 1 completed (9563.126 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 100.262 ms, heap usage 178.466 MB -> 115.981 MB.\n====== finagle-http (web) [default], iteration 2 completed (5442.927 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 90.114 ms, heap usage 147.058 MB -> 116.704 MB.\n====== finagle-http (web) [default], iteration 3 completed (3964.873 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 83.538 ms, heap usage 140.228 MB -> 116.062 MB.\n====== finagle-http (web) [default], iteration 4 completed (3482.041 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 86.191 ms, heap usage 138.623 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 5 completed (3358.311 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 72.643 ms, heap usage 137.736 MB -> 115.957 MB.\n====== finagle-http (web) [default], iteration 6 completed (3329.506 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 76.530 ms, heap usage 291.603 MB -> 115.964 MB.\n====== finagle-http (web) [default], iteration 7 completed (3180.565 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 76.005 ms, heap usage 294.614 MB -> 116.091 MB.\n====== finagle-http (web) [default], iteration 8 completed (3322.154 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 73.133 ms, heap usage 309.144 MB -> 116.094 MB.\n====== finagle-http (web) [default], iteration 9 completed (4063.772 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.828 ms, heap usage 306.260 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 10 completed (4190.495 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.150 ms, heap usage 306.602 MB -> 115.953 MB.\n====== finagle-http (web) [default], iteration 11 completed (3988.006 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.622 ms, heap usage 307.366 MB -> 115.960 MB.\n====== finagle-http (web) [default], iteration 12 completed (3860.580 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 90.378 ms, heap usage 305.608 MB -> 115.952 MB.\n====== finagle-http (web) [default], iteration 13 completed (3829.378 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 88.649 ms, heap usage 305.958 MB -> 116.090 MB.\n====== finagle-http (web) [default], iteration 14 completed (3756.430 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 69.771 ms, heap usage 321.007 MB -> 117.166 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16462.593 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 89.655 ms, heap usage 714.025 MB -> 118.261 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12978.946 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 71.674 ms, heap usage 620.447 MB -> 113.634 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (13289.425 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 70.956 ms, heap usage 620.934 MB -> 113.643 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12317.448 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.165 ms, heap usage 628.025 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12099.577 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 91.926 ms, heap usage 641.437 MB -> 113.653 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (11762.808 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 91.532 ms, heap usage 640.911 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12780.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 73.684 ms, heap usage 647.268 MB -> 113.662 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11939.982 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 81.023 ms, heap usage 630.064 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11962.495 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.889 ms, heap usage 641.991 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11865.639 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.469 ms, heap usage 642.252 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11700.590 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 74.819 ms, heap usage 634.476 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12003.590 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 86.586 ms, heap usage 637.097 MB -> 113.667 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11851.069 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 77.749 ms, heap usage 639.661 MB -> 113.661 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11846.810 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 68.273 ms, heap usage 634.862 MB -> 113.666 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (11659.200 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.240 ms, heap usage 223.260 MB -> 126.812 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8359.398 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 193.640 ms, heap usage 238.332 MB -> 159.038 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2252.165 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 123.113 ms, heap usage 475.399 MB -> 159.598 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1579.383 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 92.963 ms, heap usage 438.994 MB -> 159.989 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1401.174 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 87.620 ms, heap usage 470.232 MB -> 160.198 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1327.201 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.082 ms, heap usage 466.302 MB -> 160.409 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1285.131 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 94.458 ms, heap usage 459.694 MB -> 160.487 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1307.092 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 101.470 ms, heap usage 450.330 MB -> 160.683 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1272.034 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 90.283 ms, heap usage 453.780 MB -> 160.831 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1215.064 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.802 ms, heap usage 450.996 MB -> 161.106 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1231.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 101.875 ms, heap usage 466.286 MB -> 161.225 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1267.367 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.689 ms, heap usage 445.291 MB -> 161.359 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1212.737 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.024 ms, heap usage 470.293 MB -> 161.480 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1233.533 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 97.202 ms, heap usage 477.434 MB -> 161.634 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1224.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 97.570 ms, heap usage 455.767 MB -> 161.770 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1249.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 110.194 ms, heap usage 467.137 MB -> 141.959 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 542\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 47\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 27\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 542\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 7\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 7\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 27\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 127.19 op/s (127.19 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2270.567 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.411 ms, heap usage 461.992 MB -> 142.225 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 479\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 542\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 7\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 27\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 312.50 op/s (312.50 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1534.303 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 103.429 ms, heap usage 505.402 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 335\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 38\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 542\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 7\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 27\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 17\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 643.43 op/s (643.43 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.554 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 102.552 ms, heap usage 512.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 366\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 542\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 7\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 20\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 27\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 17\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 798.00 op/s (798.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1335.067 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 110.023 ms, heap usage 514.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 350\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 542\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 7\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 20\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 27\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1098.90 op/s (1098.90 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1246.417 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 105.370 ms, heap usage 515.533 MB -> 142.220 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 345\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 542\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 7\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 27\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1348.31 op/s (1348.31 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1299.472 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 102.936 ms, heap usage 514.417 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 542\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 8\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 20\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 27\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1521.74 op/s (1521.74 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1233.081 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 102.927 ms, heap usage 514.790 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 314\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 542\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 8\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 20\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 27\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 24\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1899.11 op/s (1899.11 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1227.486 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 112.387 ms, heap usage 515.184 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 334\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 542\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 8\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 27\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 24\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2080.92 op/s (2080.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1204.561 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 104.938 ms, heap usage 513.277 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 321\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 542\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 8\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 20\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 27\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 24\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2395.21 op/s (2395.21 op/s including failed)\nElapsed time: 0.33 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1228.785 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 109.005 ms, heap usage 514.527 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 329\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 542\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 8\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 20\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 27\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 24\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2588.24 op/s (2588.24 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1219.735 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 109.314 ms, heap usage 513.998 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 396\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 542\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 8\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 27\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 24\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2341.46 op/s (2341.46 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1310.336 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.556 ms, heap usage 513.533 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 338\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 542\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 8\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 20\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 27\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 24\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2971.43 op/s (2971.43 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1221.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 95.297 ms, heap usage 516.781 MB -> 142.219 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 331\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 542\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 8\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 20\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 27\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 24\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3323.44 op/s (3323.44 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1204.953 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 101.392 ms, heap usage 513.469 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 336\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 542\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 8\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 20\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 27\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 24\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3389.83 op/s (3389.83 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1222.566 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 142.397 ms, heap usage 449.286 MB -> 153.585 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27413.906 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.102 ms, heap usage 485.868 MB -> 429.353 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15208.606 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 120.590 ms, heap usage 750.040 MB -> 429.543 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (14978.574 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 117.090 ms, heap usage 531.569 MB -> 429.685 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15189.159 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.359 ms, heap usage 448.734 MB -> 429.736 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (14534.248 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.133 ms, heap usage 531.585 MB -> 428.861 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14454.292 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 144.980 ms, heap usage 748.013 MB -> 424.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15506.628 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 125.931 ms, heap usage 744.255 MB -> 424.332 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14635.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.965 ms, heap usage 743.985 MB -> 424.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14851.176 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 127.019 ms, heap usage 526.461 MB -> 424.569 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14585.233 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 158.456 ms, heap usage 744.335 MB -> 421.769 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (14514.373 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 113.150 ms, heap usage 433.039 MB -> 421.869 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14488.137 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 152.550 ms, heap usage 492.501 MB -> 421.987 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15544.839 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 126.209 ms, heap usage 741.709 MB -> 422.028 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14873.637 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.078 ms, heap usage 637.867 MB -> 422.091 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14295.178 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 156.311 ms, heap usage 721.605 MB -> 167.517 MB.\n====== als (apache-spark) [default], iteration 0 completed (18473.338 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 237.583 ms, heap usage 490.473 MB -> 193.215 MB.\n====== als (apache-spark) [default], iteration 1 completed (8621.660 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 135.947 ms, heap usage 351.895 MB -> 193.795 MB.\n====== als (apache-spark) [default], iteration 2 completed (8049.485 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.025 ms, heap usage 618.026 MB -> 194.697 MB.\n====== als (apache-spark) [default], iteration 3 completed (8129.205 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 155.068 ms, heap usage 460.812 MB -> 195.244 MB.\n====== als (apache-spark) [default], iteration 4 completed (8240.756 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 205.851 ms, heap usage 326.065 MB -> 195.528 MB.\n====== als (apache-spark) [default], iteration 5 completed (9468.687 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 226.225 ms, heap usage 733.345 MB -> 196.486 MB.\n====== als (apache-spark) [default], iteration 6 completed (9309.410 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 184.231 ms, heap usage 487.781 MB -> 196.681 MB.\n====== als (apache-spark) [default], iteration 7 completed (8001.285 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 173.830 ms, heap usage 505.959 MB -> 197.162 MB.\n====== als (apache-spark) [default], iteration 8 completed (7411.873 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 137.025 ms, heap usage 690.332 MB -> 198.171 MB.\n====== als (apache-spark) [default], iteration 9 completed (7192.411 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 140.481 ms, heap usage 585.415 MB -> 198.215 MB.\n====== als (apache-spark) [default], iteration 10 completed (7561.985 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 140.398 ms, heap usage 492.504 MB -> 198.282 MB.\n====== als (apache-spark) [default], iteration 11 completed (7334.663 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 133.016 ms, heap usage 603.538 MB -> 198.696 MB.\n====== als (apache-spark) [default], iteration 12 completed (7283.065 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 136.910 ms, heap usage 506.800 MB -> 198.997 MB.\n====== als (apache-spark) [default], iteration 13 completed (7547.761 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 298.707 ms, heap usage 495.750 MB -> 198.980 MB.\n====== als (apache-spark) [default], iteration 14 completed (11748.921 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 187.611 ms, heap usage 692.183 MB -> 185.740 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4932.848 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 128.818 ms, heap usage 317.374 MB -> 179.677 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4203.397 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 126.039 ms, heap usage 311.939 MB -> 179.675 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4282.457 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 130.409 ms, heap usage 366.195 MB -> 179.677 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4139.491 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 122.012 ms, heap usage 317.085 MB -> 179.665 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4579.149 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 123.564 ms, heap usage 372.121 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (4618.768 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 125.018 ms, heap usage 462.714 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (4937.971 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 137.300 ms, heap usage 567.562 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4095.594 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 118.409 ms, heap usage 307.369 MB -> 179.667 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (4047.537 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 116.988 ms, heap usage 303.117 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4029.317 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.553 ms, heap usage 279.661 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4006.681 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 112.397 ms, heap usage 279.117 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4330.704 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 116.739 ms, heap usage 313.116 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3769.735 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 111.424 ms, heap usage 307.166 MB -> 179.672 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3639.238 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 114.887 ms, heap usage 314.046 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3494.136 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 208.743 ms, heap usage 359.545 MB -> 201.959 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (301.041 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.992 ms, heap usage 229.959 MB -> 201.995 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (191.693 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 125.615 ms, heap usage 231.993 MB -> 202.003 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (192.253 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 133.266 ms, heap usage 231.990 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (175.154 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 124.824 ms, heap usage 231.993 MB -> 201.998 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (174.247 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 128.714 ms, heap usage 231.990 MB -> 201.995 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (181.024 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 128.089 ms, heap usage 231.990 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (181.233 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 120.693 ms, heap usage 231.993 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (190.030 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 124.157 ms, heap usage 231.991 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (186.131 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 118.065 ms, heap usage 231.990 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (166.078 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 128.042 ms, heap usage 231.991 MB -> 201.996 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (177.734 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 120.100 ms, heap usage 231.991 MB -> 201.992 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (177.714 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 121.825 ms, heap usage 231.994 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (163.342 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 120.932 ms, heap usage 231.992 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (171.678 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 125.264 ms, heap usage 231.992 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (179.927 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 163.526 ms, heap usage 233.492 MB -> 180.993 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1912.599 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 121.020 ms, heap usage 539.493 MB -> 180.920 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1200.147 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 128.035 ms, heap usage 398.871 MB -> 180.918 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (975.329 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 134.919 ms, heap usage 373.131 MB -> 180.913 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1001.157 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 142.035 ms, heap usage 303.533 MB -> 180.913 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1045.017 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 131.471 ms, heap usage 302.342 MB -> 180.916 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1064.155 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 127.636 ms, heap usage 430.420 MB -> 180.923 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (1156.742 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 124.204 ms, heap usage 443.829 MB -> 180.918 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1042.461 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 127.901 ms, heap usage 292.327 MB -> 180.913 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1138.461 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.300 ms, heap usage 375.619 MB -> 180.919 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1001.812 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 124.244 ms, heap usage 413.109 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (975.564 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 131.008 ms, heap usage 403.106 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (1052.043 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 138.411 ms, heap usage 287.078 MB -> 180.917 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1046.527 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 115.852 ms, heap usage 355.604 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1114.317 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 120.500 ms, heap usage 425.101 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (985.261 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 139.645 ms, heap usage 327.207 MB -> 192.967 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (7997.144 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.137 ms, heap usage 811.609 MB -> 275.886 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1653.796 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 174.700 ms, heap usage 697.292 MB -> 276.623 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1404.405 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.037 ms, heap usage 534.220 MB -> 276.644 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1448.247 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 212.057 ms, heap usage 640.304 MB -> 277.299 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1741.064 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 140.268 ms, heap usage 559.873 MB -> 277.347 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1311.719 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 181.272 ms, heap usage 547.998 MB -> 277.444 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1244.456 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 190.645 ms, heap usage 559.082 MB -> 277.655 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1102.283 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.155 ms, heap usage 536.533 MB -> 277.682 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1100.886 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 139.593 ms, heap usage 584.876 MB -> 278.103 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1140.530 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 159.565 ms, heap usage 647.475 MB -> 278.602 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1085.252 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 130.790 ms, heap usage 587.620 MB -> 278.545 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1072.477 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 130.353 ms, heap usage 526.097 MB -> 278.507 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1094.953 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.059 ms, heap usage 626.931 MB -> 278.998 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1031.185 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 143.861 ms, heap usage 539.073 MB -> 279.049 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1040.665 ms) ======\n"
    },
    "gauss-mix": {
        "times": [
            15425.325,
            11221.525,
            10809.864,
            11023.91,
            10198.733,
            10636.603,
            10561.507,
            10469.706,
            10176.142,
            10254.648,
            10499.339,
            10348.095,
            10110.887,
            10376.669,
            11054.46
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 57.024 ms, heap usage 111.776 MB -> 64.309 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3604.161 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 138.331 ms, heap usage 497.256 MB -> 210.379 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1206.039 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.180 ms, heap usage 342.662 MB -> 210.448 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (802.005 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.097 ms, heap usage 228.745 MB -> 210.498 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (890.021 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 118.591 ms, heap usage 227.856 MB -> 210.547 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (756.979 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 131.581 ms, heap usage 227.959 MB -> 210.595 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (768.275 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.534 ms, heap usage 227.892 MB -> 210.642 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (832.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.913 ms, heap usage 234.703 MB -> 210.693 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (824.732 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.609 ms, heap usage 228.480 MB -> 210.788 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (858.442 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 118.947 ms, heap usage 226.559 MB -> 210.837 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (851.310 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 216.735 MB -> 210.865 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1073.187 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.850 ms, heap usage 215.881 MB -> 210.904 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (968.823 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.393 ms, heap usage 437.051 MB -> 210.986 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (871.115 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.423 ms, heap usage 445.626 MB -> 211.024 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (828.153 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 132.380 ms, heap usage 445.115 MB -> 211.059 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (786.784 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 116.387 ms, heap usage 316.060 MB -> 147.470 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5546.650 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 111.086 ms, heap usage 296.868 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5178.673 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 104.222 ms, heap usage 248.316 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5323.796 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.356 ms, heap usage 384.850 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5470.135 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 118.199 ms, heap usage 301.234 MB -> 147.423 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5281.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 119.291 ms, heap usage 423.626 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5257.988 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 117.705 ms, heap usage 223.339 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5357.991 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 110.036 ms, heap usage 389.213 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5478.297 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 121.025 ms, heap usage 345.195 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5249.333 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.886 ms, heap usage 269.229 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5127.839 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.849 ms, heap usage 244.809 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5823.739 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 146.697 ms, heap usage 175.499 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5724.478 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 142.389 ms, heap usage 472.226 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6334.825 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 133.763 ms, heap usage 251.181 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5658.329 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 131.517 ms, heap usage 402.200 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6717.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 89.399 ms, heap usage 171.725 MB -> 98.329 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (658.405 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 119.710 ms, heap usage 252.329 MB -> 98.918 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (317.820 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 86.808 ms, heap usage 240.918 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (234.506 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.869 ms, heap usage 239.916 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (221.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 128.459 ms, heap usage 239.439 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (201.599 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.146 ms, heap usage 238.904 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (224.815 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 89.459 ms, heap usage 241.155 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (222.268 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 97.592 ms, heap usage 240.317 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (162.776 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 82.902 ms, heap usage 240.211 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (173.289 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 82.188 ms, heap usage 240.244 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (192.864 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 87.035 ms, heap usage 240.731 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (129.190 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 78.267 ms, heap usage 240.872 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (161.823 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 87.999 ms, heap usage 240.251 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (209.179 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.076 ms, heap usage 240.753 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (189.248 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 79.462 ms, heap usage 240.758 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (155.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 85.249 ms, heap usage 209.534 MB -> 101.361 MB.\n====== db-shootout (database) [default], iteration 0 completed (8178.488 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 97.054 ms, heap usage 225.642 MB -> 109.901 MB.\n====== db-shootout (database) [default], iteration 1 completed (8139.624 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 77.040 ms, heap usage 163.573 MB -> 111.847 MB.\n====== db-shootout (database) [default], iteration 2 completed (7733.762 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 83.562 ms, heap usage 196.819 MB -> 111.010 MB.\n====== db-shootout (database) [default], iteration 3 completed (6815.819 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 64.493 ms, heap usage 378.799 MB -> 112.387 MB.\n====== db-shootout (database) [default], iteration 4 completed (7443.934 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.668 ms, heap usage 258.599 MB -> 112.317 MB.\n====== db-shootout (database) [default], iteration 5 completed (11781.997 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 150.175 ms, heap usage 480.968 MB -> 112.405 MB.\n====== db-shootout (database) [default], iteration 6 completed (8639.666 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 90.800 ms, heap usage 162.455 MB -> 108.554 MB.\n====== db-shootout (database) [default], iteration 7 completed (7947.788 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 249.811 ms, heap usage 301.609 MB -> 109.781 MB.\n====== db-shootout (database) [default], iteration 8 completed (10834.754 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 77.843 ms, heap usage 212.355 MB -> 108.400 MB.\n====== db-shootout (database) [default], iteration 9 completed (9192.447 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 84.474 ms, heap usage 727.798 MB -> 113.932 MB.\n====== db-shootout (database) [default], iteration 10 completed (8215.907 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 81.573 ms, heap usage 490.439 MB -> 112.682 MB.\n====== db-shootout (database) [default], iteration 11 completed (9294.779 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 688.794 ms, heap usage 618.538 MB -> 110.652 MB.\n====== db-shootout (database) [default], iteration 12 completed (10589.094 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 1453.918 ms, heap usage 530.866 MB -> 110.423 MB.\n====== db-shootout (database) [default], iteration 13 completed (9324.678 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 77.820 ms, heap usage 358.356 MB -> 110.437 MB.\n====== db-shootout (database) [default], iteration 14 completed (7049.835 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :40767 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 79.764 ms, heap usage 628.172 MB -> 112.987 MB.\n====== finagle-http (web) [default], iteration 0 completed (16125.319 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 85.284 ms, heap usage 264.326 MB -> 115.853 MB.\n====== finagle-http (web) [default], iteration 1 completed (9563.126 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 100.262 ms, heap usage 178.466 MB -> 115.981 MB.\n====== finagle-http (web) [default], iteration 2 completed (5442.927 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 90.114 ms, heap usage 147.058 MB -> 116.704 MB.\n====== finagle-http (web) [default], iteration 3 completed (3964.873 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 83.538 ms, heap usage 140.228 MB -> 116.062 MB.\n====== finagle-http (web) [default], iteration 4 completed (3482.041 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 86.191 ms, heap usage 138.623 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 5 completed (3358.311 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 72.643 ms, heap usage 137.736 MB -> 115.957 MB.\n====== finagle-http (web) [default], iteration 6 completed (3329.506 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 76.530 ms, heap usage 291.603 MB -> 115.964 MB.\n====== finagle-http (web) [default], iteration 7 completed (3180.565 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 76.005 ms, heap usage 294.614 MB -> 116.091 MB.\n====== finagle-http (web) [default], iteration 8 completed (3322.154 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 73.133 ms, heap usage 309.144 MB -> 116.094 MB.\n====== finagle-http (web) [default], iteration 9 completed (4063.772 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.828 ms, heap usage 306.260 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 10 completed (4190.495 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.150 ms, heap usage 306.602 MB -> 115.953 MB.\n====== finagle-http (web) [default], iteration 11 completed (3988.006 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.622 ms, heap usage 307.366 MB -> 115.960 MB.\n====== finagle-http (web) [default], iteration 12 completed (3860.580 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 90.378 ms, heap usage 305.608 MB -> 115.952 MB.\n====== finagle-http (web) [default], iteration 13 completed (3829.378 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 88.649 ms, heap usage 305.958 MB -> 116.090 MB.\n====== finagle-http (web) [default], iteration 14 completed (3756.430 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 69.771 ms, heap usage 321.007 MB -> 117.166 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16462.593 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 89.655 ms, heap usage 714.025 MB -> 118.261 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12978.946 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 71.674 ms, heap usage 620.447 MB -> 113.634 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (13289.425 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 70.956 ms, heap usage 620.934 MB -> 113.643 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12317.448 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.165 ms, heap usage 628.025 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12099.577 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 91.926 ms, heap usage 641.437 MB -> 113.653 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (11762.808 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 91.532 ms, heap usage 640.911 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12780.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 73.684 ms, heap usage 647.268 MB -> 113.662 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11939.982 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 81.023 ms, heap usage 630.064 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11962.495 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.889 ms, heap usage 641.991 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11865.639 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.469 ms, heap usage 642.252 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11700.590 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 74.819 ms, heap usage 634.476 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12003.590 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 86.586 ms, heap usage 637.097 MB -> 113.667 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11851.069 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 77.749 ms, heap usage 639.661 MB -> 113.661 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11846.810 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 68.273 ms, heap usage 634.862 MB -> 113.666 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (11659.200 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.240 ms, heap usage 223.260 MB -> 126.812 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8359.398 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 193.640 ms, heap usage 238.332 MB -> 159.038 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2252.165 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 123.113 ms, heap usage 475.399 MB -> 159.598 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1579.383 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 92.963 ms, heap usage 438.994 MB -> 159.989 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1401.174 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 87.620 ms, heap usage 470.232 MB -> 160.198 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1327.201 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.082 ms, heap usage 466.302 MB -> 160.409 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1285.131 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 94.458 ms, heap usage 459.694 MB -> 160.487 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1307.092 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 101.470 ms, heap usage 450.330 MB -> 160.683 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1272.034 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 90.283 ms, heap usage 453.780 MB -> 160.831 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1215.064 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.802 ms, heap usage 450.996 MB -> 161.106 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1231.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 101.875 ms, heap usage 466.286 MB -> 161.225 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1267.367 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.689 ms, heap usage 445.291 MB -> 161.359 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1212.737 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.024 ms, heap usage 470.293 MB -> 161.480 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1233.533 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 97.202 ms, heap usage 477.434 MB -> 161.634 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1224.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 97.570 ms, heap usage 455.767 MB -> 161.770 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1249.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 110.194 ms, heap usage 467.137 MB -> 141.959 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 542\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 47\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 27\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 542\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 7\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 7\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 27\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 127.19 op/s (127.19 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2270.567 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.411 ms, heap usage 461.992 MB -> 142.225 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 479\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 542\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 7\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 27\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 312.50 op/s (312.50 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1534.303 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 103.429 ms, heap usage 505.402 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 335\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 38\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 542\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 7\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 27\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 17\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 643.43 op/s (643.43 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.554 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 102.552 ms, heap usage 512.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 366\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 542\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 7\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 20\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 27\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 17\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 798.00 op/s (798.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1335.067 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 110.023 ms, heap usage 514.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 350\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 542\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 7\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 20\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 27\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1098.90 op/s (1098.90 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1246.417 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 105.370 ms, heap usage 515.533 MB -> 142.220 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 345\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 542\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 7\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 27\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1348.31 op/s (1348.31 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1299.472 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 102.936 ms, heap usage 514.417 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 542\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 8\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 20\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 27\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1521.74 op/s (1521.74 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1233.081 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 102.927 ms, heap usage 514.790 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 314\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 542\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 8\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 20\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 27\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 24\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1899.11 op/s (1899.11 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1227.486 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 112.387 ms, heap usage 515.184 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 334\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 542\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 8\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 27\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 24\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2080.92 op/s (2080.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1204.561 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 104.938 ms, heap usage 513.277 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 321\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 542\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 8\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 20\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 27\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 24\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2395.21 op/s (2395.21 op/s including failed)\nElapsed time: 0.33 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1228.785 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 109.005 ms, heap usage 514.527 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 329\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 542\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 8\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 20\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 27\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 24\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2588.24 op/s (2588.24 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1219.735 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 109.314 ms, heap usage 513.998 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 396\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 542\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 8\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 27\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 24\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2341.46 op/s (2341.46 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1310.336 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.556 ms, heap usage 513.533 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 338\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 542\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 8\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 20\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 27\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 24\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2971.43 op/s (2971.43 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1221.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 95.297 ms, heap usage 516.781 MB -> 142.219 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 331\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 542\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 8\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 20\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 27\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 24\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3323.44 op/s (3323.44 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1204.953 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 101.392 ms, heap usage 513.469 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 336\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 542\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 8\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 20\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 27\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 24\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3389.83 op/s (3389.83 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1222.566 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 142.397 ms, heap usage 449.286 MB -> 153.585 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27413.906 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.102 ms, heap usage 485.868 MB -> 429.353 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15208.606 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 120.590 ms, heap usage 750.040 MB -> 429.543 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (14978.574 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 117.090 ms, heap usage 531.569 MB -> 429.685 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15189.159 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.359 ms, heap usage 448.734 MB -> 429.736 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (14534.248 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.133 ms, heap usage 531.585 MB -> 428.861 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14454.292 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 144.980 ms, heap usage 748.013 MB -> 424.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15506.628 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 125.931 ms, heap usage 744.255 MB -> 424.332 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14635.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.965 ms, heap usage 743.985 MB -> 424.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14851.176 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 127.019 ms, heap usage 526.461 MB -> 424.569 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14585.233 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 158.456 ms, heap usage 744.335 MB -> 421.769 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (14514.373 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 113.150 ms, heap usage 433.039 MB -> 421.869 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14488.137 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 152.550 ms, heap usage 492.501 MB -> 421.987 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15544.839 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 126.209 ms, heap usage 741.709 MB -> 422.028 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14873.637 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.078 ms, heap usage 637.867 MB -> 422.091 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14295.178 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 156.311 ms, heap usage 721.605 MB -> 167.517 MB.\n====== als (apache-spark) [default], iteration 0 completed (18473.338 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 237.583 ms, heap usage 490.473 MB -> 193.215 MB.\n====== als (apache-spark) [default], iteration 1 completed (8621.660 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 135.947 ms, heap usage 351.895 MB -> 193.795 MB.\n====== als (apache-spark) [default], iteration 2 completed (8049.485 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.025 ms, heap usage 618.026 MB -> 194.697 MB.\n====== als (apache-spark) [default], iteration 3 completed (8129.205 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 155.068 ms, heap usage 460.812 MB -> 195.244 MB.\n====== als (apache-spark) [default], iteration 4 completed (8240.756 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 205.851 ms, heap usage 326.065 MB -> 195.528 MB.\n====== als (apache-spark) [default], iteration 5 completed (9468.687 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 226.225 ms, heap usage 733.345 MB -> 196.486 MB.\n====== als (apache-spark) [default], iteration 6 completed (9309.410 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 184.231 ms, heap usage 487.781 MB -> 196.681 MB.\n====== als (apache-spark) [default], iteration 7 completed (8001.285 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 173.830 ms, heap usage 505.959 MB -> 197.162 MB.\n====== als (apache-spark) [default], iteration 8 completed (7411.873 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 137.025 ms, heap usage 690.332 MB -> 198.171 MB.\n====== als (apache-spark) [default], iteration 9 completed (7192.411 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 140.481 ms, heap usage 585.415 MB -> 198.215 MB.\n====== als (apache-spark) [default], iteration 10 completed (7561.985 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 140.398 ms, heap usage 492.504 MB -> 198.282 MB.\n====== als (apache-spark) [default], iteration 11 completed (7334.663 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 133.016 ms, heap usage 603.538 MB -> 198.696 MB.\n====== als (apache-spark) [default], iteration 12 completed (7283.065 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 136.910 ms, heap usage 506.800 MB -> 198.997 MB.\n====== als (apache-spark) [default], iteration 13 completed (7547.761 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 298.707 ms, heap usage 495.750 MB -> 198.980 MB.\n====== als (apache-spark) [default], iteration 14 completed (11748.921 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 187.611 ms, heap usage 692.183 MB -> 185.740 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4932.848 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 128.818 ms, heap usage 317.374 MB -> 179.677 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4203.397 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 126.039 ms, heap usage 311.939 MB -> 179.675 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4282.457 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 130.409 ms, heap usage 366.195 MB -> 179.677 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4139.491 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 122.012 ms, heap usage 317.085 MB -> 179.665 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4579.149 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 123.564 ms, heap usage 372.121 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (4618.768 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 125.018 ms, heap usage 462.714 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (4937.971 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 137.300 ms, heap usage 567.562 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4095.594 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 118.409 ms, heap usage 307.369 MB -> 179.667 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (4047.537 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 116.988 ms, heap usage 303.117 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4029.317 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.553 ms, heap usage 279.661 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4006.681 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 112.397 ms, heap usage 279.117 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4330.704 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 116.739 ms, heap usage 313.116 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3769.735 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 111.424 ms, heap usage 307.166 MB -> 179.672 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3639.238 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 114.887 ms, heap usage 314.046 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3494.136 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 208.743 ms, heap usage 359.545 MB -> 201.959 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (301.041 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.992 ms, heap usage 229.959 MB -> 201.995 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (191.693 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 125.615 ms, heap usage 231.993 MB -> 202.003 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (192.253 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 133.266 ms, heap usage 231.990 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (175.154 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 124.824 ms, heap usage 231.993 MB -> 201.998 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (174.247 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 128.714 ms, heap usage 231.990 MB -> 201.995 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (181.024 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 128.089 ms, heap usage 231.990 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (181.233 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 120.693 ms, heap usage 231.993 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (190.030 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 124.157 ms, heap usage 231.991 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (186.131 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 118.065 ms, heap usage 231.990 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (166.078 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 128.042 ms, heap usage 231.991 MB -> 201.996 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (177.734 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 120.100 ms, heap usage 231.991 MB -> 201.992 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (177.714 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 121.825 ms, heap usage 231.994 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (163.342 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 120.932 ms, heap usage 231.992 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (171.678 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 125.264 ms, heap usage 231.992 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (179.927 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 163.526 ms, heap usage 233.492 MB -> 180.993 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1912.599 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 121.020 ms, heap usage 539.493 MB -> 180.920 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1200.147 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 128.035 ms, heap usage 398.871 MB -> 180.918 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (975.329 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 134.919 ms, heap usage 373.131 MB -> 180.913 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1001.157 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 142.035 ms, heap usage 303.533 MB -> 180.913 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1045.017 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 131.471 ms, heap usage 302.342 MB -> 180.916 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1064.155 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 127.636 ms, heap usage 430.420 MB -> 180.923 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (1156.742 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 124.204 ms, heap usage 443.829 MB -> 180.918 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1042.461 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 127.901 ms, heap usage 292.327 MB -> 180.913 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1138.461 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.300 ms, heap usage 375.619 MB -> 180.919 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1001.812 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 124.244 ms, heap usage 413.109 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (975.564 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 131.008 ms, heap usage 403.106 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (1052.043 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 138.411 ms, heap usage 287.078 MB -> 180.917 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1046.527 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 115.852 ms, heap usage 355.604 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1114.317 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 120.500 ms, heap usage 425.101 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (985.261 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 139.645 ms, heap usage 327.207 MB -> 192.967 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (7997.144 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.137 ms, heap usage 811.609 MB -> 275.886 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1653.796 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 174.700 ms, heap usage 697.292 MB -> 276.623 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1404.405 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.037 ms, heap usage 534.220 MB -> 276.644 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1448.247 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 212.057 ms, heap usage 640.304 MB -> 277.299 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1741.064 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 140.268 ms, heap usage 559.873 MB -> 277.347 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1311.719 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 181.272 ms, heap usage 547.998 MB -> 277.444 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1244.456 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 190.645 ms, heap usage 559.082 MB -> 277.655 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1102.283 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.155 ms, heap usage 536.533 MB -> 277.682 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1100.886 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 139.593 ms, heap usage 584.876 MB -> 278.103 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1140.530 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 159.565 ms, heap usage 647.475 MB -> 278.602 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1085.252 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 130.790 ms, heap usage 587.620 MB -> 278.545 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1072.477 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 130.353 ms, heap usage 526.097 MB -> 278.507 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1094.953 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.059 ms, heap usage 626.931 MB -> 278.998 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1031.185 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 143.861 ms, heap usage 539.073 MB -> 279.049 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1040.665 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.178 ms, heap usage 813.638 MB -> 213.258 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (15425.325 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 185.769 ms, heap usage 494.163 MB -> 220.047 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (11221.525 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 205.913 ms, heap usage 824.883 MB -> 217.421 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (10809.864 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 147.106 ms, heap usage 467.285 MB -> 219.293 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (11023.910 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 173.101 ms, heap usage 779.782 MB -> 220.051 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (10198.733 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.511 ms, heap usage 352.428 MB -> 219.619 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (10636.603 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 143.151 ms, heap usage 718.361 MB -> 220.178 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (10561.507 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 150.634 ms, heap usage 260.298 MB -> 219.733 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (10469.706 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 141.169 ms, heap usage 530.295 MB -> 220.271 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (10176.142 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 171.607 ms, heap usage 610.779 MB -> 220.171 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (10254.648 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 169.516 ms, heap usage 686.217 MB -> 220.127 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (10499.339 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 146.311 ms, heap usage 603.792 MB -> 220.516 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (10348.095 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 148.157 ms, heap usage 584.542 MB -> 220.160 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (10110.887 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 148.826 ms, heap usage 354.517 MB -> 220.053 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10376.669 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.768 ms, heap usage 623.634 MB -> 220.275 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (11054.460 ms) ======\n"
    },
    "mnemonics": {
        "times": [
            4445.337,
            4385.267,
            4341.617,
            4550.571,
            4509.877,
            4423.525,
            4528.719,
            5097.195,
            4504.616,
            4110.642,
            4336.303,
            4382.407,
            5178.886,
            4536.629,
            4008.247
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 57.024 ms, heap usage 111.776 MB -> 64.309 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3604.161 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 138.331 ms, heap usage 497.256 MB -> 210.379 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1206.039 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.180 ms, heap usage 342.662 MB -> 210.448 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (802.005 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.097 ms, heap usage 228.745 MB -> 210.498 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (890.021 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 118.591 ms, heap usage 227.856 MB -> 210.547 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (756.979 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 131.581 ms, heap usage 227.959 MB -> 210.595 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (768.275 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.534 ms, heap usage 227.892 MB -> 210.642 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (832.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.913 ms, heap usage 234.703 MB -> 210.693 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (824.732 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.609 ms, heap usage 228.480 MB -> 210.788 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (858.442 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 118.947 ms, heap usage 226.559 MB -> 210.837 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (851.310 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 216.735 MB -> 210.865 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1073.187 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.850 ms, heap usage 215.881 MB -> 210.904 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (968.823 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.393 ms, heap usage 437.051 MB -> 210.986 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (871.115 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.423 ms, heap usage 445.626 MB -> 211.024 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (828.153 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 132.380 ms, heap usage 445.115 MB -> 211.059 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (786.784 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 116.387 ms, heap usage 316.060 MB -> 147.470 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5546.650 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 111.086 ms, heap usage 296.868 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5178.673 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 104.222 ms, heap usage 248.316 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5323.796 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.356 ms, heap usage 384.850 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5470.135 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 118.199 ms, heap usage 301.234 MB -> 147.423 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5281.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 119.291 ms, heap usage 423.626 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5257.988 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 117.705 ms, heap usage 223.339 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5357.991 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 110.036 ms, heap usage 389.213 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5478.297 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 121.025 ms, heap usage 345.195 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5249.333 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.886 ms, heap usage 269.229 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5127.839 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.849 ms, heap usage 244.809 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5823.739 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 146.697 ms, heap usage 175.499 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5724.478 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 142.389 ms, heap usage 472.226 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6334.825 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 133.763 ms, heap usage 251.181 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5658.329 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 131.517 ms, heap usage 402.200 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6717.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 89.399 ms, heap usage 171.725 MB -> 98.329 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (658.405 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 119.710 ms, heap usage 252.329 MB -> 98.918 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (317.820 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 86.808 ms, heap usage 240.918 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (234.506 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.869 ms, heap usage 239.916 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (221.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 128.459 ms, heap usage 239.439 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (201.599 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.146 ms, heap usage 238.904 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (224.815 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 89.459 ms, heap usage 241.155 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (222.268 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 97.592 ms, heap usage 240.317 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (162.776 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 82.902 ms, heap usage 240.211 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (173.289 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 82.188 ms, heap usage 240.244 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (192.864 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 87.035 ms, heap usage 240.731 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (129.190 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 78.267 ms, heap usage 240.872 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (161.823 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 87.999 ms, heap usage 240.251 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (209.179 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.076 ms, heap usage 240.753 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (189.248 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 79.462 ms, heap usage 240.758 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (155.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 85.249 ms, heap usage 209.534 MB -> 101.361 MB.\n====== db-shootout (database) [default], iteration 0 completed (8178.488 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 97.054 ms, heap usage 225.642 MB -> 109.901 MB.\n====== db-shootout (database) [default], iteration 1 completed (8139.624 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 77.040 ms, heap usage 163.573 MB -> 111.847 MB.\n====== db-shootout (database) [default], iteration 2 completed (7733.762 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 83.562 ms, heap usage 196.819 MB -> 111.010 MB.\n====== db-shootout (database) [default], iteration 3 completed (6815.819 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 64.493 ms, heap usage 378.799 MB -> 112.387 MB.\n====== db-shootout (database) [default], iteration 4 completed (7443.934 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.668 ms, heap usage 258.599 MB -> 112.317 MB.\n====== db-shootout (database) [default], iteration 5 completed (11781.997 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 150.175 ms, heap usage 480.968 MB -> 112.405 MB.\n====== db-shootout (database) [default], iteration 6 completed (8639.666 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 90.800 ms, heap usage 162.455 MB -> 108.554 MB.\n====== db-shootout (database) [default], iteration 7 completed (7947.788 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 249.811 ms, heap usage 301.609 MB -> 109.781 MB.\n====== db-shootout (database) [default], iteration 8 completed (10834.754 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 77.843 ms, heap usage 212.355 MB -> 108.400 MB.\n====== db-shootout (database) [default], iteration 9 completed (9192.447 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 84.474 ms, heap usage 727.798 MB -> 113.932 MB.\n====== db-shootout (database) [default], iteration 10 completed (8215.907 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 81.573 ms, heap usage 490.439 MB -> 112.682 MB.\n====== db-shootout (database) [default], iteration 11 completed (9294.779 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 688.794 ms, heap usage 618.538 MB -> 110.652 MB.\n====== db-shootout (database) [default], iteration 12 completed (10589.094 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 1453.918 ms, heap usage 530.866 MB -> 110.423 MB.\n====== db-shootout (database) [default], iteration 13 completed (9324.678 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 77.820 ms, heap usage 358.356 MB -> 110.437 MB.\n====== db-shootout (database) [default], iteration 14 completed (7049.835 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :40767 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 79.764 ms, heap usage 628.172 MB -> 112.987 MB.\n====== finagle-http (web) [default], iteration 0 completed (16125.319 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 85.284 ms, heap usage 264.326 MB -> 115.853 MB.\n====== finagle-http (web) [default], iteration 1 completed (9563.126 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 100.262 ms, heap usage 178.466 MB -> 115.981 MB.\n====== finagle-http (web) [default], iteration 2 completed (5442.927 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 90.114 ms, heap usage 147.058 MB -> 116.704 MB.\n====== finagle-http (web) [default], iteration 3 completed (3964.873 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 83.538 ms, heap usage 140.228 MB -> 116.062 MB.\n====== finagle-http (web) [default], iteration 4 completed (3482.041 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 86.191 ms, heap usage 138.623 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 5 completed (3358.311 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 72.643 ms, heap usage 137.736 MB -> 115.957 MB.\n====== finagle-http (web) [default], iteration 6 completed (3329.506 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 76.530 ms, heap usage 291.603 MB -> 115.964 MB.\n====== finagle-http (web) [default], iteration 7 completed (3180.565 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 76.005 ms, heap usage 294.614 MB -> 116.091 MB.\n====== finagle-http (web) [default], iteration 8 completed (3322.154 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 73.133 ms, heap usage 309.144 MB -> 116.094 MB.\n====== finagle-http (web) [default], iteration 9 completed (4063.772 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.828 ms, heap usage 306.260 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 10 completed (4190.495 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.150 ms, heap usage 306.602 MB -> 115.953 MB.\n====== finagle-http (web) [default], iteration 11 completed (3988.006 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.622 ms, heap usage 307.366 MB -> 115.960 MB.\n====== finagle-http (web) [default], iteration 12 completed (3860.580 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 90.378 ms, heap usage 305.608 MB -> 115.952 MB.\n====== finagle-http (web) [default], iteration 13 completed (3829.378 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 88.649 ms, heap usage 305.958 MB -> 116.090 MB.\n====== finagle-http (web) [default], iteration 14 completed (3756.430 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 69.771 ms, heap usage 321.007 MB -> 117.166 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16462.593 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 89.655 ms, heap usage 714.025 MB -> 118.261 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12978.946 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 71.674 ms, heap usage 620.447 MB -> 113.634 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (13289.425 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 70.956 ms, heap usage 620.934 MB -> 113.643 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12317.448 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.165 ms, heap usage 628.025 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12099.577 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 91.926 ms, heap usage 641.437 MB -> 113.653 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (11762.808 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 91.532 ms, heap usage 640.911 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12780.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 73.684 ms, heap usage 647.268 MB -> 113.662 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11939.982 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 81.023 ms, heap usage 630.064 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11962.495 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.889 ms, heap usage 641.991 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11865.639 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.469 ms, heap usage 642.252 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11700.590 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 74.819 ms, heap usage 634.476 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12003.590 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 86.586 ms, heap usage 637.097 MB -> 113.667 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11851.069 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 77.749 ms, heap usage 639.661 MB -> 113.661 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11846.810 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 68.273 ms, heap usage 634.862 MB -> 113.666 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (11659.200 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.240 ms, heap usage 223.260 MB -> 126.812 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8359.398 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 193.640 ms, heap usage 238.332 MB -> 159.038 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2252.165 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 123.113 ms, heap usage 475.399 MB -> 159.598 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1579.383 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 92.963 ms, heap usage 438.994 MB -> 159.989 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1401.174 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 87.620 ms, heap usage 470.232 MB -> 160.198 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1327.201 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.082 ms, heap usage 466.302 MB -> 160.409 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1285.131 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 94.458 ms, heap usage 459.694 MB -> 160.487 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1307.092 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 101.470 ms, heap usage 450.330 MB -> 160.683 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1272.034 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 90.283 ms, heap usage 453.780 MB -> 160.831 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1215.064 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.802 ms, heap usage 450.996 MB -> 161.106 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1231.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 101.875 ms, heap usage 466.286 MB -> 161.225 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1267.367 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.689 ms, heap usage 445.291 MB -> 161.359 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1212.737 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.024 ms, heap usage 470.293 MB -> 161.480 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1233.533 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 97.202 ms, heap usage 477.434 MB -> 161.634 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1224.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 97.570 ms, heap usage 455.767 MB -> 161.770 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1249.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 110.194 ms, heap usage 467.137 MB -> 141.959 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 542\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 47\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 27\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 542\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 7\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 7\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 27\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 127.19 op/s (127.19 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2270.567 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.411 ms, heap usage 461.992 MB -> 142.225 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 479\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 542\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 7\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 27\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 312.50 op/s (312.50 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1534.303 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 103.429 ms, heap usage 505.402 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 335\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 38\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 542\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 7\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 27\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 17\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 643.43 op/s (643.43 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.554 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 102.552 ms, heap usage 512.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 366\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 542\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 7\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 20\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 27\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 17\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 798.00 op/s (798.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1335.067 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 110.023 ms, heap usage 514.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 350\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 542\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 7\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 20\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 27\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1098.90 op/s (1098.90 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1246.417 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 105.370 ms, heap usage 515.533 MB -> 142.220 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 345\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 542\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 7\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 27\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1348.31 op/s (1348.31 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1299.472 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 102.936 ms, heap usage 514.417 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 542\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 8\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 20\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 27\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1521.74 op/s (1521.74 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1233.081 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 102.927 ms, heap usage 514.790 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 314\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 542\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 8\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 20\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 27\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 24\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1899.11 op/s (1899.11 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1227.486 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 112.387 ms, heap usage 515.184 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 334\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 542\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 8\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 27\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 24\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2080.92 op/s (2080.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1204.561 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 104.938 ms, heap usage 513.277 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 321\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 542\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 8\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 20\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 27\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 24\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2395.21 op/s (2395.21 op/s including failed)\nElapsed time: 0.33 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1228.785 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 109.005 ms, heap usage 514.527 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 329\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 542\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 8\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 20\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 27\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 24\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2588.24 op/s (2588.24 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1219.735 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 109.314 ms, heap usage 513.998 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 396\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 542\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 8\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 27\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 24\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2341.46 op/s (2341.46 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1310.336 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.556 ms, heap usage 513.533 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 338\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 542\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 8\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 20\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 27\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 24\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2971.43 op/s (2971.43 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1221.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 95.297 ms, heap usage 516.781 MB -> 142.219 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 331\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 542\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 8\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 20\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 27\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 24\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3323.44 op/s (3323.44 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1204.953 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 101.392 ms, heap usage 513.469 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 336\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 542\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 8\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 20\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 27\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 24\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3389.83 op/s (3389.83 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1222.566 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 142.397 ms, heap usage 449.286 MB -> 153.585 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27413.906 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.102 ms, heap usage 485.868 MB -> 429.353 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15208.606 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 120.590 ms, heap usage 750.040 MB -> 429.543 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (14978.574 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 117.090 ms, heap usage 531.569 MB -> 429.685 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15189.159 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.359 ms, heap usage 448.734 MB -> 429.736 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (14534.248 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.133 ms, heap usage 531.585 MB -> 428.861 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14454.292 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 144.980 ms, heap usage 748.013 MB -> 424.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15506.628 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 125.931 ms, heap usage 744.255 MB -> 424.332 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14635.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.965 ms, heap usage 743.985 MB -> 424.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14851.176 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 127.019 ms, heap usage 526.461 MB -> 424.569 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14585.233 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 158.456 ms, heap usage 744.335 MB -> 421.769 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (14514.373 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 113.150 ms, heap usage 433.039 MB -> 421.869 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14488.137 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 152.550 ms, heap usage 492.501 MB -> 421.987 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15544.839 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 126.209 ms, heap usage 741.709 MB -> 422.028 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14873.637 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.078 ms, heap usage 637.867 MB -> 422.091 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14295.178 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 156.311 ms, heap usage 721.605 MB -> 167.517 MB.\n====== als (apache-spark) [default], iteration 0 completed (18473.338 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 237.583 ms, heap usage 490.473 MB -> 193.215 MB.\n====== als (apache-spark) [default], iteration 1 completed (8621.660 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 135.947 ms, heap usage 351.895 MB -> 193.795 MB.\n====== als (apache-spark) [default], iteration 2 completed (8049.485 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.025 ms, heap usage 618.026 MB -> 194.697 MB.\n====== als (apache-spark) [default], iteration 3 completed (8129.205 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 155.068 ms, heap usage 460.812 MB -> 195.244 MB.\n====== als (apache-spark) [default], iteration 4 completed (8240.756 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 205.851 ms, heap usage 326.065 MB -> 195.528 MB.\n====== als (apache-spark) [default], iteration 5 completed (9468.687 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 226.225 ms, heap usage 733.345 MB -> 196.486 MB.\n====== als (apache-spark) [default], iteration 6 completed (9309.410 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 184.231 ms, heap usage 487.781 MB -> 196.681 MB.\n====== als (apache-spark) [default], iteration 7 completed (8001.285 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 173.830 ms, heap usage 505.959 MB -> 197.162 MB.\n====== als (apache-spark) [default], iteration 8 completed (7411.873 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 137.025 ms, heap usage 690.332 MB -> 198.171 MB.\n====== als (apache-spark) [default], iteration 9 completed (7192.411 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 140.481 ms, heap usage 585.415 MB -> 198.215 MB.\n====== als (apache-spark) [default], iteration 10 completed (7561.985 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 140.398 ms, heap usage 492.504 MB -> 198.282 MB.\n====== als (apache-spark) [default], iteration 11 completed (7334.663 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 133.016 ms, heap usage 603.538 MB -> 198.696 MB.\n====== als (apache-spark) [default], iteration 12 completed (7283.065 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 136.910 ms, heap usage 506.800 MB -> 198.997 MB.\n====== als (apache-spark) [default], iteration 13 completed (7547.761 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 298.707 ms, heap usage 495.750 MB -> 198.980 MB.\n====== als (apache-spark) [default], iteration 14 completed (11748.921 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 187.611 ms, heap usage 692.183 MB -> 185.740 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4932.848 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 128.818 ms, heap usage 317.374 MB -> 179.677 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4203.397 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 126.039 ms, heap usage 311.939 MB -> 179.675 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4282.457 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 130.409 ms, heap usage 366.195 MB -> 179.677 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4139.491 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 122.012 ms, heap usage 317.085 MB -> 179.665 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4579.149 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 123.564 ms, heap usage 372.121 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (4618.768 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 125.018 ms, heap usage 462.714 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (4937.971 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 137.300 ms, heap usage 567.562 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4095.594 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 118.409 ms, heap usage 307.369 MB -> 179.667 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (4047.537 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 116.988 ms, heap usage 303.117 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4029.317 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.553 ms, heap usage 279.661 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4006.681 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 112.397 ms, heap usage 279.117 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4330.704 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 116.739 ms, heap usage 313.116 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3769.735 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 111.424 ms, heap usage 307.166 MB -> 179.672 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3639.238 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 114.887 ms, heap usage 314.046 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3494.136 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 208.743 ms, heap usage 359.545 MB -> 201.959 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (301.041 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.992 ms, heap usage 229.959 MB -> 201.995 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (191.693 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 125.615 ms, heap usage 231.993 MB -> 202.003 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (192.253 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 133.266 ms, heap usage 231.990 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (175.154 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 124.824 ms, heap usage 231.993 MB -> 201.998 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (174.247 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 128.714 ms, heap usage 231.990 MB -> 201.995 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (181.024 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 128.089 ms, heap usage 231.990 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (181.233 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 120.693 ms, heap usage 231.993 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (190.030 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 124.157 ms, heap usage 231.991 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (186.131 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 118.065 ms, heap usage 231.990 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (166.078 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 128.042 ms, heap usage 231.991 MB -> 201.996 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (177.734 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 120.100 ms, heap usage 231.991 MB -> 201.992 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (177.714 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 121.825 ms, heap usage 231.994 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (163.342 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 120.932 ms, heap usage 231.992 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (171.678 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 125.264 ms, heap usage 231.992 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (179.927 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 163.526 ms, heap usage 233.492 MB -> 180.993 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1912.599 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 121.020 ms, heap usage 539.493 MB -> 180.920 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1200.147 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 128.035 ms, heap usage 398.871 MB -> 180.918 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (975.329 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 134.919 ms, heap usage 373.131 MB -> 180.913 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1001.157 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 142.035 ms, heap usage 303.533 MB -> 180.913 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1045.017 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 131.471 ms, heap usage 302.342 MB -> 180.916 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1064.155 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 127.636 ms, heap usage 430.420 MB -> 180.923 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (1156.742 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 124.204 ms, heap usage 443.829 MB -> 180.918 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1042.461 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 127.901 ms, heap usage 292.327 MB -> 180.913 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1138.461 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.300 ms, heap usage 375.619 MB -> 180.919 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1001.812 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 124.244 ms, heap usage 413.109 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (975.564 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 131.008 ms, heap usage 403.106 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (1052.043 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 138.411 ms, heap usage 287.078 MB -> 180.917 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1046.527 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 115.852 ms, heap usage 355.604 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1114.317 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 120.500 ms, heap usage 425.101 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (985.261 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 139.645 ms, heap usage 327.207 MB -> 192.967 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (7997.144 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.137 ms, heap usage 811.609 MB -> 275.886 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1653.796 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 174.700 ms, heap usage 697.292 MB -> 276.623 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1404.405 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.037 ms, heap usage 534.220 MB -> 276.644 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1448.247 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 212.057 ms, heap usage 640.304 MB -> 277.299 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1741.064 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 140.268 ms, heap usage 559.873 MB -> 277.347 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1311.719 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 181.272 ms, heap usage 547.998 MB -> 277.444 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1244.456 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 190.645 ms, heap usage 559.082 MB -> 277.655 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1102.283 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.155 ms, heap usage 536.533 MB -> 277.682 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1100.886 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 139.593 ms, heap usage 584.876 MB -> 278.103 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1140.530 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 159.565 ms, heap usage 647.475 MB -> 278.602 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1085.252 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 130.790 ms, heap usage 587.620 MB -> 278.545 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1072.477 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 130.353 ms, heap usage 526.097 MB -> 278.507 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1094.953 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.059 ms, heap usage 626.931 MB -> 278.998 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1031.185 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 143.861 ms, heap usage 539.073 MB -> 279.049 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1040.665 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.178 ms, heap usage 813.638 MB -> 213.258 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (15425.325 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 185.769 ms, heap usage 494.163 MB -> 220.047 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (11221.525 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 205.913 ms, heap usage 824.883 MB -> 217.421 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (10809.864 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 147.106 ms, heap usage 467.285 MB -> 219.293 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (11023.910 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 173.101 ms, heap usage 779.782 MB -> 220.051 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (10198.733 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.511 ms, heap usage 352.428 MB -> 219.619 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (10636.603 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 143.151 ms, heap usage 718.361 MB -> 220.178 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (10561.507 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 150.634 ms, heap usage 260.298 MB -> 219.733 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (10469.706 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 141.169 ms, heap usage 530.295 MB -> 220.271 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (10176.142 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 171.607 ms, heap usage 610.779 MB -> 220.171 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (10254.648 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 169.516 ms, heap usage 686.217 MB -> 220.127 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (10499.339 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 146.311 ms, heap usage 603.792 MB -> 220.516 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (10348.095 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 148.157 ms, heap usage 584.542 MB -> 220.160 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (10110.887 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 148.826 ms, heap usage 354.517 MB -> 220.053 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10376.669 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.768 ms, heap usage 623.634 MB -> 220.275 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (11054.460 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 142.471 ms, heap usage 603.089 MB -> 211.505 MB.\n====== mnemonics (functional) [default], iteration 0 completed (4445.337 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 137.779 ms, heap usage 341.404 MB -> 211.368 MB.\n====== mnemonics (functional) [default], iteration 1 completed (4385.267 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 143.470 ms, heap usage 335.537 MB -> 211.373 MB.\n====== mnemonics (functional) [default], iteration 2 completed (4341.617 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 154.197 ms, heap usage 346.498 MB -> 211.407 MB.\n====== mnemonics (functional) [default], iteration 3 completed (4550.571 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 169.719 ms, heap usage 344.205 MB -> 211.404 MB.\n====== mnemonics (functional) [default], iteration 4 completed (4509.877 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 143.654 ms, heap usage 346.744 MB -> 211.407 MB.\n====== mnemonics (functional) [default], iteration 5 completed (4423.525 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 145.515 ms, heap usage 346.963 MB -> 211.407 MB.\n====== mnemonics (functional) [default], iteration 6 completed (4528.719 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 154.884 ms, heap usage 342.705 MB -> 211.407 MB.\n====== mnemonics (functional) [default], iteration 7 completed (5097.195 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 151.825 ms, heap usage 347.768 MB -> 211.408 MB.\n====== mnemonics (functional) [default], iteration 8 completed (4504.616 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 135.930 ms, heap usage 340.705 MB -> 211.405 MB.\n====== mnemonics (functional) [default], iteration 9 completed (4110.642 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 141.383 ms, heap usage 338.905 MB -> 211.408 MB.\n====== mnemonics (functional) [default], iteration 10 completed (4336.303 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 143.311 ms, heap usage 347.646 MB -> 211.408 MB.\n====== mnemonics (functional) [default], iteration 11 completed (4382.407 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 149.609 ms, heap usage 346.946 MB -> 211.406 MB.\n====== mnemonics (functional) [default], iteration 12 completed (5178.886 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 164.426 ms, heap usage 347.459 MB -> 211.411 MB.\n====== mnemonics (functional) [default], iteration 13 completed (4536.629 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 137.056 ms, heap usage 344.946 MB -> 211.408 MB.\n====== mnemonics (functional) [default], iteration 14 completed (4008.247 ms) ======\n"
    },
    "dotty": {
        "times": [
            12671.155,
            6775.662,
            4085.151,
            3296.142,
            2913.49,
            2698.791,
            2626.724,
            2330.591,
            2825.277,
            2271.059,
            2048.875,
            1905.871,
            1863.938,
            1654.721,
            1906.405
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 57.024 ms, heap usage 111.776 MB -> 64.309 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3604.161 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 138.331 ms, heap usage 497.256 MB -> 210.379 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1206.039 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.180 ms, heap usage 342.662 MB -> 210.448 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (802.005 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.097 ms, heap usage 228.745 MB -> 210.498 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (890.021 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 118.591 ms, heap usage 227.856 MB -> 210.547 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (756.979 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 131.581 ms, heap usage 227.959 MB -> 210.595 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (768.275 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.534 ms, heap usage 227.892 MB -> 210.642 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (832.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.913 ms, heap usage 234.703 MB -> 210.693 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (824.732 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.609 ms, heap usage 228.480 MB -> 210.788 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (858.442 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 118.947 ms, heap usage 226.559 MB -> 210.837 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (851.310 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 216.735 MB -> 210.865 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1073.187 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.850 ms, heap usage 215.881 MB -> 210.904 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (968.823 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.393 ms, heap usage 437.051 MB -> 210.986 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (871.115 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.423 ms, heap usage 445.626 MB -> 211.024 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (828.153 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 132.380 ms, heap usage 445.115 MB -> 211.059 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (786.784 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 116.387 ms, heap usage 316.060 MB -> 147.470 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5546.650 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 111.086 ms, heap usage 296.868 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5178.673 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 104.222 ms, heap usage 248.316 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5323.796 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.356 ms, heap usage 384.850 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5470.135 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 118.199 ms, heap usage 301.234 MB -> 147.423 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5281.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 119.291 ms, heap usage 423.626 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5257.988 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 117.705 ms, heap usage 223.339 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5357.991 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 110.036 ms, heap usage 389.213 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5478.297 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 121.025 ms, heap usage 345.195 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5249.333 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.886 ms, heap usage 269.229 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5127.839 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.849 ms, heap usage 244.809 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5823.739 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 146.697 ms, heap usage 175.499 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5724.478 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 142.389 ms, heap usage 472.226 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6334.825 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 133.763 ms, heap usage 251.181 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5658.329 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 131.517 ms, heap usage 402.200 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6717.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 89.399 ms, heap usage 171.725 MB -> 98.329 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (658.405 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 119.710 ms, heap usage 252.329 MB -> 98.918 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (317.820 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 86.808 ms, heap usage 240.918 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (234.506 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.869 ms, heap usage 239.916 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (221.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 128.459 ms, heap usage 239.439 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (201.599 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.146 ms, heap usage 238.904 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (224.815 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 89.459 ms, heap usage 241.155 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (222.268 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 97.592 ms, heap usage 240.317 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (162.776 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 82.902 ms, heap usage 240.211 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (173.289 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 82.188 ms, heap usage 240.244 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (192.864 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 87.035 ms, heap usage 240.731 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (129.190 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 78.267 ms, heap usage 240.872 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (161.823 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 87.999 ms, heap usage 240.251 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (209.179 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.076 ms, heap usage 240.753 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (189.248 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 79.462 ms, heap usage 240.758 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (155.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 85.249 ms, heap usage 209.534 MB -> 101.361 MB.\n====== db-shootout (database) [default], iteration 0 completed (8178.488 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 97.054 ms, heap usage 225.642 MB -> 109.901 MB.\n====== db-shootout (database) [default], iteration 1 completed (8139.624 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 77.040 ms, heap usage 163.573 MB -> 111.847 MB.\n====== db-shootout (database) [default], iteration 2 completed (7733.762 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 83.562 ms, heap usage 196.819 MB -> 111.010 MB.\n====== db-shootout (database) [default], iteration 3 completed (6815.819 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 64.493 ms, heap usage 378.799 MB -> 112.387 MB.\n====== db-shootout (database) [default], iteration 4 completed (7443.934 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.668 ms, heap usage 258.599 MB -> 112.317 MB.\n====== db-shootout (database) [default], iteration 5 completed (11781.997 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 150.175 ms, heap usage 480.968 MB -> 112.405 MB.\n====== db-shootout (database) [default], iteration 6 completed (8639.666 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 90.800 ms, heap usage 162.455 MB -> 108.554 MB.\n====== db-shootout (database) [default], iteration 7 completed (7947.788 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 249.811 ms, heap usage 301.609 MB -> 109.781 MB.\n====== db-shootout (database) [default], iteration 8 completed (10834.754 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 77.843 ms, heap usage 212.355 MB -> 108.400 MB.\n====== db-shootout (database) [default], iteration 9 completed (9192.447 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 84.474 ms, heap usage 727.798 MB -> 113.932 MB.\n====== db-shootout (database) [default], iteration 10 completed (8215.907 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 81.573 ms, heap usage 490.439 MB -> 112.682 MB.\n====== db-shootout (database) [default], iteration 11 completed (9294.779 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 688.794 ms, heap usage 618.538 MB -> 110.652 MB.\n====== db-shootout (database) [default], iteration 12 completed (10589.094 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 1453.918 ms, heap usage 530.866 MB -> 110.423 MB.\n====== db-shootout (database) [default], iteration 13 completed (9324.678 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 77.820 ms, heap usage 358.356 MB -> 110.437 MB.\n====== db-shootout (database) [default], iteration 14 completed (7049.835 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :40767 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 79.764 ms, heap usage 628.172 MB -> 112.987 MB.\n====== finagle-http (web) [default], iteration 0 completed (16125.319 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 85.284 ms, heap usage 264.326 MB -> 115.853 MB.\n====== finagle-http (web) [default], iteration 1 completed (9563.126 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 100.262 ms, heap usage 178.466 MB -> 115.981 MB.\n====== finagle-http (web) [default], iteration 2 completed (5442.927 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 90.114 ms, heap usage 147.058 MB -> 116.704 MB.\n====== finagle-http (web) [default], iteration 3 completed (3964.873 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 83.538 ms, heap usage 140.228 MB -> 116.062 MB.\n====== finagle-http (web) [default], iteration 4 completed (3482.041 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 86.191 ms, heap usage 138.623 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 5 completed (3358.311 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 72.643 ms, heap usage 137.736 MB -> 115.957 MB.\n====== finagle-http (web) [default], iteration 6 completed (3329.506 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 76.530 ms, heap usage 291.603 MB -> 115.964 MB.\n====== finagle-http (web) [default], iteration 7 completed (3180.565 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 76.005 ms, heap usage 294.614 MB -> 116.091 MB.\n====== finagle-http (web) [default], iteration 8 completed (3322.154 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 73.133 ms, heap usage 309.144 MB -> 116.094 MB.\n====== finagle-http (web) [default], iteration 9 completed (4063.772 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.828 ms, heap usage 306.260 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 10 completed (4190.495 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.150 ms, heap usage 306.602 MB -> 115.953 MB.\n====== finagle-http (web) [default], iteration 11 completed (3988.006 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.622 ms, heap usage 307.366 MB -> 115.960 MB.\n====== finagle-http (web) [default], iteration 12 completed (3860.580 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 90.378 ms, heap usage 305.608 MB -> 115.952 MB.\n====== finagle-http (web) [default], iteration 13 completed (3829.378 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 88.649 ms, heap usage 305.958 MB -> 116.090 MB.\n====== finagle-http (web) [default], iteration 14 completed (3756.430 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 69.771 ms, heap usage 321.007 MB -> 117.166 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16462.593 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 89.655 ms, heap usage 714.025 MB -> 118.261 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12978.946 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 71.674 ms, heap usage 620.447 MB -> 113.634 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (13289.425 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 70.956 ms, heap usage 620.934 MB -> 113.643 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12317.448 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.165 ms, heap usage 628.025 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12099.577 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 91.926 ms, heap usage 641.437 MB -> 113.653 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (11762.808 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 91.532 ms, heap usage 640.911 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12780.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 73.684 ms, heap usage 647.268 MB -> 113.662 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11939.982 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 81.023 ms, heap usage 630.064 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11962.495 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.889 ms, heap usage 641.991 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11865.639 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.469 ms, heap usage 642.252 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11700.590 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 74.819 ms, heap usage 634.476 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12003.590 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 86.586 ms, heap usage 637.097 MB -> 113.667 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11851.069 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 77.749 ms, heap usage 639.661 MB -> 113.661 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11846.810 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 68.273 ms, heap usage 634.862 MB -> 113.666 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (11659.200 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.240 ms, heap usage 223.260 MB -> 126.812 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8359.398 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 193.640 ms, heap usage 238.332 MB -> 159.038 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2252.165 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 123.113 ms, heap usage 475.399 MB -> 159.598 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1579.383 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 92.963 ms, heap usage 438.994 MB -> 159.989 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1401.174 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 87.620 ms, heap usage 470.232 MB -> 160.198 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1327.201 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.082 ms, heap usage 466.302 MB -> 160.409 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1285.131 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 94.458 ms, heap usage 459.694 MB -> 160.487 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1307.092 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 101.470 ms, heap usage 450.330 MB -> 160.683 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1272.034 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 90.283 ms, heap usage 453.780 MB -> 160.831 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1215.064 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.802 ms, heap usage 450.996 MB -> 161.106 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1231.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 101.875 ms, heap usage 466.286 MB -> 161.225 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1267.367 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.689 ms, heap usage 445.291 MB -> 161.359 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1212.737 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.024 ms, heap usage 470.293 MB -> 161.480 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1233.533 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 97.202 ms, heap usage 477.434 MB -> 161.634 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1224.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 97.570 ms, heap usage 455.767 MB -> 161.770 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1249.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 110.194 ms, heap usage 467.137 MB -> 141.959 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 542\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 47\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 27\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 542\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 7\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 7\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 27\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 127.19 op/s (127.19 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2270.567 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.411 ms, heap usage 461.992 MB -> 142.225 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 479\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 542\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 7\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 27\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 312.50 op/s (312.50 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1534.303 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 103.429 ms, heap usage 505.402 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 335\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 38\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 542\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 7\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 27\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 17\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 643.43 op/s (643.43 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.554 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 102.552 ms, heap usage 512.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 366\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 542\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 7\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 20\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 27\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 17\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 798.00 op/s (798.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1335.067 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 110.023 ms, heap usage 514.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 350\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 542\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 7\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 20\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 27\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1098.90 op/s (1098.90 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1246.417 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 105.370 ms, heap usage 515.533 MB -> 142.220 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 345\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 542\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 7\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 27\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1348.31 op/s (1348.31 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1299.472 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 102.936 ms, heap usage 514.417 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 542\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 8\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 20\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 27\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1521.74 op/s (1521.74 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1233.081 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 102.927 ms, heap usage 514.790 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 314\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 542\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 8\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 20\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 27\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 24\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1899.11 op/s (1899.11 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1227.486 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 112.387 ms, heap usage 515.184 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 334\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 542\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 8\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 27\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 24\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2080.92 op/s (2080.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1204.561 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 104.938 ms, heap usage 513.277 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 321\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 542\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 8\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 20\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 27\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 24\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2395.21 op/s (2395.21 op/s including failed)\nElapsed time: 0.33 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1228.785 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 109.005 ms, heap usage 514.527 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 329\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 542\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 8\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 20\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 27\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 24\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2588.24 op/s (2588.24 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1219.735 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 109.314 ms, heap usage 513.998 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 396\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 542\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 8\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 27\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 24\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2341.46 op/s (2341.46 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1310.336 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.556 ms, heap usage 513.533 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 338\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 542\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 8\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 20\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 27\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 24\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2971.43 op/s (2971.43 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1221.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 95.297 ms, heap usage 516.781 MB -> 142.219 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 331\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 542\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 8\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 20\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 27\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 24\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3323.44 op/s (3323.44 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1204.953 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 101.392 ms, heap usage 513.469 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 336\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 542\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 8\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 20\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 27\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 24\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3389.83 op/s (3389.83 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1222.566 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 142.397 ms, heap usage 449.286 MB -> 153.585 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27413.906 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.102 ms, heap usage 485.868 MB -> 429.353 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15208.606 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 120.590 ms, heap usage 750.040 MB -> 429.543 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (14978.574 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 117.090 ms, heap usage 531.569 MB -> 429.685 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15189.159 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.359 ms, heap usage 448.734 MB -> 429.736 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (14534.248 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.133 ms, heap usage 531.585 MB -> 428.861 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14454.292 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 144.980 ms, heap usage 748.013 MB -> 424.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15506.628 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 125.931 ms, heap usage 744.255 MB -> 424.332 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14635.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.965 ms, heap usage 743.985 MB -> 424.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14851.176 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 127.019 ms, heap usage 526.461 MB -> 424.569 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14585.233 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 158.456 ms, heap usage 744.335 MB -> 421.769 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (14514.373 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 113.150 ms, heap usage 433.039 MB -> 421.869 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14488.137 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 152.550 ms, heap usage 492.501 MB -> 421.987 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15544.839 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 126.209 ms, heap usage 741.709 MB -> 422.028 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14873.637 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.078 ms, heap usage 637.867 MB -> 422.091 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14295.178 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 156.311 ms, heap usage 721.605 MB -> 167.517 MB.\n====== als (apache-spark) [default], iteration 0 completed (18473.338 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 237.583 ms, heap usage 490.473 MB -> 193.215 MB.\n====== als (apache-spark) [default], iteration 1 completed (8621.660 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 135.947 ms, heap usage 351.895 MB -> 193.795 MB.\n====== als (apache-spark) [default], iteration 2 completed (8049.485 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.025 ms, heap usage 618.026 MB -> 194.697 MB.\n====== als (apache-spark) [default], iteration 3 completed (8129.205 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 155.068 ms, heap usage 460.812 MB -> 195.244 MB.\n====== als (apache-spark) [default], iteration 4 completed (8240.756 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 205.851 ms, heap usage 326.065 MB -> 195.528 MB.\n====== als (apache-spark) [default], iteration 5 completed (9468.687 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 226.225 ms, heap usage 733.345 MB -> 196.486 MB.\n====== als (apache-spark) [default], iteration 6 completed (9309.410 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 184.231 ms, heap usage 487.781 MB -> 196.681 MB.\n====== als (apache-spark) [default], iteration 7 completed (8001.285 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 173.830 ms, heap usage 505.959 MB -> 197.162 MB.\n====== als (apache-spark) [default], iteration 8 completed (7411.873 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 137.025 ms, heap usage 690.332 MB -> 198.171 MB.\n====== als (apache-spark) [default], iteration 9 completed (7192.411 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 140.481 ms, heap usage 585.415 MB -> 198.215 MB.\n====== als (apache-spark) [default], iteration 10 completed (7561.985 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 140.398 ms, heap usage 492.504 MB -> 198.282 MB.\n====== als (apache-spark) [default], iteration 11 completed (7334.663 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 133.016 ms, heap usage 603.538 MB -> 198.696 MB.\n====== als (apache-spark) [default], iteration 12 completed (7283.065 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 136.910 ms, heap usage 506.800 MB -> 198.997 MB.\n====== als (apache-spark) [default], iteration 13 completed (7547.761 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 298.707 ms, heap usage 495.750 MB -> 198.980 MB.\n====== als (apache-spark) [default], iteration 14 completed (11748.921 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 187.611 ms, heap usage 692.183 MB -> 185.740 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4932.848 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 128.818 ms, heap usage 317.374 MB -> 179.677 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4203.397 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 126.039 ms, heap usage 311.939 MB -> 179.675 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4282.457 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 130.409 ms, heap usage 366.195 MB -> 179.677 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4139.491 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 122.012 ms, heap usage 317.085 MB -> 179.665 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4579.149 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 123.564 ms, heap usage 372.121 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (4618.768 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 125.018 ms, heap usage 462.714 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (4937.971 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 137.300 ms, heap usage 567.562 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4095.594 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 118.409 ms, heap usage 307.369 MB -> 179.667 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (4047.537 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 116.988 ms, heap usage 303.117 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4029.317 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.553 ms, heap usage 279.661 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4006.681 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 112.397 ms, heap usage 279.117 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4330.704 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 116.739 ms, heap usage 313.116 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3769.735 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 111.424 ms, heap usage 307.166 MB -> 179.672 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3639.238 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 114.887 ms, heap usage 314.046 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3494.136 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 208.743 ms, heap usage 359.545 MB -> 201.959 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (301.041 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.992 ms, heap usage 229.959 MB -> 201.995 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (191.693 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 125.615 ms, heap usage 231.993 MB -> 202.003 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (192.253 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 133.266 ms, heap usage 231.990 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (175.154 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 124.824 ms, heap usage 231.993 MB -> 201.998 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (174.247 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 128.714 ms, heap usage 231.990 MB -> 201.995 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (181.024 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 128.089 ms, heap usage 231.990 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (181.233 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 120.693 ms, heap usage 231.993 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (190.030 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 124.157 ms, heap usage 231.991 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (186.131 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 118.065 ms, heap usage 231.990 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (166.078 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 128.042 ms, heap usage 231.991 MB -> 201.996 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (177.734 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 120.100 ms, heap usage 231.991 MB -> 201.992 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (177.714 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 121.825 ms, heap usage 231.994 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (163.342 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 120.932 ms, heap usage 231.992 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (171.678 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 125.264 ms, heap usage 231.992 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (179.927 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 163.526 ms, heap usage 233.492 MB -> 180.993 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1912.599 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 121.020 ms, heap usage 539.493 MB -> 180.920 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1200.147 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 128.035 ms, heap usage 398.871 MB -> 180.918 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (975.329 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 134.919 ms, heap usage 373.131 MB -> 180.913 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1001.157 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 142.035 ms, heap usage 303.533 MB -> 180.913 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1045.017 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 131.471 ms, heap usage 302.342 MB -> 180.916 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1064.155 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 127.636 ms, heap usage 430.420 MB -> 180.923 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (1156.742 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 124.204 ms, heap usage 443.829 MB -> 180.918 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1042.461 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 127.901 ms, heap usage 292.327 MB -> 180.913 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1138.461 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.300 ms, heap usage 375.619 MB -> 180.919 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1001.812 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 124.244 ms, heap usage 413.109 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (975.564 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 131.008 ms, heap usage 403.106 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (1052.043 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 138.411 ms, heap usage 287.078 MB -> 180.917 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1046.527 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 115.852 ms, heap usage 355.604 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1114.317 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 120.500 ms, heap usage 425.101 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (985.261 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 139.645 ms, heap usage 327.207 MB -> 192.967 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (7997.144 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.137 ms, heap usage 811.609 MB -> 275.886 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1653.796 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 174.700 ms, heap usage 697.292 MB -> 276.623 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1404.405 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.037 ms, heap usage 534.220 MB -> 276.644 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1448.247 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 212.057 ms, heap usage 640.304 MB -> 277.299 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1741.064 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 140.268 ms, heap usage 559.873 MB -> 277.347 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1311.719 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 181.272 ms, heap usage 547.998 MB -> 277.444 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1244.456 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 190.645 ms, heap usage 559.082 MB -> 277.655 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1102.283 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.155 ms, heap usage 536.533 MB -> 277.682 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1100.886 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 139.593 ms, heap usage 584.876 MB -> 278.103 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1140.530 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 159.565 ms, heap usage 647.475 MB -> 278.602 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1085.252 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 130.790 ms, heap usage 587.620 MB -> 278.545 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1072.477 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 130.353 ms, heap usage 526.097 MB -> 278.507 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1094.953 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.059 ms, heap usage 626.931 MB -> 278.998 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1031.185 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 143.861 ms, heap usage 539.073 MB -> 279.049 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1040.665 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.178 ms, heap usage 813.638 MB -> 213.258 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (15425.325 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 185.769 ms, heap usage 494.163 MB -> 220.047 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (11221.525 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 205.913 ms, heap usage 824.883 MB -> 217.421 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (10809.864 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 147.106 ms, heap usage 467.285 MB -> 219.293 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (11023.910 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 173.101 ms, heap usage 779.782 MB -> 220.051 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (10198.733 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.511 ms, heap usage 352.428 MB -> 219.619 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (10636.603 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 143.151 ms, heap usage 718.361 MB -> 220.178 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (10561.507 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 150.634 ms, heap usage 260.298 MB -> 219.733 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (10469.706 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 141.169 ms, heap usage 530.295 MB -> 220.271 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (10176.142 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 171.607 ms, heap usage 610.779 MB -> 220.171 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (10254.648 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 169.516 ms, heap usage 686.217 MB -> 220.127 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (10499.339 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 146.311 ms, heap usage 603.792 MB -> 220.516 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (10348.095 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 148.157 ms, heap usage 584.542 MB -> 220.160 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (10110.887 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 148.826 ms, heap usage 354.517 MB -> 220.053 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10376.669 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.768 ms, heap usage 623.634 MB -> 220.275 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (11054.460 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 142.471 ms, heap usage 603.089 MB -> 211.505 MB.\n====== mnemonics (functional) [default], iteration 0 completed (4445.337 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 137.779 ms, heap usage 341.404 MB -> 211.368 MB.\n====== mnemonics (functional) [default], iteration 1 completed (4385.267 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 143.470 ms, heap usage 335.537 MB -> 211.373 MB.\n====== mnemonics (functional) [default], iteration 2 completed (4341.617 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 154.197 ms, heap usage 346.498 MB -> 211.407 MB.\n====== mnemonics (functional) [default], iteration 3 completed (4550.571 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 169.719 ms, heap usage 344.205 MB -> 211.404 MB.\n====== mnemonics (functional) [default], iteration 4 completed (4509.877 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 143.654 ms, heap usage 346.744 MB -> 211.407 MB.\n====== mnemonics (functional) [default], iteration 5 completed (4423.525 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 145.515 ms, heap usage 346.963 MB -> 211.407 MB.\n====== mnemonics (functional) [default], iteration 6 completed (4528.719 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 154.884 ms, heap usage 342.705 MB -> 211.407 MB.\n====== mnemonics (functional) [default], iteration 7 completed (5097.195 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 151.825 ms, heap usage 347.768 MB -> 211.408 MB.\n====== mnemonics (functional) [default], iteration 8 completed (4504.616 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 135.930 ms, heap usage 340.705 MB -> 211.405 MB.\n====== mnemonics (functional) [default], iteration 9 completed (4110.642 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 141.383 ms, heap usage 338.905 MB -> 211.408 MB.\n====== mnemonics (functional) [default], iteration 10 completed (4336.303 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 143.311 ms, heap usage 347.646 MB -> 211.408 MB.\n====== mnemonics (functional) [default], iteration 11 completed (4382.407 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 149.609 ms, heap usage 346.946 MB -> 211.406 MB.\n====== mnemonics (functional) [default], iteration 12 completed (5178.886 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 164.426 ms, heap usage 347.459 MB -> 211.411 MB.\n====== mnemonics (functional) [default], iteration 13 completed (4536.629 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 137.056 ms, heap usage 344.946 MB -> 211.408 MB.\n====== mnemonics (functional) [default], iteration 14 completed (4008.247 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 206.883 ms, heap usage 364.548 MB -> 214.022 MB.\n====== dotty (scala) [default], iteration 0 completed (12671.155 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 251.298 ms, heap usage 264.043 MB -> 230.617 MB.\n====== dotty (scala) [default], iteration 1 completed (6775.662 ms) ======\n====== dotty (scala) [default], iteration 2 started ======\nGC before operation: completed in 210.932 ms, heap usage 466.136 MB -> 230.633 MB.\n====== dotty (scala) [default], iteration 2 completed (4085.151 ms) ======\n====== dotty (scala) [default], iteration 3 started ======\nGC before operation: completed in 164.888 ms, heap usage 463.139 MB -> 230.642 MB.\n====== dotty (scala) [default], iteration 3 completed (3296.142 ms) ======\n====== dotty (scala) [default], iteration 4 started ======\nGC before operation: completed in 155.231 ms, heap usage 461.156 MB -> 230.644 MB.\n====== dotty (scala) [default], iteration 4 completed (2913.490 ms) ======\n====== dotty (scala) [default], iteration 5 started ======\nGC before operation: completed in 162.045 ms, heap usage 459.644 MB -> 230.662 MB.\n====== dotty (scala) [default], iteration 5 completed (2698.791 ms) ======\n====== dotty (scala) [default], iteration 6 started ======\nGC before operation: completed in 219.281 ms, heap usage 456.657 MB -> 230.669 MB.\n====== dotty (scala) [default], iteration 6 completed (2626.724 ms) ======\n====== dotty (scala) [default], iteration 7 started ======\nGC before operation: completed in 177.746 ms, heap usage 455.177 MB -> 230.677 MB.\n====== dotty (scala) [default], iteration 7 completed (2330.591 ms) ======\n====== dotty (scala) [default], iteration 8 started ======\nGC before operation: completed in 166.848 ms, heap usage 454.192 MB -> 230.682 MB.\n====== dotty (scala) [default], iteration 8 completed (2825.277 ms) ======\n====== dotty (scala) [default], iteration 9 started ======\nGC before operation: completed in 203.079 ms, heap usage 452.697 MB -> 230.692 MB.\n====== dotty (scala) [default], iteration 9 completed (2271.059 ms) ======\n====== dotty (scala) [default], iteration 10 started ======\nGC before operation: completed in 158.864 ms, heap usage 451.707 MB -> 230.694 MB.\n====== dotty (scala) [default], iteration 10 completed (2048.875 ms) ======\n====== dotty (scala) [default], iteration 11 started ======\nGC before operation: completed in 156.331 ms, heap usage 450.707 MB -> 230.705 MB.\n====== dotty (scala) [default], iteration 11 completed (1905.871 ms) ======\n====== dotty (scala) [default], iteration 12 started ======\nGC before operation: completed in 160.388 ms, heap usage 450.217 MB -> 230.703 MB.\n====== dotty (scala) [default], iteration 12 completed (1863.938 ms) ======\n====== dotty (scala) [default], iteration 13 started ======\nGC before operation: completed in 169.798 ms, heap usage 448.211 MB -> 230.711 MB.\n====== dotty (scala) [default], iteration 13 completed (1654.721 ms) ======\n====== dotty (scala) [default], iteration 14 started ======\nGC before operation: completed in 163.757 ms, heap usage 448.226 MB -> 230.713 MB.\n====== dotty (scala) [default], iteration 14 completed (1906.405 ms) ======\n"
    },
    "finagle-chirper": {
        "times": [
            14072.514,
            6851.454,
            4176.976,
            3186.91,
            3064.507,
            3126.741,
            2937.893,
            2768.956,
            2721.52,
            2665.389,
            2906.221,
            2656.706,
            2803.743,
            2727.832,
            2575.196
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 77.935 ms, heap usage 199.387 MB -> 76.030 MB.\n====== scrabble (functional) [default], iteration 0 completed (1340.409 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 79.788 ms, heap usage 328.231 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 1 completed (540.148 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.077 ms, heap usage 209.160 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 2 completed (688.788 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.420 ms, heap usage 348.395 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 3 completed (671.213 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.924 ms, heap usage 373.512 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 4 completed (515.194 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 61.498 ms, heap usage 181.466 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 5 completed (612.319 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 61.121 ms, heap usage 114.990 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 6 completed (485.694 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.152 ms, heap usage 309.850 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 7 completed (504.337 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 60.244 ms, heap usage 139.276 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 8 completed (503.658 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.453 ms, heap usage 363.778 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 9 completed (731.371 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.729 ms, heap usage 157.330 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 10 completed (506.581 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 65.861 ms, heap usage 392.543 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 11 completed (508.256 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 63.149 ms, heap usage 162.447 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 12 completed (712.324 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 76.367 ms, heap usage 361.438 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 13 completed (529.432 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 88.669 ms, heap usage 310.114 MB -> 76.114 MB.\n====== scrabble (functional) [default], iteration 14 completed (629.085 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.634 ms, heap usage 668.604 MB -> 29.648 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19321.381 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 144.787 ms, heap usage 636.692 MB -> 148.994 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11882.370 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.391 ms, heap usage 590.434 MB -> 149.174 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10904.079 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.897 ms, heap usage 500.023 MB -> 149.303 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10098.302 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.671 ms, heap usage 619.633 MB -> 149.416 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10210.062 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 106.687 ms, heap usage 610.775 MB -> 149.406 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10322.430 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 124.384 ms, heap usage 722.327 MB -> 149.327 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9792.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.591 ms, heap usage 481.859 MB -> 146.549 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10533.398 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 118.627 ms, heap usage 543.320 MB -> 147.679 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9904.279 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.825 ms, heap usage 595.084 MB -> 147.792 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11496.663 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 130.737 ms, heap usage 399.583 MB -> 146.907 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (12269.642 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 145.186 ms, heap usage 728.777 MB -> 148.025 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (12082.532 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 205.787 ms, heap usage 404.190 MB -> 147.106 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14579.697 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.820 ms, heap usage 579.948 MB -> 148.203 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10665.832 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 127.530 ms, heap usage 365.651 MB -> 148.237 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10694.042 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 46.605 ms, heap usage 547.758 MB -> 30.907 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3091.850 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 38.131 ms, heap usage 90.635 MB -> 31.743 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2145.413 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.068 ms, heap usage 57.013 MB -> 31.744 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2257.713 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.573 ms, heap usage 61.856 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2139.178 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.451 ms, heap usage 43.398 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2386.849 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.742 ms, heap usage 98.494 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2138.739 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 33.323 ms, heap usage 119.990 MB -> 31.745 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2522.864 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 43.977 ms, heap usage 93.263 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2368.451 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 29.090 ms, heap usage 150.826 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2233.919 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 32.341 ms, heap usage 140.816 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2141.382 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 29.340 ms, heap usage 128.221 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2343.948 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.200 ms, heap usage 51.302 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2046.774 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 30.164 ms, heap usage 146.888 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2208.031 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.086 ms, heap usage 114.870 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1947.972 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 31.012 ms, heap usage 142.924 MB -> 31.746 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2171.570 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 53.620 ms, heap usage 77.324 MB -> 32.556 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (20638.239 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 240.699 ms, heap usage 495.592 MB -> 118.181 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16657.596 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 283.740 ms, heap usage 590.343 MB -> 108.724 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (15909.681 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 235.175 ms, heap usage 565.568 MB -> 104.036 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 3 completed (16286.544 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 263.555 ms, heap usage 418.716 MB -> 119.960 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16959.407 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 230.265 ms, heap usage 462.796 MB -> 115.981 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16144.774 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 157.286 ms, heap usage 730.514 MB -> 93.736 MB.\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15480.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 273.674 ms, heap usage 466.297 MB -> 108.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 7 completed (16176.863 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 274.291 ms, heap usage 435.287 MB -> 120.576 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14858.877 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 310.738 ms, heap usage 522.922 MB -> 151.096 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (14123.488 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 236.072 ms, heap usage 610.346 MB -> 122.971 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13064.575 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 192.741 ms, heap usage 411.692 MB -> 105.787 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (12850.766 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 196.285 ms, heap usage 430.365 MB -> 106.562 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 11\n====== akka-uct (concurrency) [default], iteration 12 completed (13043.630 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 173.563 ms, heap usage 499.820 MB -> 92.957 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13480.408 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 176.179 ms, heap usage 566.334 MB -> 93.129 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13966.419 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 93.677 ms, heap usage 271.978 MB -> 86.174 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20672.727 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 91.766 ms, heap usage 551.770 MB -> 103.815 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15181.029 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 85.475 ms, heap usage 317.785 MB -> 98.952 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14314.287 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.936 ms, heap usage 317.932 MB -> 99.669 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (15033.691 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.708 ms, heap usage 512.873 MB -> 100.134 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13559.245 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 84.923 ms, heap usage 156.500 MB -> 99.597 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14911.923 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 141.834 ms, heap usage 364.635 MB -> 102.511 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13751.839 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 86.507 ms, heap usage 279.700 MB -> 105.424 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15192.674 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.888 ms, heap usage 306.721 MB -> 104.548 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16038.266 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 164.833 ms, heap usage 213.937 MB -> 100.098 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15109.523 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.579 ms, heap usage 306.593 MB -> 104.074 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (16407.743 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 90.701 ms, heap usage 177.881 MB -> 100.007 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (16225.258 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.305 ms, heap usage 144.230 MB -> 100.133 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15855.108 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 123.079 ms, heap usage 270.310 MB -> 100.459 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15379.761 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 96.942 ms, heap usage 201.188 MB -> 101.959 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (11941.992 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 60.025 ms, heap usage 430.937 MB -> 58.778 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3053.135 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 63.626 ms, heap usage 141.102 MB -> 58.877 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2118.346 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 61.294 ms, heap usage 117.877 MB -> 58.878 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2133.615 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 61.261 ms, heap usage 120.378 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2601.509 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 57.603 ms, heap usage 122.379 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2217.977 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 56.332 ms, heap usage 120.879 MB -> 58.879 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2177.174 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 61.439 ms, heap usage 121.379 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2242.484 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 62.341 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2269.094 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 66.011 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2363.995 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 48.394 ms, heap usage 120.880 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2193.283 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 55.302 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2291.995 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.505 ms, heap usage 120.380 MB -> 58.880 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2109.893 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 52.774 ms, heap usage 120.380 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2276.484 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 54.566 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2176.834 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 52.132 ms, heap usage 120.381 MB -> 58.881 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2165.827 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 57.024 ms, heap usage 111.776 MB -> 64.309 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3604.161 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 138.331 ms, heap usage 497.256 MB -> 210.379 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1206.039 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.180 ms, heap usage 342.662 MB -> 210.448 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (802.005 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.097 ms, heap usage 228.745 MB -> 210.498 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (890.021 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 118.591 ms, heap usage 227.856 MB -> 210.547 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (756.979 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 131.581 ms, heap usage 227.959 MB -> 210.595 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (768.275 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.534 ms, heap usage 227.892 MB -> 210.642 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (832.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.913 ms, heap usage 234.703 MB -> 210.693 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (824.732 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.609 ms, heap usage 228.480 MB -> 210.788 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (858.442 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 118.947 ms, heap usage 226.559 MB -> 210.837 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (851.310 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 216.735 MB -> 210.865 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1073.187 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.850 ms, heap usage 215.881 MB -> 210.904 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (968.823 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.393 ms, heap usage 437.051 MB -> 210.986 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (871.115 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.423 ms, heap usage 445.626 MB -> 211.024 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (828.153 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 132.380 ms, heap usage 445.115 MB -> 211.059 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (786.784 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 116.387 ms, heap usage 316.060 MB -> 147.470 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5546.650 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 111.086 ms, heap usage 296.868 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5178.673 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 104.222 ms, heap usage 248.316 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5323.796 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.356 ms, heap usage 384.850 MB -> 147.422 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5470.135 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 118.199 ms, heap usage 301.234 MB -> 147.423 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5281.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 119.291 ms, heap usage 423.626 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5257.988 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 117.705 ms, heap usage 223.339 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5357.991 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 110.036 ms, heap usage 389.213 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5478.297 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 121.025 ms, heap usage 345.195 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5249.333 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.886 ms, heap usage 269.229 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5127.839 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.849 ms, heap usage 244.809 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5823.739 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 146.697 ms, heap usage 175.499 MB -> 147.424 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5724.478 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 142.389 ms, heap usage 472.226 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6334.825 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 133.763 ms, heap usage 251.181 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5658.329 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 131.517 ms, heap usage 402.200 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6717.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 89.399 ms, heap usage 171.725 MB -> 98.329 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (658.405 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 119.710 ms, heap usage 252.329 MB -> 98.918 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (317.820 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 86.808 ms, heap usage 240.918 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (234.506 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.869 ms, heap usage 239.916 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (221.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 128.459 ms, heap usage 239.439 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (201.599 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.146 ms, heap usage 238.904 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (224.815 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 89.459 ms, heap usage 241.155 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (222.268 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 97.592 ms, heap usage 240.317 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (162.776 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 82.902 ms, heap usage 240.211 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (173.289 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 82.188 ms, heap usage 240.244 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (192.864 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 87.035 ms, heap usage 240.731 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (129.190 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 78.267 ms, heap usage 240.872 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (161.823 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 87.999 ms, heap usage 240.251 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (209.179 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.076 ms, heap usage 240.753 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (189.248 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 79.462 ms, heap usage 240.758 MB -> 98.916 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (155.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 85.249 ms, heap usage 209.534 MB -> 101.361 MB.\n====== db-shootout (database) [default], iteration 0 completed (8178.488 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 97.054 ms, heap usage 225.642 MB -> 109.901 MB.\n====== db-shootout (database) [default], iteration 1 completed (8139.624 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 77.040 ms, heap usage 163.573 MB -> 111.847 MB.\n====== db-shootout (database) [default], iteration 2 completed (7733.762 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 83.562 ms, heap usage 196.819 MB -> 111.010 MB.\n====== db-shootout (database) [default], iteration 3 completed (6815.819 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 64.493 ms, heap usage 378.799 MB -> 112.387 MB.\n====== db-shootout (database) [default], iteration 4 completed (7443.934 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.668 ms, heap usage 258.599 MB -> 112.317 MB.\n====== db-shootout (database) [default], iteration 5 completed (11781.997 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 150.175 ms, heap usage 480.968 MB -> 112.405 MB.\n====== db-shootout (database) [default], iteration 6 completed (8639.666 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 90.800 ms, heap usage 162.455 MB -> 108.554 MB.\n====== db-shootout (database) [default], iteration 7 completed (7947.788 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 249.811 ms, heap usage 301.609 MB -> 109.781 MB.\n====== db-shootout (database) [default], iteration 8 completed (10834.754 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 77.843 ms, heap usage 212.355 MB -> 108.400 MB.\n====== db-shootout (database) [default], iteration 9 completed (9192.447 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 84.474 ms, heap usage 727.798 MB -> 113.932 MB.\n====== db-shootout (database) [default], iteration 10 completed (8215.907 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 81.573 ms, heap usage 490.439 MB -> 112.682 MB.\n====== db-shootout (database) [default], iteration 11 completed (9294.779 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 688.794 ms, heap usage 618.538 MB -> 110.652 MB.\n====== db-shootout (database) [default], iteration 12 completed (10589.094 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 1453.918 ms, heap usage 530.866 MB -> 110.423 MB.\n====== db-shootout (database) [default], iteration 13 completed (9324.678 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 77.820 ms, heap usage 358.356 MB -> 110.437 MB.\n====== db-shootout (database) [default], iteration 14 completed (7049.835 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :40767 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 79.764 ms, heap usage 628.172 MB -> 112.987 MB.\n====== finagle-http (web) [default], iteration 0 completed (16125.319 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 85.284 ms, heap usage 264.326 MB -> 115.853 MB.\n====== finagle-http (web) [default], iteration 1 completed (9563.126 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 100.262 ms, heap usage 178.466 MB -> 115.981 MB.\n====== finagle-http (web) [default], iteration 2 completed (5442.927 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 90.114 ms, heap usage 147.058 MB -> 116.704 MB.\n====== finagle-http (web) [default], iteration 3 completed (3964.873 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 83.538 ms, heap usage 140.228 MB -> 116.062 MB.\n====== finagle-http (web) [default], iteration 4 completed (3482.041 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 86.191 ms, heap usage 138.623 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 5 completed (3358.311 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 72.643 ms, heap usage 137.736 MB -> 115.957 MB.\n====== finagle-http (web) [default], iteration 6 completed (3329.506 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 76.530 ms, heap usage 291.603 MB -> 115.964 MB.\n====== finagle-http (web) [default], iteration 7 completed (3180.565 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 76.005 ms, heap usage 294.614 MB -> 116.091 MB.\n====== finagle-http (web) [default], iteration 8 completed (3322.154 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 73.133 ms, heap usage 309.144 MB -> 116.094 MB.\n====== finagle-http (web) [default], iteration 9 completed (4063.772 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.828 ms, heap usage 306.260 MB -> 116.038 MB.\n====== finagle-http (web) [default], iteration 10 completed (4190.495 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.150 ms, heap usage 306.602 MB -> 115.953 MB.\n====== finagle-http (web) [default], iteration 11 completed (3988.006 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.622 ms, heap usage 307.366 MB -> 115.960 MB.\n====== finagle-http (web) [default], iteration 12 completed (3860.580 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 90.378 ms, heap usage 305.608 MB -> 115.952 MB.\n====== finagle-http (web) [default], iteration 13 completed (3829.378 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 88.649 ms, heap usage 305.958 MB -> 116.090 MB.\n====== finagle-http (web) [default], iteration 14 completed (3756.430 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 69.771 ms, heap usage 321.007 MB -> 117.166 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16462.593 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 89.655 ms, heap usage 714.025 MB -> 118.261 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12978.946 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 71.674 ms, heap usage 620.447 MB -> 113.634 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (13289.425 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 70.956 ms, heap usage 620.934 MB -> 113.643 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12317.448 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.165 ms, heap usage 628.025 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12099.577 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 91.926 ms, heap usage 641.437 MB -> 113.653 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (11762.808 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 91.532 ms, heap usage 640.911 MB -> 113.651 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12780.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 73.684 ms, heap usage 647.268 MB -> 113.662 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11939.982 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 81.023 ms, heap usage 630.064 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11962.495 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.889 ms, heap usage 641.991 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11865.639 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.469 ms, heap usage 642.252 MB -> 113.655 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11700.590 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 74.819 ms, heap usage 634.476 MB -> 113.658 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12003.590 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 86.586 ms, heap usage 637.097 MB -> 113.667 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11851.069 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 77.749 ms, heap usage 639.661 MB -> 113.661 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11846.810 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 68.273 ms, heap usage 634.862 MB -> 113.666 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (11659.200 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.240 ms, heap usage 223.260 MB -> 126.812 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8359.398 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 193.640 ms, heap usage 238.332 MB -> 159.038 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2252.165 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 123.113 ms, heap usage 475.399 MB -> 159.598 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1579.383 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 92.963 ms, heap usage 438.994 MB -> 159.989 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1401.174 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 87.620 ms, heap usage 470.232 MB -> 160.198 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1327.201 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.082 ms, heap usage 466.302 MB -> 160.409 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1285.131 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 94.458 ms, heap usage 459.694 MB -> 160.487 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1307.092 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 101.470 ms, heap usage 450.330 MB -> 160.683 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1272.034 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 90.283 ms, heap usage 453.780 MB -> 160.831 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1215.064 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.802 ms, heap usage 450.996 MB -> 161.106 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1231.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 101.875 ms, heap usage 466.286 MB -> 161.225 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1267.367 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.689 ms, heap usage 445.291 MB -> 161.359 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1212.737 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.024 ms, heap usage 470.293 MB -> 161.480 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1233.533 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 97.202 ms, heap usage 477.434 MB -> 161.634 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1224.511 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 97.570 ms, heap usage 455.767 MB -> 161.770 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1249.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 110.194 ms, heap usage 467.137 MB -> 141.959 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 542\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 47\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 27\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 542\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 7\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 7\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 27\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 127.19 op/s (127.19 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2270.567 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.411 ms, heap usage 461.992 MB -> 142.225 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 479\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 542\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 7\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 27\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 312.50 op/s (312.50 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1534.303 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 103.429 ms, heap usage 505.402 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 335\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 38\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 542\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 7\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 27\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 17\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 643.43 op/s (643.43 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.554 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 102.552 ms, heap usage 512.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 366\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 542\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 7\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 20\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 27\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 17\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 798.00 op/s (798.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1335.067 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 110.023 ms, heap usage 514.496 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 350\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 542\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 7\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 20\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 27\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1098.90 op/s (1098.90 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1246.417 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 105.370 ms, heap usage 515.533 MB -> 142.220 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 345\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 542\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 7\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 27\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1348.31 op/s (1348.31 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1299.472 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 102.936 ms, heap usage 514.417 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 542\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 8\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 20\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 27\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1521.74 op/s (1521.74 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1233.081 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 102.927 ms, heap usage 514.790 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 314\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 542\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 8\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 20\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 27\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 24\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1899.11 op/s (1899.11 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1227.486 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 112.387 ms, heap usage 515.184 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 334\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 542\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 8\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 27\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 24\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2080.92 op/s (2080.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1204.561 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 104.938 ms, heap usage 513.277 MB -> 142.221 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 321\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 542\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 8\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 20\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 27\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 24\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2395.21 op/s (2395.21 op/s including failed)\nElapsed time: 0.33 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1228.785 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 109.005 ms, heap usage 514.527 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 329\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 542\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 8\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 20\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 27\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 24\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2588.24 op/s (2588.24 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1219.735 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 109.314 ms, heap usage 513.998 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 396\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 542\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 8\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 27\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 24\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2341.46 op/s (2341.46 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1310.336 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.556 ms, heap usage 513.533 MB -> 142.218 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 338\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 542\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 8\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 20\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 27\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 24\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2971.43 op/s (2971.43 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1221.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 95.297 ms, heap usage 516.781 MB -> 142.219 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 331\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 542\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 8\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 20\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 27\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 24\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3323.44 op/s (3323.44 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1204.953 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 101.392 ms, heap usage 513.469 MB -> 142.226 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 336\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 542\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 8\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 20\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 27\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 24\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3389.83 op/s (3389.83 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1222.566 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 142.397 ms, heap usage 449.286 MB -> 153.585 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27413.906 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.102 ms, heap usage 485.868 MB -> 429.353 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15208.606 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 120.590 ms, heap usage 750.040 MB -> 429.543 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (14978.574 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 117.090 ms, heap usage 531.569 MB -> 429.685 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15189.159 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.359 ms, heap usage 448.734 MB -> 429.736 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (14534.248 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.133 ms, heap usage 531.585 MB -> 428.861 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14454.292 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 144.980 ms, heap usage 748.013 MB -> 424.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15506.628 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 125.931 ms, heap usage 744.255 MB -> 424.332 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14635.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.965 ms, heap usage 743.985 MB -> 424.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14851.176 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 127.019 ms, heap usage 526.461 MB -> 424.569 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14585.233 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 158.456 ms, heap usage 744.335 MB -> 421.769 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (14514.373 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 113.150 ms, heap usage 433.039 MB -> 421.869 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14488.137 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 152.550 ms, heap usage 492.501 MB -> 421.987 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15544.839 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 126.209 ms, heap usage 741.709 MB -> 422.028 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14873.637 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.078 ms, heap usage 637.867 MB -> 422.091 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14295.178 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 156.311 ms, heap usage 721.605 MB -> 167.517 MB.\n====== als (apache-spark) [default], iteration 0 completed (18473.338 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 237.583 ms, heap usage 490.473 MB -> 193.215 MB.\n====== als (apache-spark) [default], iteration 1 completed (8621.660 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 135.947 ms, heap usage 351.895 MB -> 193.795 MB.\n====== als (apache-spark) [default], iteration 2 completed (8049.485 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.025 ms, heap usage 618.026 MB -> 194.697 MB.\n====== als (apache-spark) [default], iteration 3 completed (8129.205 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 155.068 ms, heap usage 460.812 MB -> 195.244 MB.\n====== als (apache-spark) [default], iteration 4 completed (8240.756 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 205.851 ms, heap usage 326.065 MB -> 195.528 MB.\n====== als (apache-spark) [default], iteration 5 completed (9468.687 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 226.225 ms, heap usage 733.345 MB -> 196.486 MB.\n====== als (apache-spark) [default], iteration 6 completed (9309.410 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 184.231 ms, heap usage 487.781 MB -> 196.681 MB.\n====== als (apache-spark) [default], iteration 7 completed (8001.285 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 173.830 ms, heap usage 505.959 MB -> 197.162 MB.\n====== als (apache-spark) [default], iteration 8 completed (7411.873 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 137.025 ms, heap usage 690.332 MB -> 198.171 MB.\n====== als (apache-spark) [default], iteration 9 completed (7192.411 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 140.481 ms, heap usage 585.415 MB -> 198.215 MB.\n====== als (apache-spark) [default], iteration 10 completed (7561.985 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 140.398 ms, heap usage 492.504 MB -> 198.282 MB.\n====== als (apache-spark) [default], iteration 11 completed (7334.663 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 133.016 ms, heap usage 603.538 MB -> 198.696 MB.\n====== als (apache-spark) [default], iteration 12 completed (7283.065 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 136.910 ms, heap usage 506.800 MB -> 198.997 MB.\n====== als (apache-spark) [default], iteration 13 completed (7547.761 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 298.707 ms, heap usage 495.750 MB -> 198.980 MB.\n====== als (apache-spark) [default], iteration 14 completed (11748.921 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 187.611 ms, heap usage 692.183 MB -> 185.740 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4932.848 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 128.818 ms, heap usage 317.374 MB -> 179.677 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4203.397 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 126.039 ms, heap usage 311.939 MB -> 179.675 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4282.457 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 130.409 ms, heap usage 366.195 MB -> 179.677 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4139.491 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 122.012 ms, heap usage 317.085 MB -> 179.665 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4579.149 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 123.564 ms, heap usage 372.121 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (4618.768 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 125.018 ms, heap usage 462.714 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (4937.971 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 137.300 ms, heap usage 567.562 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4095.594 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 118.409 ms, heap usage 307.369 MB -> 179.667 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (4047.537 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 116.988 ms, heap usage 303.117 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4029.317 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.553 ms, heap usage 279.661 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4006.681 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 112.397 ms, heap usage 279.117 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4330.704 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 116.739 ms, heap usage 313.116 MB -> 179.669 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3769.735 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 111.424 ms, heap usage 307.166 MB -> 179.672 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3639.238 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 114.887 ms, heap usage 314.046 MB -> 179.670 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3494.136 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 208.743 ms, heap usage 359.545 MB -> 201.959 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (301.041 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.992 ms, heap usage 229.959 MB -> 201.995 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (191.693 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 125.615 ms, heap usage 231.993 MB -> 202.003 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (192.253 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 133.266 ms, heap usage 231.990 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (175.154 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 124.824 ms, heap usage 231.993 MB -> 201.998 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (174.247 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 128.714 ms, heap usage 231.990 MB -> 201.995 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (181.024 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 128.089 ms, heap usage 231.990 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (181.233 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 120.693 ms, heap usage 231.993 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (190.030 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 124.157 ms, heap usage 231.991 MB -> 201.993 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (186.131 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 118.065 ms, heap usage 231.990 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (166.078 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 128.042 ms, heap usage 231.991 MB -> 201.996 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (177.734 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 120.100 ms, heap usage 231.991 MB -> 201.992 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (177.714 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 121.825 ms, heap usage 231.994 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (163.342 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 120.932 ms, heap usage 231.992 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (171.678 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 125.264 ms, heap usage 231.992 MB -> 201.994 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (179.927 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 163.526 ms, heap usage 233.492 MB -> 180.993 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1912.599 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 121.020 ms, heap usage 539.493 MB -> 180.920 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1200.147 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 128.035 ms, heap usage 398.871 MB -> 180.918 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (975.329 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 134.919 ms, heap usage 373.131 MB -> 180.913 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1001.157 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 142.035 ms, heap usage 303.533 MB -> 180.913 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1045.017 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 131.471 ms, heap usage 302.342 MB -> 180.916 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1064.155 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 127.636 ms, heap usage 430.420 MB -> 180.923 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (1156.742 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 124.204 ms, heap usage 443.829 MB -> 180.918 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1042.461 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 127.901 ms, heap usage 292.327 MB -> 180.913 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1138.461 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.300 ms, heap usage 375.619 MB -> 180.919 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1001.812 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 124.244 ms, heap usage 413.109 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (975.564 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 131.008 ms, heap usage 403.106 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (1052.043 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 138.411 ms, heap usage 287.078 MB -> 180.917 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1046.527 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 115.852 ms, heap usage 355.604 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1114.317 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 120.500 ms, heap usage 425.101 MB -> 180.914 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (985.261 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 139.645 ms, heap usage 327.207 MB -> 192.967 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (7997.144 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.137 ms, heap usage 811.609 MB -> 275.886 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1653.796 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 174.700 ms, heap usage 697.292 MB -> 276.623 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1404.405 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.037 ms, heap usage 534.220 MB -> 276.644 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1448.247 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 212.057 ms, heap usage 640.304 MB -> 277.299 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1741.064 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 140.268 ms, heap usage 559.873 MB -> 277.347 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1311.719 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 181.272 ms, heap usage 547.998 MB -> 277.444 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1244.456 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 190.645 ms, heap usage 559.082 MB -> 277.655 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1102.283 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 130.155 ms, heap usage 536.533 MB -> 277.682 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1100.886 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 139.593 ms, heap usage 584.876 MB -> 278.103 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1140.530 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 159.565 ms, heap usage 647.475 MB -> 278.602 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1085.252 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 130.790 ms, heap usage 587.620 MB -> 278.545 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1072.477 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 130.353 ms, heap usage 526.097 MB -> 278.507 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1094.953 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.059 ms, heap usage 626.931 MB -> 278.998 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1031.185 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 143.861 ms, heap usage 539.073 MB -> 279.049 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1040.665 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.178 ms, heap usage 813.638 MB -> 213.258 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (15425.325 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 185.769 ms, heap usage 494.163 MB -> 220.047 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (11221.525 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 205.913 ms, heap usage 824.883 MB -> 217.421 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (10809.864 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 147.106 ms, heap usage 467.285 MB -> 219.293 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (11023.910 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 173.101 ms, heap usage 779.782 MB -> 220.051 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (10198.733 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.511 ms, heap usage 352.428 MB -> 219.619 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (10636.603 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 143.151 ms, heap usage 718.361 MB -> 220.178 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (10561.507 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 150.634 ms, heap usage 260.298 MB -> 219.733 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (10469.706 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 141.169 ms, heap usage 530.295 MB -> 220.271 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (10176.142 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 171.607 ms, heap usage 610.779 MB -> 220.171 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (10254.648 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 169.516 ms, heap usage 686.217 MB -> 220.127 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (10499.339 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 146.311 ms, heap usage 603.792 MB -> 220.516 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (10348.095 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 148.157 ms, heap usage 584.542 MB -> 220.160 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (10110.887 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 148.826 ms, heap usage 354.517 MB -> 220.053 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10376.669 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.768 ms, heap usage 623.634 MB -> 220.275 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (11054.460 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 142.471 ms, heap usage 603.089 MB -> 211.505 MB.\n====== mnemonics (functional) [default], iteration 0 completed (4445.337 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 137.779 ms, heap usage 341.404 MB -> 211.368 MB.\n====== mnemonics (functional) [default], iteration 1 completed (4385.267 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 143.470 ms, heap usage 335.537 MB -> 211.373 MB.\n====== mnemonics (functional) [default], iteration 2 completed (4341.617 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 154.197 ms, heap usage 346.498 MB -> 211.407 MB.\n====== mnemonics (functional) [default], iteration 3 completed (4550.571 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 169.719 ms, heap usage 344.205 MB -> 211.404 MB.\n====== mnemonics (functional) [default], iteration 4 completed (4509.877 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 143.654 ms, heap usage 346.744 MB -> 211.407 MB.\n====== mnemonics (functional) [default], iteration 5 completed (4423.525 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 145.515 ms, heap usage 346.963 MB -> 211.407 MB.\n====== mnemonics (functional) [default], iteration 6 completed (4528.719 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 154.884 ms, heap usage 342.705 MB -> 211.407 MB.\n====== mnemonics (functional) [default], iteration 7 completed (5097.195 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 151.825 ms, heap usage 347.768 MB -> 211.408 MB.\n====== mnemonics (functional) [default], iteration 8 completed (4504.616 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 135.930 ms, heap usage 340.705 MB -> 211.405 MB.\n====== mnemonics (functional) [default], iteration 9 completed (4110.642 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 141.383 ms, heap usage 338.905 MB -> 211.408 MB.\n====== mnemonics (functional) [default], iteration 10 completed (4336.303 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 143.311 ms, heap usage 347.646 MB -> 211.408 MB.\n====== mnemonics (functional) [default], iteration 11 completed (4382.407 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 149.609 ms, heap usage 346.946 MB -> 211.406 MB.\n====== mnemonics (functional) [default], iteration 12 completed (5178.886 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 164.426 ms, heap usage 347.459 MB -> 211.411 MB.\n====== mnemonics (functional) [default], iteration 13 completed (4536.629 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 137.056 ms, heap usage 344.946 MB -> 211.408 MB.\n====== mnemonics (functional) [default], iteration 14 completed (4008.247 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 206.883 ms, heap usage 364.548 MB -> 214.022 MB.\n====== dotty (scala) [default], iteration 0 completed (12671.155 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 251.298 ms, heap usage 264.043 MB -> 230.617 MB.\n====== dotty (scala) [default], iteration 1 completed (6775.662 ms) ======\n====== dotty (scala) [default], iteration 2 started ======\nGC before operation: completed in 210.932 ms, heap usage 466.136 MB -> 230.633 MB.\n====== dotty (scala) [default], iteration 2 completed (4085.151 ms) ======\n====== dotty (scala) [default], iteration 3 started ======\nGC before operation: completed in 164.888 ms, heap usage 463.139 MB -> 230.642 MB.\n====== dotty (scala) [default], iteration 3 completed (3296.142 ms) ======\n====== dotty (scala) [default], iteration 4 started ======\nGC before operation: completed in 155.231 ms, heap usage 461.156 MB -> 230.644 MB.\n====== dotty (scala) [default], iteration 4 completed (2913.490 ms) ======\n====== dotty (scala) [default], iteration 5 started ======\nGC before operation: completed in 162.045 ms, heap usage 459.644 MB -> 230.662 MB.\n====== dotty (scala) [default], iteration 5 completed (2698.791 ms) ======\n====== dotty (scala) [default], iteration 6 started ======\nGC before operation: completed in 219.281 ms, heap usage 456.657 MB -> 230.669 MB.\n====== dotty (scala) [default], iteration 6 completed (2626.724 ms) ======\n====== dotty (scala) [default], iteration 7 started ======\nGC before operation: completed in 177.746 ms, heap usage 455.177 MB -> 230.677 MB.\n====== dotty (scala) [default], iteration 7 completed (2330.591 ms) ======\n====== dotty (scala) [default], iteration 8 started ======\nGC before operation: completed in 166.848 ms, heap usage 454.192 MB -> 230.682 MB.\n====== dotty (scala) [default], iteration 8 completed (2825.277 ms) ======\n====== dotty (scala) [default], iteration 9 started ======\nGC before operation: completed in 203.079 ms, heap usage 452.697 MB -> 230.692 MB.\n====== dotty (scala) [default], iteration 9 completed (2271.059 ms) ======\n====== dotty (scala) [default], iteration 10 started ======\nGC before operation: completed in 158.864 ms, heap usage 451.707 MB -> 230.694 MB.\n====== dotty (scala) [default], iteration 10 completed (2048.875 ms) ======\n====== dotty (scala) [default], iteration 11 started ======\nGC before operation: completed in 156.331 ms, heap usage 450.707 MB -> 230.705 MB.\n====== dotty (scala) [default], iteration 11 completed (1905.871 ms) ======\n====== dotty (scala) [default], iteration 12 started ======\nGC before operation: completed in 160.388 ms, heap usage 450.217 MB -> 230.703 MB.\n====== dotty (scala) [default], iteration 12 completed (1863.938 ms) ======\n====== dotty (scala) [default], iteration 13 started ======\nGC before operation: completed in 169.798 ms, heap usage 448.211 MB -> 230.711 MB.\n====== dotty (scala) [default], iteration 13 completed (1654.721 ms) ======\n====== dotty (scala) [default], iteration 14 started ======\nGC before operation: completed in 163.757 ms, heap usage 448.226 MB -> 230.713 MB.\n====== dotty (scala) [default], iteration 14 completed (1906.405 ms) ======\nMaster port: 45971\nCache ports: 32961, 41155, 46153, 45631\n====== finagle-chirper (web) [default], iteration 0 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 1414.889 ms, heap usage 318.713 MB -> 223.861 MB.\n====== finagle-chirper (web) [default], iteration 0 completed (14072.514 ms) ======\n====== finagle-chirper (web) [default], iteration 1 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 200.011 ms, heap usage 406.198 MB -> 226.483 MB.\n====== finagle-chirper (web) [default], iteration 1 completed (6851.454 ms) ======\n====== finagle-chirper (web) [default], iteration 2 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 148.861 ms, heap usage 330.465 MB -> 225.798 MB.\n====== finagle-chirper (web) [default], iteration 2 completed (4176.976 ms) ======\n====== finagle-chirper (web) [default], iteration 3 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 155.796 ms, heap usage 633.783 MB -> 226.281 MB.\n====== finagle-chirper (web) [default], iteration 3 completed (3186.910 ms) ======\n====== finagle-chirper (web) [default], iteration 4 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 145.495 ms, heap usage 600.107 MB -> 226.292 MB.\n====== finagle-chirper (web) [default], iteration 4 completed (3064.507 ms) ======\n====== finagle-chirper (web) [default], iteration 5 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 139.671 ms, heap usage 561.401 MB -> 226.330 MB.\n====== finagle-chirper (web) [default], iteration 5 completed (3126.741 ms) ======\n====== finagle-chirper (web) [default], iteration 6 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 138.831 ms, heap usage 487.926 MB -> 226.298 MB.\n====== finagle-chirper (web) [default], iteration 6 completed (2937.893 ms) ======\n====== finagle-chirper (web) [default], iteration 7 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 146.058 ms, heap usage 452.990 MB -> 226.327 MB.\n====== finagle-chirper (web) [default], iteration 7 completed (2768.956 ms) ======\n====== finagle-chirper (web) [default], iteration 8 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 140.828 ms, heap usage 420.986 MB -> 226.357 MB.\n====== finagle-chirper (web) [default], iteration 8 completed (2721.520 ms) ======\n====== finagle-chirper (web) [default], iteration 9 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 146.684 ms, heap usage 423.420 MB -> 226.364 MB.\n====== finagle-chirper (web) [default], iteration 9 completed (2665.389 ms) ======\n====== finagle-chirper (web) [default], iteration 10 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 160.587 ms, heap usage 362.364 MB -> 226.382 MB.\n====== finagle-chirper (web) [default], iteration 10 completed (2906.221 ms) ======\n====== finagle-chirper (web) [default], iteration 11 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 161.527 ms, heap usage 394.459 MB -> 226.376 MB.\n====== finagle-chirper (web) [default], iteration 11 completed (2656.706 ms) ======\n====== finagle-chirper (web) [default], iteration 12 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 140.143 ms, heap usage 387.876 MB -> 226.384 MB.\n====== finagle-chirper (web) [default], iteration 12 completed (2803.743 ms) ======\n====== finagle-chirper (web) [default], iteration 13 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 150.899 ms, heap usage 385.628 MB -> 226.392 MB.\n====== finagle-chirper (web) [default], iteration 13 completed (2727.832 ms) ======\n====== finagle-chirper (web) [default], iteration 14 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 144.313 ms, heap usage 337.296 MB -> 226.397 MB.\n====== finagle-chirper (web) [default], iteration 14 completed (2575.196 ms) ======\n"
    },
    "times": [
        236968.529,
        150008.805,
        135179.632,
        131386.856,
        128688.622,
        134030.461,
        130969.735,
        128811.914,
        129686.705,
        126966.996,
        128617.021,
        128236.868,
        133705.972,
        125959.966,
        125453.762
    ]
}