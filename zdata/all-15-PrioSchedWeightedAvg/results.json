{
    "scrabble": {
        "times": [
            2306.459,
            1028.068,
            1006.944,
            953.794,
            1030.314,
            1012.217,
            1028.217,
            936.585,
            983.397,
            969.148,
            1033.684,
            944.193,
            929.235,
            791.202,
            917.428
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\n"
    },
    "page-rank": {
        "times": [
            27726.818,
            15353.982,
            15286.034,
            15236.332,
            15068.187,
            15282.258,
            15639.015,
            15291.659,
            15056.496,
            14788.047,
            15180.324,
            14800.224,
            14516.951,
            15652.035,
            14781.544
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n"
    },
    "future-genetic": {
        "times": [
            22732.183,
            17407.456,
            16360.806,
            16233.812,
            16584.843,
            16385.306,
            16425.919,
            16483.767,
            16213.95,
            16408.201,
            16392.967,
            16685.561,
            16146.399,
            16260.536,
            16065.023
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n"
    },
    "akka-uct": {
        "times": [
            27042.236,
            20379.4,
            19818.763,
            19883.386,
            20183.924,
            20348.568,
            19820.094,
            18447.698,
            18273.87,
            19461.369,
            19399.492,
            19815.156,
            18925.149,
            18929.155,
            19510.671
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\n"
    },
    "movie-lens": {
        "times": [
            30866.431,
            19029.449,
            19017.931,
            18361.993,
            17858.236,
            16862.193,
            16217.271,
            15960.495,
            16290.168,
            15660.478,
            15744.812,
            15266.484,
            15536.797,
            15674.517,
            15544.907
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n"
    },
    "scala-doku": {
        "times": [
            3775.422,
            2924.179,
            2632.036,
            2468.844,
            2074.712,
            2124.093,
            2062.298,
            1914.382,
            2124.273,
            2032.641,
            1969.366,
            1950.449,
            2060.221,
            2065.478,
            1991.117
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\n"
    },
    "chi-square": {
        "times": [
            6187.539,
            1694.868,
            2003.305,
            1621.726,
            1269.328,
            1332.628,
            1334.895,
            1301.701,
            1124.225,
            1152.077,
            1177.639,
            1111.159,
            1324.366,
            1081.18,
            1126.707
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 106.929 ms, heap usage 190.171 MB -> 63.200 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (6187.539 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.565 ms, heap usage 496.809 MB -> 209.299 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1694.868 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 206.398 ms, heap usage 463.177 MB -> 209.398 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (2003.305 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 212.302 ms, heap usage 459.524 MB -> 209.445 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1621.726 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 223.150 ms, heap usage 335.714 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1269.328 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 263.102 ms, heap usage 387.379 MB -> 209.584 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1332.628 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 345.063 ms, heap usage 301.217 MB -> 209.640 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1334.895 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 238.282 ms, heap usage 362.215 MB -> 209.684 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (1301.701 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 225.459 ms, heap usage 382.839 MB -> 209.728 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (1124.225 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 213.168 ms, heap usage 659.827 MB -> 209.777 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (1152.077 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 234.392 ms, heap usage 214.753 MB -> 209.803 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1177.639 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 246.759 ms, heap usage 382.873 MB -> 209.860 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (1111.159 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 227.666 ms, heap usage 245.014 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (1324.366 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 288.359 ms, heap usage 381.212 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (1081.180 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 334.356 ms, heap usage 245.026 MB -> 209.966 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (1126.707 ms) ======\n"
    },
    "fj-kmeans": {
        "times": [
            10803.413,
            10179.67,
            10419.647,
            10493.156,
            10700.524,
            10559.377,
            10551.392,
            10599.017,
            10405.099,
            10605.687,
            10370.3,
            10409.936,
            10936.851,
            10691.898,
            10469.996
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 106.929 ms, heap usage 190.171 MB -> 63.200 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (6187.539 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.565 ms, heap usage 496.809 MB -> 209.299 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1694.868 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 206.398 ms, heap usage 463.177 MB -> 209.398 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (2003.305 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 212.302 ms, heap usage 459.524 MB -> 209.445 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1621.726 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 223.150 ms, heap usage 335.714 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1269.328 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 263.102 ms, heap usage 387.379 MB -> 209.584 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1332.628 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 345.063 ms, heap usage 301.217 MB -> 209.640 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1334.895 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 238.282 ms, heap usage 362.215 MB -> 209.684 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (1301.701 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 225.459 ms, heap usage 382.839 MB -> 209.728 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (1124.225 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 213.168 ms, heap usage 659.827 MB -> 209.777 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (1152.077 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 234.392 ms, heap usage 214.753 MB -> 209.803 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1177.639 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 246.759 ms, heap usage 382.873 MB -> 209.860 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (1111.159 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 227.666 ms, heap usage 245.014 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (1324.366 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 288.359 ms, heap usage 381.212 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (1081.180 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 334.356 ms, heap usage 245.026 MB -> 209.966 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (1126.707 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 282.368 ms, heap usage 648.690 MB -> 146.565 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (10803.413 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 190.381 ms, heap usage 271.593 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10179.670 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 179.607 ms, heap usage 282.591 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (10419.647 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 174.562 ms, heap usage 532.921 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (10493.156 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 231.739 ms, heap usage 237.340 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (10700.524 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 196.441 ms, heap usage 175.972 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (10559.377 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 201.348 ms, heap usage 321.023 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (10551.392 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 159.797 ms, heap usage 285.547 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (10599.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 184.309 ms, heap usage 379.528 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (10405.099 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 206.129 ms, heap usage 236.996 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (10605.687 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 270.183 ms, heap usage 468.914 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (10370.300 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 180.779 ms, heap usage 271.478 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (10409.936 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 198.113 ms, heap usage 433.421 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (10936.851 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 184.181 ms, heap usage 320.384 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (10691.898 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 184.864 ms, heap usage 267.224 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (10469.996 ms) ======\n"
    },
    "rx-scrabble": {
        "times": [
            757.078,
            300.957,
            289.747,
            263.808,
            237.639,
            153.299,
            111.494,
            174.875,
            129.886,
            139.095,
            126.878,
            176.428,
            129.888,
            137.771,
            131.295
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 106.929 ms, heap usage 190.171 MB -> 63.200 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (6187.539 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.565 ms, heap usage 496.809 MB -> 209.299 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1694.868 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 206.398 ms, heap usage 463.177 MB -> 209.398 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (2003.305 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 212.302 ms, heap usage 459.524 MB -> 209.445 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1621.726 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 223.150 ms, heap usage 335.714 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1269.328 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 263.102 ms, heap usage 387.379 MB -> 209.584 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1332.628 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 345.063 ms, heap usage 301.217 MB -> 209.640 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1334.895 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 238.282 ms, heap usage 362.215 MB -> 209.684 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (1301.701 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 225.459 ms, heap usage 382.839 MB -> 209.728 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (1124.225 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 213.168 ms, heap usage 659.827 MB -> 209.777 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (1152.077 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 234.392 ms, heap usage 214.753 MB -> 209.803 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1177.639 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 246.759 ms, heap usage 382.873 MB -> 209.860 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (1111.159 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 227.666 ms, heap usage 245.014 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (1324.366 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 288.359 ms, heap usage 381.212 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (1081.180 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 334.356 ms, heap usage 245.026 MB -> 209.966 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (1126.707 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 282.368 ms, heap usage 648.690 MB -> 146.565 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (10803.413 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 190.381 ms, heap usage 271.593 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10179.670 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 179.607 ms, heap usage 282.591 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (10419.647 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 174.562 ms, heap usage 532.921 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (10493.156 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 231.739 ms, heap usage 237.340 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (10700.524 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 196.441 ms, heap usage 175.972 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (10559.377 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 201.348 ms, heap usage 321.023 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (10551.392 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 159.797 ms, heap usage 285.547 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (10599.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 184.309 ms, heap usage 379.528 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (10405.099 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 206.129 ms, heap usage 236.996 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (10605.687 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 270.183 ms, heap usage 468.914 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (10370.300 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 180.779 ms, heap usage 271.478 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (10409.936 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 198.113 ms, heap usage 433.421 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (10936.851 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 184.181 ms, heap usage 320.384 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (10691.898 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 184.864 ms, heap usage 267.224 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (10469.996 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 330.267 ms, heap usage 463.183 MB -> 97.773 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (757.078 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 171.930 ms, heap usage 250.324 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (300.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 166.858 ms, heap usage 239.025 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (289.747 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 157.624 ms, heap usage 240.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (263.808 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 155.569 ms, heap usage 239.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (237.639 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 151.505 ms, heap usage 240.407 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (153.299 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 163.224 ms, heap usage 240.296 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (111.494 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 169.931 ms, heap usage 240.860 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (174.875 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 164.186 ms, heap usage 240.402 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (129.886 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 182.958 ms, heap usage 240.314 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (139.095 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 135.178 ms, heap usage 240.838 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (126.878 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 160.496 ms, heap usage 240.372 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (176.428 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 153.128 ms, heap usage 240.406 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (129.888 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 157.830 ms, heap usage 240.359 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (137.771 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 134.312 ms, heap usage 240.381 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (131.295 ms) ======\n"
    },
    "db-shootout": {
        "times": [
            12404.39,
            10993.683,
            10563.322,
            11630.058,
            11345.41,
            11007.588,
            10530.413,
            10296.728,
            11729.26,
            10253.674,
            10081.116,
            10607.645,
            11800.789,
            11021.268,
            10453.547
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 106.929 ms, heap usage 190.171 MB -> 63.200 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (6187.539 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.565 ms, heap usage 496.809 MB -> 209.299 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1694.868 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 206.398 ms, heap usage 463.177 MB -> 209.398 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (2003.305 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 212.302 ms, heap usage 459.524 MB -> 209.445 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1621.726 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 223.150 ms, heap usage 335.714 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1269.328 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 263.102 ms, heap usage 387.379 MB -> 209.584 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1332.628 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 345.063 ms, heap usage 301.217 MB -> 209.640 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1334.895 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 238.282 ms, heap usage 362.215 MB -> 209.684 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (1301.701 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 225.459 ms, heap usage 382.839 MB -> 209.728 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (1124.225 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 213.168 ms, heap usage 659.827 MB -> 209.777 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (1152.077 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 234.392 ms, heap usage 214.753 MB -> 209.803 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1177.639 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 246.759 ms, heap usage 382.873 MB -> 209.860 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (1111.159 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 227.666 ms, heap usage 245.014 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (1324.366 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 288.359 ms, heap usage 381.212 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (1081.180 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 334.356 ms, heap usage 245.026 MB -> 209.966 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (1126.707 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 282.368 ms, heap usage 648.690 MB -> 146.565 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (10803.413 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 190.381 ms, heap usage 271.593 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10179.670 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 179.607 ms, heap usage 282.591 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (10419.647 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 174.562 ms, heap usage 532.921 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (10493.156 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 231.739 ms, heap usage 237.340 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (10700.524 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 196.441 ms, heap usage 175.972 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (10559.377 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 201.348 ms, heap usage 321.023 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (10551.392 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 159.797 ms, heap usage 285.547 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (10599.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 184.309 ms, heap usage 379.528 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (10405.099 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 206.129 ms, heap usage 236.996 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (10605.687 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 270.183 ms, heap usage 468.914 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (10370.300 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 180.779 ms, heap usage 271.478 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (10409.936 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 198.113 ms, heap usage 433.421 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (10936.851 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 184.181 ms, heap usage 320.384 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (10691.898 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 184.864 ms, heap usage 267.224 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (10469.996 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 330.267 ms, heap usage 463.183 MB -> 97.773 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (757.078 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 171.930 ms, heap usage 250.324 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (300.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 166.858 ms, heap usage 239.025 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (289.747 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 157.624 ms, heap usage 240.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (263.808 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 155.569 ms, heap usage 239.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (237.639 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 151.505 ms, heap usage 240.407 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (153.299 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 163.224 ms, heap usage 240.296 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (111.494 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 169.931 ms, heap usage 240.860 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (174.875 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 164.186 ms, heap usage 240.402 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (129.886 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 182.958 ms, heap usage 240.314 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (139.095 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 135.178 ms, heap usage 240.838 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (126.878 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 160.496 ms, heap usage 240.372 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (176.428 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 153.128 ms, heap usage 240.406 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (129.888 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 157.830 ms, heap usage 240.359 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (137.771 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 134.312 ms, heap usage 240.381 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (131.295 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 146.262 ms, heap usage 208.123 MB -> 100.661 MB.\n====== db-shootout (database) [default], iteration 0 completed (12404.390 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 178.241 ms, heap usage 254.860 MB -> 167.482 MB.\n====== db-shootout (database) [default], iteration 1 completed (10993.683 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 166.816 ms, heap usage 333.565 MB -> 167.194 MB.\n====== db-shootout (database) [default], iteration 2 completed (10563.322 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 209.258 ms, heap usage 262.956 MB -> 180.567 MB.\n====== db-shootout (database) [default], iteration 3 completed (11630.058 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 178.763 ms, heap usage 202.895 MB -> 177.576 MB.\n====== db-shootout (database) [default], iteration 4 completed (11345.410 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 200.120 ms, heap usage 253.326 MB -> 180.580 MB.\n====== db-shootout (database) [default], iteration 5 completed (11007.588 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 212.320 ms, heap usage 322.388 MB -> 181.162 MB.\n====== db-shootout (database) [default], iteration 6 completed (10530.413 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 153.414 ms, heap usage 259.750 MB -> 181.761 MB.\n====== db-shootout (database) [default], iteration 7 completed (10296.728 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 165.861 ms, heap usage 335.430 MB -> 180.416 MB.\n====== db-shootout (database) [default], iteration 8 completed (11729.260 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 155.114 ms, heap usage 217.493 MB -> 181.582 MB.\n====== db-shootout (database) [default], iteration 9 completed (10253.674 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 256.185 ms, heap usage 382.092 MB -> 181.428 MB.\n====== db-shootout (database) [default], iteration 10 completed (10081.116 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 228.461 ms, heap usage 364.449 MB -> 179.328 MB.\n====== db-shootout (database) [default], iteration 11 completed (10607.645 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 160.768 ms, heap usage 217.618 MB -> 178.374 MB.\n====== db-shootout (database) [default], iteration 12 completed (11800.789 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 162.350 ms, heap usage 327.085 MB -> 176.518 MB.\n====== db-shootout (database) [default], iteration 13 completed (11021.268 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 164.609 ms, heap usage 345.493 MB -> 179.401 MB.\n====== db-shootout (database) [default], iteration 14 completed (10453.547 ms) ======\n"
    },
    "finagle-http": {
        "times": [
            23082.922,
            10425.413,
            5413.474,
            4292.558,
            4982.604,
            4510.982,
            4583.46,
            4231.741,
            4629.532,
            4479.436,
            4595.146,
            4513.085,
            4421.906,
            4772.345,
            4171.305
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 106.929 ms, heap usage 190.171 MB -> 63.200 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (6187.539 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.565 ms, heap usage 496.809 MB -> 209.299 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1694.868 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 206.398 ms, heap usage 463.177 MB -> 209.398 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (2003.305 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 212.302 ms, heap usage 459.524 MB -> 209.445 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1621.726 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 223.150 ms, heap usage 335.714 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1269.328 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 263.102 ms, heap usage 387.379 MB -> 209.584 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1332.628 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 345.063 ms, heap usage 301.217 MB -> 209.640 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1334.895 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 238.282 ms, heap usage 362.215 MB -> 209.684 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (1301.701 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 225.459 ms, heap usage 382.839 MB -> 209.728 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (1124.225 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 213.168 ms, heap usage 659.827 MB -> 209.777 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (1152.077 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 234.392 ms, heap usage 214.753 MB -> 209.803 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1177.639 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 246.759 ms, heap usage 382.873 MB -> 209.860 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (1111.159 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 227.666 ms, heap usage 245.014 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (1324.366 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 288.359 ms, heap usage 381.212 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (1081.180 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 334.356 ms, heap usage 245.026 MB -> 209.966 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (1126.707 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 282.368 ms, heap usage 648.690 MB -> 146.565 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (10803.413 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 190.381 ms, heap usage 271.593 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10179.670 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 179.607 ms, heap usage 282.591 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (10419.647 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 174.562 ms, heap usage 532.921 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (10493.156 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 231.739 ms, heap usage 237.340 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (10700.524 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 196.441 ms, heap usage 175.972 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (10559.377 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 201.348 ms, heap usage 321.023 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (10551.392 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 159.797 ms, heap usage 285.547 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (10599.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 184.309 ms, heap usage 379.528 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (10405.099 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 206.129 ms, heap usage 236.996 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (10605.687 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 270.183 ms, heap usage 468.914 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (10370.300 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 180.779 ms, heap usage 271.478 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (10409.936 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 198.113 ms, heap usage 433.421 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (10936.851 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 184.181 ms, heap usage 320.384 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (10691.898 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 184.864 ms, heap usage 267.224 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (10469.996 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 330.267 ms, heap usage 463.183 MB -> 97.773 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (757.078 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 171.930 ms, heap usage 250.324 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (300.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 166.858 ms, heap usage 239.025 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (289.747 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 157.624 ms, heap usage 240.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (263.808 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 155.569 ms, heap usage 239.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (237.639 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 151.505 ms, heap usage 240.407 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (153.299 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 163.224 ms, heap usage 240.296 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (111.494 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 169.931 ms, heap usage 240.860 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (174.875 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 164.186 ms, heap usage 240.402 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (129.886 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 182.958 ms, heap usage 240.314 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (139.095 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 135.178 ms, heap usage 240.838 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (126.878 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 160.496 ms, heap usage 240.372 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (176.428 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 153.128 ms, heap usage 240.406 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (129.888 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 157.830 ms, heap usage 240.359 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (137.771 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 134.312 ms, heap usage 240.381 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (131.295 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 146.262 ms, heap usage 208.123 MB -> 100.661 MB.\n====== db-shootout (database) [default], iteration 0 completed (12404.390 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 178.241 ms, heap usage 254.860 MB -> 167.482 MB.\n====== db-shootout (database) [default], iteration 1 completed (10993.683 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 166.816 ms, heap usage 333.565 MB -> 167.194 MB.\n====== db-shootout (database) [default], iteration 2 completed (10563.322 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 209.258 ms, heap usage 262.956 MB -> 180.567 MB.\n====== db-shootout (database) [default], iteration 3 completed (11630.058 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 178.763 ms, heap usage 202.895 MB -> 177.576 MB.\n====== db-shootout (database) [default], iteration 4 completed (11345.410 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 200.120 ms, heap usage 253.326 MB -> 180.580 MB.\n====== db-shootout (database) [default], iteration 5 completed (11007.588 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 212.320 ms, heap usage 322.388 MB -> 181.162 MB.\n====== db-shootout (database) [default], iteration 6 completed (10530.413 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 153.414 ms, heap usage 259.750 MB -> 181.761 MB.\n====== db-shootout (database) [default], iteration 7 completed (10296.728 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 165.861 ms, heap usage 335.430 MB -> 180.416 MB.\n====== db-shootout (database) [default], iteration 8 completed (11729.260 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 155.114 ms, heap usage 217.493 MB -> 181.582 MB.\n====== db-shootout (database) [default], iteration 9 completed (10253.674 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 256.185 ms, heap usage 382.092 MB -> 181.428 MB.\n====== db-shootout (database) [default], iteration 10 completed (10081.116 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 228.461 ms, heap usage 364.449 MB -> 179.328 MB.\n====== db-shootout (database) [default], iteration 11 completed (10607.645 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 160.768 ms, heap usage 217.618 MB -> 178.374 MB.\n====== db-shootout (database) [default], iteration 12 completed (11800.789 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 162.350 ms, heap usage 327.085 MB -> 176.518 MB.\n====== db-shootout (database) [default], iteration 13 completed (11021.268 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 164.609 ms, heap usage 345.493 MB -> 179.401 MB.\n====== db-shootout (database) [default], iteration 14 completed (10453.547 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39417 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 171.054 ms, heap usage 764.680 MB -> 111.950 MB.\n====== finagle-http (web) [default], iteration 0 completed (23082.922 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 175.625 ms, heap usage 257.530 MB -> 113.944 MB.\n====== finagle-http (web) [default], iteration 1 completed (10425.413 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 192.360 ms, heap usage 142.930 MB -> 114.648 MB.\n====== finagle-http (web) [default], iteration 2 completed (5413.474 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 168.536 ms, heap usage 136.804 MB -> 114.675 MB.\n====== finagle-http (web) [default], iteration 3 completed (4292.558 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 161.104 ms, heap usage 135.231 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 4 completed (4982.604 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 187.983 ms, heap usage 137.549 MB -> 114.682 MB.\n====== finagle-http (web) [default], iteration 5 completed (4510.982 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 160.069 ms, heap usage 135.336 MB -> 114.684 MB.\n====== finagle-http (web) [default], iteration 6 completed (4583.460 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 155.528 ms, heap usage 134.320 MB -> 114.694 MB.\n====== finagle-http (web) [default], iteration 7 completed (4231.741 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 151.912 ms, heap usage 134.424 MB -> 114.757 MB.\n====== finagle-http (web) [default], iteration 8 completed (4629.532 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 135.249 MB -> 114.771 MB.\n====== finagle-http (web) [default], iteration 9 completed (4479.436 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 133.597 ms, heap usage 134.857 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 10 completed (4595.146 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 153.866 ms, heap usage 134.205 MB -> 114.789 MB.\n====== finagle-http (web) [default], iteration 11 completed (4513.085 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 139.530 ms, heap usage 133.233 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 12 completed (4421.906 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 151.855 ms, heap usage 136.255 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 13 completed (4772.345 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 148.653 ms, heap usage 134.209 MB -> 114.759 MB.\n====== finagle-http (web) [default], iteration 14 completed (4171.305 ms) ======\n"
    },
    "reactors": {
        "times": [
            20016.203,
            15243.671,
            15173.108,
            14846.662,
            14947.932,
            15877.645,
            15040.873,
            15305.246,
            14977.348,
            15036.507,
            15067.96,
            14742.743,
            14916.835,
            14721.44,
            16424.038
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 106.929 ms, heap usage 190.171 MB -> 63.200 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (6187.539 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.565 ms, heap usage 496.809 MB -> 209.299 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1694.868 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 206.398 ms, heap usage 463.177 MB -> 209.398 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (2003.305 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 212.302 ms, heap usage 459.524 MB -> 209.445 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1621.726 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 223.150 ms, heap usage 335.714 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1269.328 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 263.102 ms, heap usage 387.379 MB -> 209.584 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1332.628 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 345.063 ms, heap usage 301.217 MB -> 209.640 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1334.895 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 238.282 ms, heap usage 362.215 MB -> 209.684 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (1301.701 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 225.459 ms, heap usage 382.839 MB -> 209.728 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (1124.225 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 213.168 ms, heap usage 659.827 MB -> 209.777 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (1152.077 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 234.392 ms, heap usage 214.753 MB -> 209.803 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1177.639 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 246.759 ms, heap usage 382.873 MB -> 209.860 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (1111.159 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 227.666 ms, heap usage 245.014 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (1324.366 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 288.359 ms, heap usage 381.212 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (1081.180 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 334.356 ms, heap usage 245.026 MB -> 209.966 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (1126.707 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 282.368 ms, heap usage 648.690 MB -> 146.565 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (10803.413 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 190.381 ms, heap usage 271.593 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10179.670 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 179.607 ms, heap usage 282.591 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (10419.647 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 174.562 ms, heap usage 532.921 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (10493.156 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 231.739 ms, heap usage 237.340 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (10700.524 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 196.441 ms, heap usage 175.972 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (10559.377 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 201.348 ms, heap usage 321.023 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (10551.392 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 159.797 ms, heap usage 285.547 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (10599.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 184.309 ms, heap usage 379.528 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (10405.099 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 206.129 ms, heap usage 236.996 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (10605.687 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 270.183 ms, heap usage 468.914 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (10370.300 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 180.779 ms, heap usage 271.478 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (10409.936 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 198.113 ms, heap usage 433.421 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (10936.851 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 184.181 ms, heap usage 320.384 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (10691.898 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 184.864 ms, heap usage 267.224 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (10469.996 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 330.267 ms, heap usage 463.183 MB -> 97.773 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (757.078 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 171.930 ms, heap usage 250.324 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (300.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 166.858 ms, heap usage 239.025 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (289.747 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 157.624 ms, heap usage 240.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (263.808 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 155.569 ms, heap usage 239.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (237.639 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 151.505 ms, heap usage 240.407 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (153.299 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 163.224 ms, heap usage 240.296 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (111.494 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 169.931 ms, heap usage 240.860 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (174.875 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 164.186 ms, heap usage 240.402 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (129.886 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 182.958 ms, heap usage 240.314 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (139.095 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 135.178 ms, heap usage 240.838 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (126.878 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 160.496 ms, heap usage 240.372 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (176.428 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 153.128 ms, heap usage 240.406 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (129.888 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 157.830 ms, heap usage 240.359 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (137.771 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 134.312 ms, heap usage 240.381 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (131.295 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 146.262 ms, heap usage 208.123 MB -> 100.661 MB.\n====== db-shootout (database) [default], iteration 0 completed (12404.390 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 178.241 ms, heap usage 254.860 MB -> 167.482 MB.\n====== db-shootout (database) [default], iteration 1 completed (10993.683 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 166.816 ms, heap usage 333.565 MB -> 167.194 MB.\n====== db-shootout (database) [default], iteration 2 completed (10563.322 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 209.258 ms, heap usage 262.956 MB -> 180.567 MB.\n====== db-shootout (database) [default], iteration 3 completed (11630.058 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 178.763 ms, heap usage 202.895 MB -> 177.576 MB.\n====== db-shootout (database) [default], iteration 4 completed (11345.410 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 200.120 ms, heap usage 253.326 MB -> 180.580 MB.\n====== db-shootout (database) [default], iteration 5 completed (11007.588 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 212.320 ms, heap usage 322.388 MB -> 181.162 MB.\n====== db-shootout (database) [default], iteration 6 completed (10530.413 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 153.414 ms, heap usage 259.750 MB -> 181.761 MB.\n====== db-shootout (database) [default], iteration 7 completed (10296.728 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 165.861 ms, heap usage 335.430 MB -> 180.416 MB.\n====== db-shootout (database) [default], iteration 8 completed (11729.260 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 155.114 ms, heap usage 217.493 MB -> 181.582 MB.\n====== db-shootout (database) [default], iteration 9 completed (10253.674 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 256.185 ms, heap usage 382.092 MB -> 181.428 MB.\n====== db-shootout (database) [default], iteration 10 completed (10081.116 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 228.461 ms, heap usage 364.449 MB -> 179.328 MB.\n====== db-shootout (database) [default], iteration 11 completed (10607.645 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 160.768 ms, heap usage 217.618 MB -> 178.374 MB.\n====== db-shootout (database) [default], iteration 12 completed (11800.789 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 162.350 ms, heap usage 327.085 MB -> 176.518 MB.\n====== db-shootout (database) [default], iteration 13 completed (11021.268 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 164.609 ms, heap usage 345.493 MB -> 179.401 MB.\n====== db-shootout (database) [default], iteration 14 completed (10453.547 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39417 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 171.054 ms, heap usage 764.680 MB -> 111.950 MB.\n====== finagle-http (web) [default], iteration 0 completed (23082.922 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 175.625 ms, heap usage 257.530 MB -> 113.944 MB.\n====== finagle-http (web) [default], iteration 1 completed (10425.413 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 192.360 ms, heap usage 142.930 MB -> 114.648 MB.\n====== finagle-http (web) [default], iteration 2 completed (5413.474 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 168.536 ms, heap usage 136.804 MB -> 114.675 MB.\n====== finagle-http (web) [default], iteration 3 completed (4292.558 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 161.104 ms, heap usage 135.231 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 4 completed (4982.604 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 187.983 ms, heap usage 137.549 MB -> 114.682 MB.\n====== finagle-http (web) [default], iteration 5 completed (4510.982 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 160.069 ms, heap usage 135.336 MB -> 114.684 MB.\n====== finagle-http (web) [default], iteration 6 completed (4583.460 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 155.528 ms, heap usage 134.320 MB -> 114.694 MB.\n====== finagle-http (web) [default], iteration 7 completed (4231.741 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 151.912 ms, heap usage 134.424 MB -> 114.757 MB.\n====== finagle-http (web) [default], iteration 8 completed (4629.532 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 135.249 MB -> 114.771 MB.\n====== finagle-http (web) [default], iteration 9 completed (4479.436 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 133.597 ms, heap usage 134.857 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 10 completed (4595.146 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 153.866 ms, heap usage 134.205 MB -> 114.789 MB.\n====== finagle-http (web) [default], iteration 11 completed (4513.085 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 139.530 ms, heap usage 133.233 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 12 completed (4421.906 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 151.855 ms, heap usage 136.255 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 13 completed (4772.345 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 148.653 ms, heap usage 134.209 MB -> 114.759 MB.\n====== finagle-http (web) [default], iteration 14 completed (4171.305 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 171.810 ms, heap usage 149.802 MB -> 115.854 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (20016.203 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 135.623 ms, heap usage 194.455 MB -> 117.112 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (15243.671 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 145.689 ms, heap usage 684.918 MB -> 116.540 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (15173.108 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 197.548 ms, heap usage 691.507 MB -> 116.560 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (14846.662 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 198.578 ms, heap usage 198.756 MB -> 114.731 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (14947.932 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 173.402 ms, heap usage 744.176 MB -> 114.712 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (15877.645 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 219.679 ms, heap usage 158.389 MB -> 113.375 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (15040.873 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 198.390 ms, heap usage 668.182 MB -> 113.378 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (15305.246 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 153.299 ms, heap usage 584.491 MB -> 113.393 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (14977.348 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 146.991 ms, heap usage 750.095 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (15036.507 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 159.673 ms, heap usage 685.262 MB -> 113.386 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (15067.960 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 213.581 ms, heap usage 705.178 MB -> 113.406 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14742.743 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 181.711 ms, heap usage 605.347 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (14916.835 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.081 ms, heap usage 172.060 MB -> 113.404 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (14721.440 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 174.697 ms, heap usage 589.634 MB -> 113.388 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (16424.038 ms) ======\n"
    },
    "dec-tree": {
        "times": [
            14991.979,
            3089.06,
            2681.55,
            2591.133,
            2299.103,
            2445.013,
            2371.474,
            2473.615,
            2064.9,
            2257.468,
            2170.313,
            2191.906,
            2138.269,
            2049.41,
            2040.082
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 106.929 ms, heap usage 190.171 MB -> 63.200 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (6187.539 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.565 ms, heap usage 496.809 MB -> 209.299 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1694.868 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 206.398 ms, heap usage 463.177 MB -> 209.398 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (2003.305 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 212.302 ms, heap usage 459.524 MB -> 209.445 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1621.726 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 223.150 ms, heap usage 335.714 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1269.328 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 263.102 ms, heap usage 387.379 MB -> 209.584 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1332.628 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 345.063 ms, heap usage 301.217 MB -> 209.640 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1334.895 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 238.282 ms, heap usage 362.215 MB -> 209.684 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (1301.701 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 225.459 ms, heap usage 382.839 MB -> 209.728 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (1124.225 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 213.168 ms, heap usage 659.827 MB -> 209.777 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (1152.077 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 234.392 ms, heap usage 214.753 MB -> 209.803 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1177.639 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 246.759 ms, heap usage 382.873 MB -> 209.860 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (1111.159 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 227.666 ms, heap usage 245.014 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (1324.366 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 288.359 ms, heap usage 381.212 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (1081.180 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 334.356 ms, heap usage 245.026 MB -> 209.966 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (1126.707 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 282.368 ms, heap usage 648.690 MB -> 146.565 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (10803.413 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 190.381 ms, heap usage 271.593 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10179.670 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 179.607 ms, heap usage 282.591 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (10419.647 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 174.562 ms, heap usage 532.921 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (10493.156 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 231.739 ms, heap usage 237.340 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (10700.524 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 196.441 ms, heap usage 175.972 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (10559.377 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 201.348 ms, heap usage 321.023 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (10551.392 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 159.797 ms, heap usage 285.547 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (10599.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 184.309 ms, heap usage 379.528 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (10405.099 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 206.129 ms, heap usage 236.996 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (10605.687 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 270.183 ms, heap usage 468.914 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (10370.300 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 180.779 ms, heap usage 271.478 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (10409.936 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 198.113 ms, heap usage 433.421 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (10936.851 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 184.181 ms, heap usage 320.384 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (10691.898 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 184.864 ms, heap usage 267.224 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (10469.996 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 330.267 ms, heap usage 463.183 MB -> 97.773 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (757.078 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 171.930 ms, heap usage 250.324 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (300.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 166.858 ms, heap usage 239.025 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (289.747 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 157.624 ms, heap usage 240.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (263.808 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 155.569 ms, heap usage 239.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (237.639 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 151.505 ms, heap usage 240.407 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (153.299 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 163.224 ms, heap usage 240.296 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (111.494 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 169.931 ms, heap usage 240.860 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (174.875 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 164.186 ms, heap usage 240.402 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (129.886 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 182.958 ms, heap usage 240.314 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (139.095 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 135.178 ms, heap usage 240.838 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (126.878 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 160.496 ms, heap usage 240.372 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (176.428 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 153.128 ms, heap usage 240.406 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (129.888 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 157.830 ms, heap usage 240.359 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (137.771 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 134.312 ms, heap usage 240.381 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (131.295 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 146.262 ms, heap usage 208.123 MB -> 100.661 MB.\n====== db-shootout (database) [default], iteration 0 completed (12404.390 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 178.241 ms, heap usage 254.860 MB -> 167.482 MB.\n====== db-shootout (database) [default], iteration 1 completed (10993.683 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 166.816 ms, heap usage 333.565 MB -> 167.194 MB.\n====== db-shootout (database) [default], iteration 2 completed (10563.322 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 209.258 ms, heap usage 262.956 MB -> 180.567 MB.\n====== db-shootout (database) [default], iteration 3 completed (11630.058 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 178.763 ms, heap usage 202.895 MB -> 177.576 MB.\n====== db-shootout (database) [default], iteration 4 completed (11345.410 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 200.120 ms, heap usage 253.326 MB -> 180.580 MB.\n====== db-shootout (database) [default], iteration 5 completed (11007.588 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 212.320 ms, heap usage 322.388 MB -> 181.162 MB.\n====== db-shootout (database) [default], iteration 6 completed (10530.413 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 153.414 ms, heap usage 259.750 MB -> 181.761 MB.\n====== db-shootout (database) [default], iteration 7 completed (10296.728 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 165.861 ms, heap usage 335.430 MB -> 180.416 MB.\n====== db-shootout (database) [default], iteration 8 completed (11729.260 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 155.114 ms, heap usage 217.493 MB -> 181.582 MB.\n====== db-shootout (database) [default], iteration 9 completed (10253.674 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 256.185 ms, heap usage 382.092 MB -> 181.428 MB.\n====== db-shootout (database) [default], iteration 10 completed (10081.116 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 228.461 ms, heap usage 364.449 MB -> 179.328 MB.\n====== db-shootout (database) [default], iteration 11 completed (10607.645 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 160.768 ms, heap usage 217.618 MB -> 178.374 MB.\n====== db-shootout (database) [default], iteration 12 completed (11800.789 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 162.350 ms, heap usage 327.085 MB -> 176.518 MB.\n====== db-shootout (database) [default], iteration 13 completed (11021.268 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 164.609 ms, heap usage 345.493 MB -> 179.401 MB.\n====== db-shootout (database) [default], iteration 14 completed (10453.547 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39417 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 171.054 ms, heap usage 764.680 MB -> 111.950 MB.\n====== finagle-http (web) [default], iteration 0 completed (23082.922 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 175.625 ms, heap usage 257.530 MB -> 113.944 MB.\n====== finagle-http (web) [default], iteration 1 completed (10425.413 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 192.360 ms, heap usage 142.930 MB -> 114.648 MB.\n====== finagle-http (web) [default], iteration 2 completed (5413.474 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 168.536 ms, heap usage 136.804 MB -> 114.675 MB.\n====== finagle-http (web) [default], iteration 3 completed (4292.558 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 161.104 ms, heap usage 135.231 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 4 completed (4982.604 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 187.983 ms, heap usage 137.549 MB -> 114.682 MB.\n====== finagle-http (web) [default], iteration 5 completed (4510.982 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 160.069 ms, heap usage 135.336 MB -> 114.684 MB.\n====== finagle-http (web) [default], iteration 6 completed (4583.460 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 155.528 ms, heap usage 134.320 MB -> 114.694 MB.\n====== finagle-http (web) [default], iteration 7 completed (4231.741 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 151.912 ms, heap usage 134.424 MB -> 114.757 MB.\n====== finagle-http (web) [default], iteration 8 completed (4629.532 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 135.249 MB -> 114.771 MB.\n====== finagle-http (web) [default], iteration 9 completed (4479.436 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 133.597 ms, heap usage 134.857 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 10 completed (4595.146 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 153.866 ms, heap usage 134.205 MB -> 114.789 MB.\n====== finagle-http (web) [default], iteration 11 completed (4513.085 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 139.530 ms, heap usage 133.233 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 12 completed (4421.906 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 151.855 ms, heap usage 136.255 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 13 completed (4772.345 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 148.653 ms, heap usage 134.209 MB -> 114.759 MB.\n====== finagle-http (web) [default], iteration 14 completed (4171.305 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 171.810 ms, heap usage 149.802 MB -> 115.854 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (20016.203 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 135.623 ms, heap usage 194.455 MB -> 117.112 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (15243.671 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 145.689 ms, heap usage 684.918 MB -> 116.540 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (15173.108 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 197.548 ms, heap usage 691.507 MB -> 116.560 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (14846.662 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 198.578 ms, heap usage 198.756 MB -> 114.731 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (14947.932 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 173.402 ms, heap usage 744.176 MB -> 114.712 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (15877.645 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 219.679 ms, heap usage 158.389 MB -> 113.375 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (15040.873 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 198.390 ms, heap usage 668.182 MB -> 113.378 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (15305.246 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 153.299 ms, heap usage 584.491 MB -> 113.393 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (14977.348 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 146.991 ms, heap usage 750.095 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (15036.507 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 159.673 ms, heap usage 685.262 MB -> 113.386 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (15067.960 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 213.581 ms, heap usage 705.178 MB -> 113.406 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14742.743 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 181.711 ms, heap usage 605.347 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (14916.835 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.081 ms, heap usage 172.060 MB -> 113.404 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (14721.440 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 174.697 ms, heap usage 589.634 MB -> 113.388 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (16424.038 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 186.372 ms, heap usage 735.762 MB -> 126.275 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (14991.979 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 290.688 ms, heap usage 254.907 MB -> 157.853 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3089.060 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 204.835 ms, heap usage 333.769 MB -> 185.965 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2681.550 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 182.933 ms, heap usage 200.364 MB -> 157.821 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (2591.133 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 179.529 ms, heap usage 277.762 MB -> 158.670 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (2299.103 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 200.098 ms, heap usage 210.632 MB -> 158.097 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (2445.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 190.419 ms, heap usage 276.460 MB -> 159.088 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (2371.474 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 174.626 ms, heap usage 222.237 MB -> 186.538 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (2473.615 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 214.512 ms, heap usage 439.245 MB -> 159.900 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (2064.900 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 168.698 ms, heap usage 446.054 MB -> 159.541 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (2257.468 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 237.408 ms, heap usage 234.506 MB -> 186.995 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (2170.313 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 209.799 ms, heap usage 418.506 MB -> 159.781 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (2191.906 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 229.458 ms, heap usage 480.459 MB -> 159.936 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (2138.269 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 211.897 ms, heap usage 466.689 MB -> 160.720 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (2049.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 189.352 ms, heap usage 354.044 MB -> 160.155 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (2040.082 ms) ======\n"
    },
    "scala-stm-bench7": {
        "times": [
            3547.921,
            2410.653,
            2066.546,
            1829.661,
            1893.863,
            1895.94,
            1952.977,
            1795.886,
            1976.848,
            1874.67,
            1809.866,
            2027.898,
            1977.936,
            2141.642,
            1865.933
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 106.929 ms, heap usage 190.171 MB -> 63.200 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (6187.539 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.565 ms, heap usage 496.809 MB -> 209.299 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1694.868 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 206.398 ms, heap usage 463.177 MB -> 209.398 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (2003.305 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 212.302 ms, heap usage 459.524 MB -> 209.445 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1621.726 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 223.150 ms, heap usage 335.714 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1269.328 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 263.102 ms, heap usage 387.379 MB -> 209.584 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1332.628 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 345.063 ms, heap usage 301.217 MB -> 209.640 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1334.895 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 238.282 ms, heap usage 362.215 MB -> 209.684 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (1301.701 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 225.459 ms, heap usage 382.839 MB -> 209.728 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (1124.225 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 213.168 ms, heap usage 659.827 MB -> 209.777 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (1152.077 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 234.392 ms, heap usage 214.753 MB -> 209.803 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1177.639 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 246.759 ms, heap usage 382.873 MB -> 209.860 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (1111.159 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 227.666 ms, heap usage 245.014 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (1324.366 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 288.359 ms, heap usage 381.212 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (1081.180 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 334.356 ms, heap usage 245.026 MB -> 209.966 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (1126.707 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 282.368 ms, heap usage 648.690 MB -> 146.565 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (10803.413 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 190.381 ms, heap usage 271.593 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10179.670 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 179.607 ms, heap usage 282.591 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (10419.647 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 174.562 ms, heap usage 532.921 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (10493.156 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 231.739 ms, heap usage 237.340 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (10700.524 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 196.441 ms, heap usage 175.972 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (10559.377 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 201.348 ms, heap usage 321.023 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (10551.392 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 159.797 ms, heap usage 285.547 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (10599.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 184.309 ms, heap usage 379.528 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (10405.099 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 206.129 ms, heap usage 236.996 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (10605.687 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 270.183 ms, heap usage 468.914 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (10370.300 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 180.779 ms, heap usage 271.478 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (10409.936 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 198.113 ms, heap usage 433.421 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (10936.851 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 184.181 ms, heap usage 320.384 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (10691.898 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 184.864 ms, heap usage 267.224 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (10469.996 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 330.267 ms, heap usage 463.183 MB -> 97.773 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (757.078 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 171.930 ms, heap usage 250.324 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (300.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 166.858 ms, heap usage 239.025 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (289.747 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 157.624 ms, heap usage 240.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (263.808 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 155.569 ms, heap usage 239.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (237.639 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 151.505 ms, heap usage 240.407 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (153.299 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 163.224 ms, heap usage 240.296 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (111.494 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 169.931 ms, heap usage 240.860 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (174.875 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 164.186 ms, heap usage 240.402 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (129.886 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 182.958 ms, heap usage 240.314 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (139.095 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 135.178 ms, heap usage 240.838 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (126.878 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 160.496 ms, heap usage 240.372 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (176.428 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 153.128 ms, heap usage 240.406 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (129.888 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 157.830 ms, heap usage 240.359 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (137.771 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 134.312 ms, heap usage 240.381 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (131.295 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 146.262 ms, heap usage 208.123 MB -> 100.661 MB.\n====== db-shootout (database) [default], iteration 0 completed (12404.390 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 178.241 ms, heap usage 254.860 MB -> 167.482 MB.\n====== db-shootout (database) [default], iteration 1 completed (10993.683 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 166.816 ms, heap usage 333.565 MB -> 167.194 MB.\n====== db-shootout (database) [default], iteration 2 completed (10563.322 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 209.258 ms, heap usage 262.956 MB -> 180.567 MB.\n====== db-shootout (database) [default], iteration 3 completed (11630.058 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 178.763 ms, heap usage 202.895 MB -> 177.576 MB.\n====== db-shootout (database) [default], iteration 4 completed (11345.410 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 200.120 ms, heap usage 253.326 MB -> 180.580 MB.\n====== db-shootout (database) [default], iteration 5 completed (11007.588 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 212.320 ms, heap usage 322.388 MB -> 181.162 MB.\n====== db-shootout (database) [default], iteration 6 completed (10530.413 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 153.414 ms, heap usage 259.750 MB -> 181.761 MB.\n====== db-shootout (database) [default], iteration 7 completed (10296.728 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 165.861 ms, heap usage 335.430 MB -> 180.416 MB.\n====== db-shootout (database) [default], iteration 8 completed (11729.260 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 155.114 ms, heap usage 217.493 MB -> 181.582 MB.\n====== db-shootout (database) [default], iteration 9 completed (10253.674 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 256.185 ms, heap usage 382.092 MB -> 181.428 MB.\n====== db-shootout (database) [default], iteration 10 completed (10081.116 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 228.461 ms, heap usage 364.449 MB -> 179.328 MB.\n====== db-shootout (database) [default], iteration 11 completed (10607.645 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 160.768 ms, heap usage 217.618 MB -> 178.374 MB.\n====== db-shootout (database) [default], iteration 12 completed (11800.789 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 162.350 ms, heap usage 327.085 MB -> 176.518 MB.\n====== db-shootout (database) [default], iteration 13 completed (11021.268 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 164.609 ms, heap usage 345.493 MB -> 179.401 MB.\n====== db-shootout (database) [default], iteration 14 completed (10453.547 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39417 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 171.054 ms, heap usage 764.680 MB -> 111.950 MB.\n====== finagle-http (web) [default], iteration 0 completed (23082.922 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 175.625 ms, heap usage 257.530 MB -> 113.944 MB.\n====== finagle-http (web) [default], iteration 1 completed (10425.413 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 192.360 ms, heap usage 142.930 MB -> 114.648 MB.\n====== finagle-http (web) [default], iteration 2 completed (5413.474 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 168.536 ms, heap usage 136.804 MB -> 114.675 MB.\n====== finagle-http (web) [default], iteration 3 completed (4292.558 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 161.104 ms, heap usage 135.231 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 4 completed (4982.604 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 187.983 ms, heap usage 137.549 MB -> 114.682 MB.\n====== finagle-http (web) [default], iteration 5 completed (4510.982 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 160.069 ms, heap usage 135.336 MB -> 114.684 MB.\n====== finagle-http (web) [default], iteration 6 completed (4583.460 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 155.528 ms, heap usage 134.320 MB -> 114.694 MB.\n====== finagle-http (web) [default], iteration 7 completed (4231.741 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 151.912 ms, heap usage 134.424 MB -> 114.757 MB.\n====== finagle-http (web) [default], iteration 8 completed (4629.532 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 135.249 MB -> 114.771 MB.\n====== finagle-http (web) [default], iteration 9 completed (4479.436 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 133.597 ms, heap usage 134.857 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 10 completed (4595.146 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 153.866 ms, heap usage 134.205 MB -> 114.789 MB.\n====== finagle-http (web) [default], iteration 11 completed (4513.085 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 139.530 ms, heap usage 133.233 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 12 completed (4421.906 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 151.855 ms, heap usage 136.255 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 13 completed (4772.345 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 148.653 ms, heap usage 134.209 MB -> 114.759 MB.\n====== finagle-http (web) [default], iteration 14 completed (4171.305 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 171.810 ms, heap usage 149.802 MB -> 115.854 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (20016.203 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 135.623 ms, heap usage 194.455 MB -> 117.112 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (15243.671 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 145.689 ms, heap usage 684.918 MB -> 116.540 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (15173.108 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 197.548 ms, heap usage 691.507 MB -> 116.560 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (14846.662 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 198.578 ms, heap usage 198.756 MB -> 114.731 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (14947.932 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 173.402 ms, heap usage 744.176 MB -> 114.712 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (15877.645 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 219.679 ms, heap usage 158.389 MB -> 113.375 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (15040.873 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 198.390 ms, heap usage 668.182 MB -> 113.378 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (15305.246 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 153.299 ms, heap usage 584.491 MB -> 113.393 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (14977.348 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 146.991 ms, heap usage 750.095 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (15036.507 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 159.673 ms, heap usage 685.262 MB -> 113.386 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (15067.960 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 213.581 ms, heap usage 705.178 MB -> 113.406 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14742.743 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 181.711 ms, heap usage 605.347 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (14916.835 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.081 ms, heap usage 172.060 MB -> 113.404 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (14721.440 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 174.697 ms, heap usage 589.634 MB -> 113.388 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (16424.038 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 186.372 ms, heap usage 735.762 MB -> 126.275 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (14991.979 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 290.688 ms, heap usage 254.907 MB -> 157.853 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3089.060 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 204.835 ms, heap usage 333.769 MB -> 185.965 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2681.550 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 182.933 ms, heap usage 200.364 MB -> 157.821 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (2591.133 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 179.529 ms, heap usage 277.762 MB -> 158.670 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (2299.103 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 200.098 ms, heap usage 210.632 MB -> 158.097 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (2445.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 190.419 ms, heap usage 276.460 MB -> 159.088 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (2371.474 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 174.626 ms, heap usage 222.237 MB -> 186.538 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (2473.615 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 214.512 ms, heap usage 439.245 MB -> 159.900 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (2064.900 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 168.698 ms, heap usage 446.054 MB -> 159.541 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (2257.468 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 237.408 ms, heap usage 234.506 MB -> 186.995 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (2170.313 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 209.799 ms, heap usage 418.506 MB -> 159.781 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (2191.906 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 229.458 ms, heap usage 480.459 MB -> 159.936 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (2138.269 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 211.897 ms, heap usage 466.689 MB -> 160.720 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (2049.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 189.352 ms, heap usage 354.044 MB -> 160.155 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (2040.082 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 194.700 ms, heap usage 295.642 MB -> 143.293 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 56\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 24\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 703\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 11\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 14\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 24\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 12\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 47.51 op/s (47.51 op/s including failed)\nElapsed time: 0.84 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3547.921 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 248.165 ms, heap usage 503.852 MB -> 141.700 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 679\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 703\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 14\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 24\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 12\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 108.11 op/s (108.11 op/s including failed)\nElapsed time: 0.74 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2410.653 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 181.277 ms, heap usage 391.576 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 666\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 703\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 11\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 14\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 24\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 12\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 169.01 op/s (169.01 op/s including failed)\nElapsed time: 0.71 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (2066.546 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 220.955 ms, heap usage 494.149 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 703\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 14\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 24\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 12\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 222.22 op/s (222.22 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1829.661 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 205.050 ms, heap usage 422.764 MB -> 141.687 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 703\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 11\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 14\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 24\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 12\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 333.33 op/s (333.33 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1893.863 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 201.343 ms, heap usage 494.218 MB -> 141.688 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 633\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 703\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 24\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 12\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 363.09 op/s (363.09 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1895.940 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 182.860 ms, heap usage 493.209 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 580\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 703\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 11\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 14\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 24\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 12\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 459.02 op/s (459.02 op/s including failed)\nElapsed time: 0.61 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1952.977 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 305.641 ms, heap usage 493.221 MB -> 141.685 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 541\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 703\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 11\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 14\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 24\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 12\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 576.58 op/s (576.58 op/s including failed)\nElapsed time: 0.56 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1795.886 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 194.826 ms, heap usage 365.744 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 18\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 730\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 11\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 14\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 24\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 12\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 473.68 op/s (473.68 op/s including failed)\nElapsed time: 0.76 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1976.848 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 197.099 ms, heap usage 498.182 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 730\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 11\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 14\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 24\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 12\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 613.50 op/s (613.50 op/s including failed)\nElapsed time: 0.65 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1874.670 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 220.616 ms, heap usage 412.582 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 730\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 11\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 14\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 24\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 12\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 739.50 op/s (739.50 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1809.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 229.427 ms, heap usage 493.244 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 579\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 730\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 11\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 24\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 12\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 797.34 op/s (797.34 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (2027.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 233.061 ms, heap usage 493.236 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 619\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 730\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 11\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 14\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 24\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 12\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 791.48 op/s (791.48 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1977.936 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 260.927 ms, heap usage 493.244 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 730\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 11\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 14\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 24\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 12\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 750.67 op/s (750.67 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (2141.642 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 267.832 ms, heap usage 407.307 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 601\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 730\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 11\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 14\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 12\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 966.18 op/s (966.18 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1865.933 ms) ======\n"
    },
    "naive-bayes": {
        "times": [
            58120.386,
            32227.208,
            32368.5,
            31930.918,
            31541.658,
            32105.246,
            30103.488,
            30495.558,
            30590.481,
            30206.652,
            28775.738,
            29893.644,
            30188.336,
            29940.902,
            30274.413
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 106.929 ms, heap usage 190.171 MB -> 63.200 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (6187.539 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.565 ms, heap usage 496.809 MB -> 209.299 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1694.868 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 206.398 ms, heap usage 463.177 MB -> 209.398 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (2003.305 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 212.302 ms, heap usage 459.524 MB -> 209.445 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1621.726 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 223.150 ms, heap usage 335.714 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1269.328 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 263.102 ms, heap usage 387.379 MB -> 209.584 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1332.628 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 345.063 ms, heap usage 301.217 MB -> 209.640 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1334.895 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 238.282 ms, heap usage 362.215 MB -> 209.684 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (1301.701 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 225.459 ms, heap usage 382.839 MB -> 209.728 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (1124.225 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 213.168 ms, heap usage 659.827 MB -> 209.777 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (1152.077 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 234.392 ms, heap usage 214.753 MB -> 209.803 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1177.639 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 246.759 ms, heap usage 382.873 MB -> 209.860 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (1111.159 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 227.666 ms, heap usage 245.014 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (1324.366 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 288.359 ms, heap usage 381.212 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (1081.180 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 334.356 ms, heap usage 245.026 MB -> 209.966 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (1126.707 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 282.368 ms, heap usage 648.690 MB -> 146.565 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (10803.413 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 190.381 ms, heap usage 271.593 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10179.670 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 179.607 ms, heap usage 282.591 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (10419.647 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 174.562 ms, heap usage 532.921 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (10493.156 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 231.739 ms, heap usage 237.340 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (10700.524 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 196.441 ms, heap usage 175.972 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (10559.377 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 201.348 ms, heap usage 321.023 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (10551.392 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 159.797 ms, heap usage 285.547 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (10599.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 184.309 ms, heap usage 379.528 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (10405.099 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 206.129 ms, heap usage 236.996 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (10605.687 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 270.183 ms, heap usage 468.914 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (10370.300 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 180.779 ms, heap usage 271.478 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (10409.936 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 198.113 ms, heap usage 433.421 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (10936.851 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 184.181 ms, heap usage 320.384 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (10691.898 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 184.864 ms, heap usage 267.224 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (10469.996 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 330.267 ms, heap usage 463.183 MB -> 97.773 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (757.078 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 171.930 ms, heap usage 250.324 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (300.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 166.858 ms, heap usage 239.025 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (289.747 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 157.624 ms, heap usage 240.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (263.808 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 155.569 ms, heap usage 239.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (237.639 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 151.505 ms, heap usage 240.407 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (153.299 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 163.224 ms, heap usage 240.296 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (111.494 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 169.931 ms, heap usage 240.860 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (174.875 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 164.186 ms, heap usage 240.402 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (129.886 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 182.958 ms, heap usage 240.314 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (139.095 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 135.178 ms, heap usage 240.838 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (126.878 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 160.496 ms, heap usage 240.372 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (176.428 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 153.128 ms, heap usage 240.406 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (129.888 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 157.830 ms, heap usage 240.359 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (137.771 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 134.312 ms, heap usage 240.381 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (131.295 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 146.262 ms, heap usage 208.123 MB -> 100.661 MB.\n====== db-shootout (database) [default], iteration 0 completed (12404.390 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 178.241 ms, heap usage 254.860 MB -> 167.482 MB.\n====== db-shootout (database) [default], iteration 1 completed (10993.683 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 166.816 ms, heap usage 333.565 MB -> 167.194 MB.\n====== db-shootout (database) [default], iteration 2 completed (10563.322 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 209.258 ms, heap usage 262.956 MB -> 180.567 MB.\n====== db-shootout (database) [default], iteration 3 completed (11630.058 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 178.763 ms, heap usage 202.895 MB -> 177.576 MB.\n====== db-shootout (database) [default], iteration 4 completed (11345.410 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 200.120 ms, heap usage 253.326 MB -> 180.580 MB.\n====== db-shootout (database) [default], iteration 5 completed (11007.588 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 212.320 ms, heap usage 322.388 MB -> 181.162 MB.\n====== db-shootout (database) [default], iteration 6 completed (10530.413 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 153.414 ms, heap usage 259.750 MB -> 181.761 MB.\n====== db-shootout (database) [default], iteration 7 completed (10296.728 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 165.861 ms, heap usage 335.430 MB -> 180.416 MB.\n====== db-shootout (database) [default], iteration 8 completed (11729.260 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 155.114 ms, heap usage 217.493 MB -> 181.582 MB.\n====== db-shootout (database) [default], iteration 9 completed (10253.674 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 256.185 ms, heap usage 382.092 MB -> 181.428 MB.\n====== db-shootout (database) [default], iteration 10 completed (10081.116 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 228.461 ms, heap usage 364.449 MB -> 179.328 MB.\n====== db-shootout (database) [default], iteration 11 completed (10607.645 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 160.768 ms, heap usage 217.618 MB -> 178.374 MB.\n====== db-shootout (database) [default], iteration 12 completed (11800.789 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 162.350 ms, heap usage 327.085 MB -> 176.518 MB.\n====== db-shootout (database) [default], iteration 13 completed (11021.268 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 164.609 ms, heap usage 345.493 MB -> 179.401 MB.\n====== db-shootout (database) [default], iteration 14 completed (10453.547 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39417 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 171.054 ms, heap usage 764.680 MB -> 111.950 MB.\n====== finagle-http (web) [default], iteration 0 completed (23082.922 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 175.625 ms, heap usage 257.530 MB -> 113.944 MB.\n====== finagle-http (web) [default], iteration 1 completed (10425.413 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 192.360 ms, heap usage 142.930 MB -> 114.648 MB.\n====== finagle-http (web) [default], iteration 2 completed (5413.474 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 168.536 ms, heap usage 136.804 MB -> 114.675 MB.\n====== finagle-http (web) [default], iteration 3 completed (4292.558 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 161.104 ms, heap usage 135.231 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 4 completed (4982.604 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 187.983 ms, heap usage 137.549 MB -> 114.682 MB.\n====== finagle-http (web) [default], iteration 5 completed (4510.982 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 160.069 ms, heap usage 135.336 MB -> 114.684 MB.\n====== finagle-http (web) [default], iteration 6 completed (4583.460 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 155.528 ms, heap usage 134.320 MB -> 114.694 MB.\n====== finagle-http (web) [default], iteration 7 completed (4231.741 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 151.912 ms, heap usage 134.424 MB -> 114.757 MB.\n====== finagle-http (web) [default], iteration 8 completed (4629.532 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 135.249 MB -> 114.771 MB.\n====== finagle-http (web) [default], iteration 9 completed (4479.436 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 133.597 ms, heap usage 134.857 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 10 completed (4595.146 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 153.866 ms, heap usage 134.205 MB -> 114.789 MB.\n====== finagle-http (web) [default], iteration 11 completed (4513.085 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 139.530 ms, heap usage 133.233 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 12 completed (4421.906 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 151.855 ms, heap usage 136.255 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 13 completed (4772.345 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 148.653 ms, heap usage 134.209 MB -> 114.759 MB.\n====== finagle-http (web) [default], iteration 14 completed (4171.305 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 171.810 ms, heap usage 149.802 MB -> 115.854 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (20016.203 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 135.623 ms, heap usage 194.455 MB -> 117.112 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (15243.671 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 145.689 ms, heap usage 684.918 MB -> 116.540 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (15173.108 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 197.548 ms, heap usage 691.507 MB -> 116.560 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (14846.662 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 198.578 ms, heap usage 198.756 MB -> 114.731 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (14947.932 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 173.402 ms, heap usage 744.176 MB -> 114.712 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (15877.645 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 219.679 ms, heap usage 158.389 MB -> 113.375 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (15040.873 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 198.390 ms, heap usage 668.182 MB -> 113.378 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (15305.246 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 153.299 ms, heap usage 584.491 MB -> 113.393 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (14977.348 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 146.991 ms, heap usage 750.095 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (15036.507 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 159.673 ms, heap usage 685.262 MB -> 113.386 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (15067.960 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 213.581 ms, heap usage 705.178 MB -> 113.406 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14742.743 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 181.711 ms, heap usage 605.347 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (14916.835 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.081 ms, heap usage 172.060 MB -> 113.404 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (14721.440 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 174.697 ms, heap usage 589.634 MB -> 113.388 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (16424.038 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 186.372 ms, heap usage 735.762 MB -> 126.275 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (14991.979 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 290.688 ms, heap usage 254.907 MB -> 157.853 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3089.060 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 204.835 ms, heap usage 333.769 MB -> 185.965 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2681.550 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 182.933 ms, heap usage 200.364 MB -> 157.821 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (2591.133 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 179.529 ms, heap usage 277.762 MB -> 158.670 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (2299.103 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 200.098 ms, heap usage 210.632 MB -> 158.097 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (2445.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 190.419 ms, heap usage 276.460 MB -> 159.088 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (2371.474 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 174.626 ms, heap usage 222.237 MB -> 186.538 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (2473.615 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 214.512 ms, heap usage 439.245 MB -> 159.900 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (2064.900 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 168.698 ms, heap usage 446.054 MB -> 159.541 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (2257.468 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 237.408 ms, heap usage 234.506 MB -> 186.995 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (2170.313 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 209.799 ms, heap usage 418.506 MB -> 159.781 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (2191.906 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 229.458 ms, heap usage 480.459 MB -> 159.936 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (2138.269 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 211.897 ms, heap usage 466.689 MB -> 160.720 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (2049.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 189.352 ms, heap usage 354.044 MB -> 160.155 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (2040.082 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 194.700 ms, heap usage 295.642 MB -> 143.293 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 56\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 24\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 703\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 11\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 14\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 24\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 12\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 47.51 op/s (47.51 op/s including failed)\nElapsed time: 0.84 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3547.921 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 248.165 ms, heap usage 503.852 MB -> 141.700 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 679\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 703\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 14\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 24\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 12\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 108.11 op/s (108.11 op/s including failed)\nElapsed time: 0.74 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2410.653 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 181.277 ms, heap usage 391.576 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 666\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 703\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 11\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 14\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 24\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 12\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 169.01 op/s (169.01 op/s including failed)\nElapsed time: 0.71 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (2066.546 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 220.955 ms, heap usage 494.149 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 703\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 14\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 24\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 12\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 222.22 op/s (222.22 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1829.661 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 205.050 ms, heap usage 422.764 MB -> 141.687 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 703\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 11\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 14\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 24\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 12\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 333.33 op/s (333.33 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1893.863 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 201.343 ms, heap usage 494.218 MB -> 141.688 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 633\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 703\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 24\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 12\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 363.09 op/s (363.09 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1895.940 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 182.860 ms, heap usage 493.209 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 580\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 703\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 11\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 14\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 24\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 12\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 459.02 op/s (459.02 op/s including failed)\nElapsed time: 0.61 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1952.977 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 305.641 ms, heap usage 493.221 MB -> 141.685 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 541\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 703\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 11\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 14\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 24\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 12\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 576.58 op/s (576.58 op/s including failed)\nElapsed time: 0.56 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1795.886 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 194.826 ms, heap usage 365.744 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 18\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 730\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 11\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 14\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 24\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 12\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 473.68 op/s (473.68 op/s including failed)\nElapsed time: 0.76 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1976.848 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 197.099 ms, heap usage 498.182 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 730\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 11\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 14\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 24\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 12\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 613.50 op/s (613.50 op/s including failed)\nElapsed time: 0.65 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1874.670 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 220.616 ms, heap usage 412.582 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 730\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 11\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 14\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 24\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 12\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 739.50 op/s (739.50 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1809.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 229.427 ms, heap usage 493.244 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 579\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 730\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 11\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 24\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 12\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 797.34 op/s (797.34 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (2027.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 233.061 ms, heap usage 493.236 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 619\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 730\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 11\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 14\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 24\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 12\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 791.48 op/s (791.48 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1977.936 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 260.927 ms, heap usage 493.244 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 730\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 11\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 14\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 24\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 12\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 750.67 op/s (750.67 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (2141.642 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 267.832 ms, heap usage 407.307 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 601\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 730\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 11\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 14\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 12\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 966.18 op/s (966.18 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1865.933 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 196.610 ms, heap usage 166.694 MB -> 152.381 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (58120.386 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 314.055 ms, heap usage 442.788 MB -> 428.544 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (32227.208 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 272.478 ms, heap usage 439.699 MB -> 428.679 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (32368.500 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 367.651 ms, heap usage 531.599 MB -> 428.772 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (31930.918 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 299.299 ms, heap usage 447.937 MB -> 429.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (31541.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 287.549 ms, heap usage 447.896 MB -> 429.397 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (32105.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 277.492 ms, heap usage 446.758 MB -> 426.946 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (30103.488 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 252.894 ms, heap usage 642.931 MB -> 426.553 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (30495.558 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 240.060 ms, heap usage 452.457 MB -> 424.504 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (30590.481 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 248.503 ms, heap usage 435.730 MB -> 424.249 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (30206.652 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 249.386 ms, heap usage 525.208 MB -> 422.576 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (28775.738 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 303.313 ms, heap usage 742.561 MB -> 421.722 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (29893.644 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 240.840 ms, heap usage 637.025 MB -> 421.841 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (30188.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 249.257 ms, heap usage 742.673 MB -> 421.908 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (29940.902 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 203.730 ms, heap usage 760.930 MB -> 421.991 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (30274.413 ms) ======\n"
    },
    "als": {
        "times": [
            22015.25,
            11444.6,
            10696.504,
            10216.778,
            9859.064,
            9616.145,
            9813.018,
            9917.177,
            9790.625,
            9239.064,
            9458.038,
            9574.332,
            9571.358,
            9288.113,
            9172.803
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 106.929 ms, heap usage 190.171 MB -> 63.200 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (6187.539 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.565 ms, heap usage 496.809 MB -> 209.299 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1694.868 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 206.398 ms, heap usage 463.177 MB -> 209.398 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (2003.305 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 212.302 ms, heap usage 459.524 MB -> 209.445 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1621.726 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 223.150 ms, heap usage 335.714 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1269.328 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 263.102 ms, heap usage 387.379 MB -> 209.584 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1332.628 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 345.063 ms, heap usage 301.217 MB -> 209.640 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1334.895 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 238.282 ms, heap usage 362.215 MB -> 209.684 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (1301.701 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 225.459 ms, heap usage 382.839 MB -> 209.728 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (1124.225 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 213.168 ms, heap usage 659.827 MB -> 209.777 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (1152.077 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 234.392 ms, heap usage 214.753 MB -> 209.803 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1177.639 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 246.759 ms, heap usage 382.873 MB -> 209.860 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (1111.159 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 227.666 ms, heap usage 245.014 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (1324.366 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 288.359 ms, heap usage 381.212 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (1081.180 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 334.356 ms, heap usage 245.026 MB -> 209.966 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (1126.707 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 282.368 ms, heap usage 648.690 MB -> 146.565 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (10803.413 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 190.381 ms, heap usage 271.593 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10179.670 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 179.607 ms, heap usage 282.591 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (10419.647 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 174.562 ms, heap usage 532.921 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (10493.156 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 231.739 ms, heap usage 237.340 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (10700.524 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 196.441 ms, heap usage 175.972 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (10559.377 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 201.348 ms, heap usage 321.023 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (10551.392 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 159.797 ms, heap usage 285.547 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (10599.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 184.309 ms, heap usage 379.528 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (10405.099 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 206.129 ms, heap usage 236.996 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (10605.687 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 270.183 ms, heap usage 468.914 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (10370.300 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 180.779 ms, heap usage 271.478 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (10409.936 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 198.113 ms, heap usage 433.421 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (10936.851 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 184.181 ms, heap usage 320.384 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (10691.898 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 184.864 ms, heap usage 267.224 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (10469.996 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 330.267 ms, heap usage 463.183 MB -> 97.773 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (757.078 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 171.930 ms, heap usage 250.324 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (300.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 166.858 ms, heap usage 239.025 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (289.747 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 157.624 ms, heap usage 240.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (263.808 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 155.569 ms, heap usage 239.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (237.639 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 151.505 ms, heap usage 240.407 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (153.299 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 163.224 ms, heap usage 240.296 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (111.494 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 169.931 ms, heap usage 240.860 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (174.875 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 164.186 ms, heap usage 240.402 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (129.886 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 182.958 ms, heap usage 240.314 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (139.095 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 135.178 ms, heap usage 240.838 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (126.878 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 160.496 ms, heap usage 240.372 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (176.428 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 153.128 ms, heap usage 240.406 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (129.888 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 157.830 ms, heap usage 240.359 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (137.771 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 134.312 ms, heap usage 240.381 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (131.295 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 146.262 ms, heap usage 208.123 MB -> 100.661 MB.\n====== db-shootout (database) [default], iteration 0 completed (12404.390 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 178.241 ms, heap usage 254.860 MB -> 167.482 MB.\n====== db-shootout (database) [default], iteration 1 completed (10993.683 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 166.816 ms, heap usage 333.565 MB -> 167.194 MB.\n====== db-shootout (database) [default], iteration 2 completed (10563.322 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 209.258 ms, heap usage 262.956 MB -> 180.567 MB.\n====== db-shootout (database) [default], iteration 3 completed (11630.058 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 178.763 ms, heap usage 202.895 MB -> 177.576 MB.\n====== db-shootout (database) [default], iteration 4 completed (11345.410 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 200.120 ms, heap usage 253.326 MB -> 180.580 MB.\n====== db-shootout (database) [default], iteration 5 completed (11007.588 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 212.320 ms, heap usage 322.388 MB -> 181.162 MB.\n====== db-shootout (database) [default], iteration 6 completed (10530.413 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 153.414 ms, heap usage 259.750 MB -> 181.761 MB.\n====== db-shootout (database) [default], iteration 7 completed (10296.728 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 165.861 ms, heap usage 335.430 MB -> 180.416 MB.\n====== db-shootout (database) [default], iteration 8 completed (11729.260 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 155.114 ms, heap usage 217.493 MB -> 181.582 MB.\n====== db-shootout (database) [default], iteration 9 completed (10253.674 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 256.185 ms, heap usage 382.092 MB -> 181.428 MB.\n====== db-shootout (database) [default], iteration 10 completed (10081.116 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 228.461 ms, heap usage 364.449 MB -> 179.328 MB.\n====== db-shootout (database) [default], iteration 11 completed (10607.645 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 160.768 ms, heap usage 217.618 MB -> 178.374 MB.\n====== db-shootout (database) [default], iteration 12 completed (11800.789 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 162.350 ms, heap usage 327.085 MB -> 176.518 MB.\n====== db-shootout (database) [default], iteration 13 completed (11021.268 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 164.609 ms, heap usage 345.493 MB -> 179.401 MB.\n====== db-shootout (database) [default], iteration 14 completed (10453.547 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39417 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 171.054 ms, heap usage 764.680 MB -> 111.950 MB.\n====== finagle-http (web) [default], iteration 0 completed (23082.922 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 175.625 ms, heap usage 257.530 MB -> 113.944 MB.\n====== finagle-http (web) [default], iteration 1 completed (10425.413 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 192.360 ms, heap usage 142.930 MB -> 114.648 MB.\n====== finagle-http (web) [default], iteration 2 completed (5413.474 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 168.536 ms, heap usage 136.804 MB -> 114.675 MB.\n====== finagle-http (web) [default], iteration 3 completed (4292.558 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 161.104 ms, heap usage 135.231 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 4 completed (4982.604 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 187.983 ms, heap usage 137.549 MB -> 114.682 MB.\n====== finagle-http (web) [default], iteration 5 completed (4510.982 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 160.069 ms, heap usage 135.336 MB -> 114.684 MB.\n====== finagle-http (web) [default], iteration 6 completed (4583.460 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 155.528 ms, heap usage 134.320 MB -> 114.694 MB.\n====== finagle-http (web) [default], iteration 7 completed (4231.741 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 151.912 ms, heap usage 134.424 MB -> 114.757 MB.\n====== finagle-http (web) [default], iteration 8 completed (4629.532 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 135.249 MB -> 114.771 MB.\n====== finagle-http (web) [default], iteration 9 completed (4479.436 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 133.597 ms, heap usage 134.857 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 10 completed (4595.146 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 153.866 ms, heap usage 134.205 MB -> 114.789 MB.\n====== finagle-http (web) [default], iteration 11 completed (4513.085 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 139.530 ms, heap usage 133.233 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 12 completed (4421.906 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 151.855 ms, heap usage 136.255 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 13 completed (4772.345 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 148.653 ms, heap usage 134.209 MB -> 114.759 MB.\n====== finagle-http (web) [default], iteration 14 completed (4171.305 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 171.810 ms, heap usage 149.802 MB -> 115.854 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (20016.203 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 135.623 ms, heap usage 194.455 MB -> 117.112 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (15243.671 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 145.689 ms, heap usage 684.918 MB -> 116.540 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (15173.108 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 197.548 ms, heap usage 691.507 MB -> 116.560 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (14846.662 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 198.578 ms, heap usage 198.756 MB -> 114.731 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (14947.932 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 173.402 ms, heap usage 744.176 MB -> 114.712 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (15877.645 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 219.679 ms, heap usage 158.389 MB -> 113.375 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (15040.873 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 198.390 ms, heap usage 668.182 MB -> 113.378 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (15305.246 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 153.299 ms, heap usage 584.491 MB -> 113.393 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (14977.348 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 146.991 ms, heap usage 750.095 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (15036.507 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 159.673 ms, heap usage 685.262 MB -> 113.386 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (15067.960 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 213.581 ms, heap usage 705.178 MB -> 113.406 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14742.743 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 181.711 ms, heap usage 605.347 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (14916.835 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.081 ms, heap usage 172.060 MB -> 113.404 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (14721.440 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 174.697 ms, heap usage 589.634 MB -> 113.388 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (16424.038 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 186.372 ms, heap usage 735.762 MB -> 126.275 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (14991.979 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 290.688 ms, heap usage 254.907 MB -> 157.853 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3089.060 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 204.835 ms, heap usage 333.769 MB -> 185.965 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2681.550 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 182.933 ms, heap usage 200.364 MB -> 157.821 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (2591.133 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 179.529 ms, heap usage 277.762 MB -> 158.670 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (2299.103 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 200.098 ms, heap usage 210.632 MB -> 158.097 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (2445.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 190.419 ms, heap usage 276.460 MB -> 159.088 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (2371.474 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 174.626 ms, heap usage 222.237 MB -> 186.538 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (2473.615 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 214.512 ms, heap usage 439.245 MB -> 159.900 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (2064.900 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 168.698 ms, heap usage 446.054 MB -> 159.541 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (2257.468 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 237.408 ms, heap usage 234.506 MB -> 186.995 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (2170.313 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 209.799 ms, heap usage 418.506 MB -> 159.781 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (2191.906 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 229.458 ms, heap usage 480.459 MB -> 159.936 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (2138.269 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 211.897 ms, heap usage 466.689 MB -> 160.720 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (2049.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 189.352 ms, heap usage 354.044 MB -> 160.155 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (2040.082 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 194.700 ms, heap usage 295.642 MB -> 143.293 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 56\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 24\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 703\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 11\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 14\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 24\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 12\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 47.51 op/s (47.51 op/s including failed)\nElapsed time: 0.84 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3547.921 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 248.165 ms, heap usage 503.852 MB -> 141.700 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 679\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 703\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 14\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 24\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 12\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 108.11 op/s (108.11 op/s including failed)\nElapsed time: 0.74 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2410.653 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 181.277 ms, heap usage 391.576 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 666\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 703\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 11\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 14\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 24\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 12\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 169.01 op/s (169.01 op/s including failed)\nElapsed time: 0.71 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (2066.546 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 220.955 ms, heap usage 494.149 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 703\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 14\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 24\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 12\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 222.22 op/s (222.22 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1829.661 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 205.050 ms, heap usage 422.764 MB -> 141.687 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 703\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 11\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 14\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 24\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 12\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 333.33 op/s (333.33 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1893.863 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 201.343 ms, heap usage 494.218 MB -> 141.688 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 633\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 703\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 24\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 12\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 363.09 op/s (363.09 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1895.940 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 182.860 ms, heap usage 493.209 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 580\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 703\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 11\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 14\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 24\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 12\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 459.02 op/s (459.02 op/s including failed)\nElapsed time: 0.61 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1952.977 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 305.641 ms, heap usage 493.221 MB -> 141.685 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 541\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 703\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 11\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 14\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 24\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 12\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 576.58 op/s (576.58 op/s including failed)\nElapsed time: 0.56 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1795.886 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 194.826 ms, heap usage 365.744 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 18\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 730\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 11\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 14\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 24\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 12\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 473.68 op/s (473.68 op/s including failed)\nElapsed time: 0.76 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1976.848 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 197.099 ms, heap usage 498.182 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 730\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 11\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 14\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 24\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 12\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 613.50 op/s (613.50 op/s including failed)\nElapsed time: 0.65 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1874.670 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 220.616 ms, heap usage 412.582 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 730\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 11\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 14\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 24\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 12\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 739.50 op/s (739.50 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1809.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 229.427 ms, heap usage 493.244 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 579\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 730\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 11\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 24\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 12\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 797.34 op/s (797.34 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (2027.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 233.061 ms, heap usage 493.236 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 619\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 730\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 11\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 14\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 24\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 12\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 791.48 op/s (791.48 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1977.936 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 260.927 ms, heap usage 493.244 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 730\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 11\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 14\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 24\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 12\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 750.67 op/s (750.67 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (2141.642 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 267.832 ms, heap usage 407.307 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 601\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 730\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 11\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 14\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 12\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 966.18 op/s (966.18 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1865.933 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 196.610 ms, heap usage 166.694 MB -> 152.381 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (58120.386 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 314.055 ms, heap usage 442.788 MB -> 428.544 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (32227.208 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 272.478 ms, heap usage 439.699 MB -> 428.679 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (32368.500 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 367.651 ms, heap usage 531.599 MB -> 428.772 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (31930.918 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 299.299 ms, heap usage 447.937 MB -> 429.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (31541.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 287.549 ms, heap usage 447.896 MB -> 429.397 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (32105.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 277.492 ms, heap usage 446.758 MB -> 426.946 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (30103.488 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 252.894 ms, heap usage 642.931 MB -> 426.553 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (30495.558 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 240.060 ms, heap usage 452.457 MB -> 424.504 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (30590.481 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 248.503 ms, heap usage 435.730 MB -> 424.249 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (30206.652 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 249.386 ms, heap usage 525.208 MB -> 422.576 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (28775.738 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 303.313 ms, heap usage 742.561 MB -> 421.722 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (29893.644 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 240.840 ms, heap usage 637.025 MB -> 421.841 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (30188.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 249.257 ms, heap usage 742.673 MB -> 421.908 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (29940.902 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 203.730 ms, heap usage 760.930 MB -> 421.991 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (30274.413 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 255.470 ms, heap usage 699.724 MB -> 167.378 MB.\n====== als (apache-spark) [default], iteration 0 completed (22015.250 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 350.433 ms, heap usage 344.646 MB -> 192.150 MB.\n====== als (apache-spark) [default], iteration 1 completed (11444.600 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 316.353 ms, heap usage 707.581 MB -> 193.415 MB.\n====== als (apache-spark) [default], iteration 2 completed (10696.504 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 307.867 ms, heap usage 647.009 MB -> 194.023 MB.\n====== als (apache-spark) [default], iteration 3 completed (10216.778 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 267.954 ms, heap usage 683.784 MB -> 194.638 MB.\n====== als (apache-spark) [default], iteration 4 completed (9859.064 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 281.111 ms, heap usage 428.967 MB -> 194.996 MB.\n====== als (apache-spark) [default], iteration 5 completed (9616.145 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 297.340 ms, heap usage 369.268 MB -> 195.120 MB.\n====== als (apache-spark) [default], iteration 6 completed (9813.018 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 264.187 ms, heap usage 561.294 MB -> 196.222 MB.\n====== als (apache-spark) [default], iteration 7 completed (9917.177 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 302.104 ms, heap usage 692.182 MB -> 196.730 MB.\n====== als (apache-spark) [default], iteration 8 completed (9790.625 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 327.750 ms, heap usage 843.970 MB -> 197.512 MB.\n====== als (apache-spark) [default], iteration 9 completed (9239.064 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 261.342 ms, heap usage 334.900 MB -> 197.328 MB.\n====== als (apache-spark) [default], iteration 10 completed (9458.038 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 325.571 ms, heap usage 275.451 MB -> 197.311 MB.\n====== als (apache-spark) [default], iteration 11 completed (9574.332 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 301.606 ms, heap usage 743.440 MB -> 198.064 MB.\n====== als (apache-spark) [default], iteration 12 completed (9571.358 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 344.298 ms, heap usage 701.230 MB -> 198.205 MB.\n====== als (apache-spark) [default], iteration 13 completed (9288.113 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 285.187 ms, heap usage 275.595 MB -> 197.793 MB.\n====== als (apache-spark) [default], iteration 14 completed (9172.803 ms) ======\n"
    },
    "par-mnemonics": {
        "times": [
            5562.022,
            5303.62,
            5220.15,
            5286.316,
            5890.75,
            5240.279,
            5555.636,
            5388.352,
            6068.267,
            4606.54,
            4824.492,
            5334.941,
            5360.162,
            5565.972,
            5500.409
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 106.929 ms, heap usage 190.171 MB -> 63.200 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (6187.539 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.565 ms, heap usage 496.809 MB -> 209.299 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1694.868 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 206.398 ms, heap usage 463.177 MB -> 209.398 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (2003.305 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 212.302 ms, heap usage 459.524 MB -> 209.445 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1621.726 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 223.150 ms, heap usage 335.714 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1269.328 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 263.102 ms, heap usage 387.379 MB -> 209.584 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1332.628 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 345.063 ms, heap usage 301.217 MB -> 209.640 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1334.895 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 238.282 ms, heap usage 362.215 MB -> 209.684 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (1301.701 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 225.459 ms, heap usage 382.839 MB -> 209.728 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (1124.225 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 213.168 ms, heap usage 659.827 MB -> 209.777 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (1152.077 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 234.392 ms, heap usage 214.753 MB -> 209.803 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1177.639 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 246.759 ms, heap usage 382.873 MB -> 209.860 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (1111.159 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 227.666 ms, heap usage 245.014 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (1324.366 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 288.359 ms, heap usage 381.212 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (1081.180 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 334.356 ms, heap usage 245.026 MB -> 209.966 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (1126.707 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 282.368 ms, heap usage 648.690 MB -> 146.565 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (10803.413 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 190.381 ms, heap usage 271.593 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10179.670 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 179.607 ms, heap usage 282.591 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (10419.647 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 174.562 ms, heap usage 532.921 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (10493.156 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 231.739 ms, heap usage 237.340 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (10700.524 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 196.441 ms, heap usage 175.972 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (10559.377 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 201.348 ms, heap usage 321.023 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (10551.392 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 159.797 ms, heap usage 285.547 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (10599.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 184.309 ms, heap usage 379.528 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (10405.099 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 206.129 ms, heap usage 236.996 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (10605.687 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 270.183 ms, heap usage 468.914 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (10370.300 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 180.779 ms, heap usage 271.478 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (10409.936 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 198.113 ms, heap usage 433.421 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (10936.851 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 184.181 ms, heap usage 320.384 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (10691.898 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 184.864 ms, heap usage 267.224 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (10469.996 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 330.267 ms, heap usage 463.183 MB -> 97.773 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (757.078 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 171.930 ms, heap usage 250.324 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (300.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 166.858 ms, heap usage 239.025 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (289.747 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 157.624 ms, heap usage 240.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (263.808 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 155.569 ms, heap usage 239.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (237.639 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 151.505 ms, heap usage 240.407 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (153.299 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 163.224 ms, heap usage 240.296 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (111.494 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 169.931 ms, heap usage 240.860 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (174.875 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 164.186 ms, heap usage 240.402 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (129.886 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 182.958 ms, heap usage 240.314 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (139.095 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 135.178 ms, heap usage 240.838 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (126.878 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 160.496 ms, heap usage 240.372 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (176.428 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 153.128 ms, heap usage 240.406 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (129.888 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 157.830 ms, heap usage 240.359 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (137.771 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 134.312 ms, heap usage 240.381 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (131.295 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 146.262 ms, heap usage 208.123 MB -> 100.661 MB.\n====== db-shootout (database) [default], iteration 0 completed (12404.390 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 178.241 ms, heap usage 254.860 MB -> 167.482 MB.\n====== db-shootout (database) [default], iteration 1 completed (10993.683 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 166.816 ms, heap usage 333.565 MB -> 167.194 MB.\n====== db-shootout (database) [default], iteration 2 completed (10563.322 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 209.258 ms, heap usage 262.956 MB -> 180.567 MB.\n====== db-shootout (database) [default], iteration 3 completed (11630.058 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 178.763 ms, heap usage 202.895 MB -> 177.576 MB.\n====== db-shootout (database) [default], iteration 4 completed (11345.410 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 200.120 ms, heap usage 253.326 MB -> 180.580 MB.\n====== db-shootout (database) [default], iteration 5 completed (11007.588 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 212.320 ms, heap usage 322.388 MB -> 181.162 MB.\n====== db-shootout (database) [default], iteration 6 completed (10530.413 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 153.414 ms, heap usage 259.750 MB -> 181.761 MB.\n====== db-shootout (database) [default], iteration 7 completed (10296.728 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 165.861 ms, heap usage 335.430 MB -> 180.416 MB.\n====== db-shootout (database) [default], iteration 8 completed (11729.260 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 155.114 ms, heap usage 217.493 MB -> 181.582 MB.\n====== db-shootout (database) [default], iteration 9 completed (10253.674 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 256.185 ms, heap usage 382.092 MB -> 181.428 MB.\n====== db-shootout (database) [default], iteration 10 completed (10081.116 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 228.461 ms, heap usage 364.449 MB -> 179.328 MB.\n====== db-shootout (database) [default], iteration 11 completed (10607.645 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 160.768 ms, heap usage 217.618 MB -> 178.374 MB.\n====== db-shootout (database) [default], iteration 12 completed (11800.789 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 162.350 ms, heap usage 327.085 MB -> 176.518 MB.\n====== db-shootout (database) [default], iteration 13 completed (11021.268 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 164.609 ms, heap usage 345.493 MB -> 179.401 MB.\n====== db-shootout (database) [default], iteration 14 completed (10453.547 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39417 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 171.054 ms, heap usage 764.680 MB -> 111.950 MB.\n====== finagle-http (web) [default], iteration 0 completed (23082.922 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 175.625 ms, heap usage 257.530 MB -> 113.944 MB.\n====== finagle-http (web) [default], iteration 1 completed (10425.413 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 192.360 ms, heap usage 142.930 MB -> 114.648 MB.\n====== finagle-http (web) [default], iteration 2 completed (5413.474 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 168.536 ms, heap usage 136.804 MB -> 114.675 MB.\n====== finagle-http (web) [default], iteration 3 completed (4292.558 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 161.104 ms, heap usage 135.231 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 4 completed (4982.604 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 187.983 ms, heap usage 137.549 MB -> 114.682 MB.\n====== finagle-http (web) [default], iteration 5 completed (4510.982 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 160.069 ms, heap usage 135.336 MB -> 114.684 MB.\n====== finagle-http (web) [default], iteration 6 completed (4583.460 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 155.528 ms, heap usage 134.320 MB -> 114.694 MB.\n====== finagle-http (web) [default], iteration 7 completed (4231.741 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 151.912 ms, heap usage 134.424 MB -> 114.757 MB.\n====== finagle-http (web) [default], iteration 8 completed (4629.532 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 135.249 MB -> 114.771 MB.\n====== finagle-http (web) [default], iteration 9 completed (4479.436 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 133.597 ms, heap usage 134.857 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 10 completed (4595.146 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 153.866 ms, heap usage 134.205 MB -> 114.789 MB.\n====== finagle-http (web) [default], iteration 11 completed (4513.085 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 139.530 ms, heap usage 133.233 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 12 completed (4421.906 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 151.855 ms, heap usage 136.255 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 13 completed (4772.345 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 148.653 ms, heap usage 134.209 MB -> 114.759 MB.\n====== finagle-http (web) [default], iteration 14 completed (4171.305 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 171.810 ms, heap usage 149.802 MB -> 115.854 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (20016.203 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 135.623 ms, heap usage 194.455 MB -> 117.112 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (15243.671 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 145.689 ms, heap usage 684.918 MB -> 116.540 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (15173.108 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 197.548 ms, heap usage 691.507 MB -> 116.560 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (14846.662 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 198.578 ms, heap usage 198.756 MB -> 114.731 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (14947.932 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 173.402 ms, heap usage 744.176 MB -> 114.712 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (15877.645 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 219.679 ms, heap usage 158.389 MB -> 113.375 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (15040.873 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 198.390 ms, heap usage 668.182 MB -> 113.378 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (15305.246 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 153.299 ms, heap usage 584.491 MB -> 113.393 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (14977.348 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 146.991 ms, heap usage 750.095 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (15036.507 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 159.673 ms, heap usage 685.262 MB -> 113.386 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (15067.960 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 213.581 ms, heap usage 705.178 MB -> 113.406 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14742.743 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 181.711 ms, heap usage 605.347 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (14916.835 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.081 ms, heap usage 172.060 MB -> 113.404 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (14721.440 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 174.697 ms, heap usage 589.634 MB -> 113.388 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (16424.038 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 186.372 ms, heap usage 735.762 MB -> 126.275 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (14991.979 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 290.688 ms, heap usage 254.907 MB -> 157.853 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3089.060 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 204.835 ms, heap usage 333.769 MB -> 185.965 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2681.550 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 182.933 ms, heap usage 200.364 MB -> 157.821 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (2591.133 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 179.529 ms, heap usage 277.762 MB -> 158.670 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (2299.103 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 200.098 ms, heap usage 210.632 MB -> 158.097 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (2445.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 190.419 ms, heap usage 276.460 MB -> 159.088 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (2371.474 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 174.626 ms, heap usage 222.237 MB -> 186.538 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (2473.615 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 214.512 ms, heap usage 439.245 MB -> 159.900 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (2064.900 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 168.698 ms, heap usage 446.054 MB -> 159.541 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (2257.468 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 237.408 ms, heap usage 234.506 MB -> 186.995 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (2170.313 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 209.799 ms, heap usage 418.506 MB -> 159.781 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (2191.906 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 229.458 ms, heap usage 480.459 MB -> 159.936 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (2138.269 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 211.897 ms, heap usage 466.689 MB -> 160.720 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (2049.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 189.352 ms, heap usage 354.044 MB -> 160.155 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (2040.082 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 194.700 ms, heap usage 295.642 MB -> 143.293 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 56\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 24\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 703\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 11\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 14\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 24\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 12\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 47.51 op/s (47.51 op/s including failed)\nElapsed time: 0.84 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3547.921 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 248.165 ms, heap usage 503.852 MB -> 141.700 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 679\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 703\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 14\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 24\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 12\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 108.11 op/s (108.11 op/s including failed)\nElapsed time: 0.74 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2410.653 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 181.277 ms, heap usage 391.576 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 666\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 703\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 11\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 14\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 24\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 12\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 169.01 op/s (169.01 op/s including failed)\nElapsed time: 0.71 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (2066.546 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 220.955 ms, heap usage 494.149 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 703\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 14\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 24\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 12\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 222.22 op/s (222.22 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1829.661 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 205.050 ms, heap usage 422.764 MB -> 141.687 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 703\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 11\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 14\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 24\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 12\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 333.33 op/s (333.33 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1893.863 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 201.343 ms, heap usage 494.218 MB -> 141.688 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 633\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 703\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 24\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 12\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 363.09 op/s (363.09 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1895.940 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 182.860 ms, heap usage 493.209 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 580\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 703\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 11\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 14\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 24\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 12\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 459.02 op/s (459.02 op/s including failed)\nElapsed time: 0.61 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1952.977 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 305.641 ms, heap usage 493.221 MB -> 141.685 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 541\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 703\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 11\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 14\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 24\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 12\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 576.58 op/s (576.58 op/s including failed)\nElapsed time: 0.56 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1795.886 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 194.826 ms, heap usage 365.744 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 18\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 730\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 11\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 14\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 24\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 12\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 473.68 op/s (473.68 op/s including failed)\nElapsed time: 0.76 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1976.848 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 197.099 ms, heap usage 498.182 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 730\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 11\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 14\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 24\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 12\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 613.50 op/s (613.50 op/s including failed)\nElapsed time: 0.65 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1874.670 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 220.616 ms, heap usage 412.582 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 730\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 11\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 14\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 24\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 12\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 739.50 op/s (739.50 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1809.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 229.427 ms, heap usage 493.244 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 579\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 730\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 11\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 24\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 12\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 797.34 op/s (797.34 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (2027.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 233.061 ms, heap usage 493.236 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 619\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 730\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 11\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 14\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 24\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 12\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 791.48 op/s (791.48 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1977.936 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 260.927 ms, heap usage 493.244 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 730\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 11\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 14\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 24\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 12\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 750.67 op/s (750.67 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (2141.642 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 267.832 ms, heap usage 407.307 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 601\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 730\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 11\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 14\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 12\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 966.18 op/s (966.18 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1865.933 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 196.610 ms, heap usage 166.694 MB -> 152.381 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (58120.386 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 314.055 ms, heap usage 442.788 MB -> 428.544 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (32227.208 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 272.478 ms, heap usage 439.699 MB -> 428.679 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (32368.500 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 367.651 ms, heap usage 531.599 MB -> 428.772 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (31930.918 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 299.299 ms, heap usage 447.937 MB -> 429.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (31541.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 287.549 ms, heap usage 447.896 MB -> 429.397 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (32105.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 277.492 ms, heap usage 446.758 MB -> 426.946 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (30103.488 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 252.894 ms, heap usage 642.931 MB -> 426.553 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (30495.558 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 240.060 ms, heap usage 452.457 MB -> 424.504 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (30590.481 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 248.503 ms, heap usage 435.730 MB -> 424.249 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (30206.652 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 249.386 ms, heap usage 525.208 MB -> 422.576 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (28775.738 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 303.313 ms, heap usage 742.561 MB -> 421.722 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (29893.644 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 240.840 ms, heap usage 637.025 MB -> 421.841 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (30188.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 249.257 ms, heap usage 742.673 MB -> 421.908 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (29940.902 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 203.730 ms, heap usage 760.930 MB -> 421.991 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (30274.413 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 255.470 ms, heap usage 699.724 MB -> 167.378 MB.\n====== als (apache-spark) [default], iteration 0 completed (22015.250 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 350.433 ms, heap usage 344.646 MB -> 192.150 MB.\n====== als (apache-spark) [default], iteration 1 completed (11444.600 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 316.353 ms, heap usage 707.581 MB -> 193.415 MB.\n====== als (apache-spark) [default], iteration 2 completed (10696.504 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 307.867 ms, heap usage 647.009 MB -> 194.023 MB.\n====== als (apache-spark) [default], iteration 3 completed (10216.778 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 267.954 ms, heap usage 683.784 MB -> 194.638 MB.\n====== als (apache-spark) [default], iteration 4 completed (9859.064 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 281.111 ms, heap usage 428.967 MB -> 194.996 MB.\n====== als (apache-spark) [default], iteration 5 completed (9616.145 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 297.340 ms, heap usage 369.268 MB -> 195.120 MB.\n====== als (apache-spark) [default], iteration 6 completed (9813.018 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 264.187 ms, heap usage 561.294 MB -> 196.222 MB.\n====== als (apache-spark) [default], iteration 7 completed (9917.177 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 302.104 ms, heap usage 692.182 MB -> 196.730 MB.\n====== als (apache-spark) [default], iteration 8 completed (9790.625 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 327.750 ms, heap usage 843.970 MB -> 197.512 MB.\n====== als (apache-spark) [default], iteration 9 completed (9239.064 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 261.342 ms, heap usage 334.900 MB -> 197.328 MB.\n====== als (apache-spark) [default], iteration 10 completed (9458.038 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 325.571 ms, heap usage 275.451 MB -> 197.311 MB.\n====== als (apache-spark) [default], iteration 11 completed (9574.332 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 301.606 ms, heap usage 743.440 MB -> 198.064 MB.\n====== als (apache-spark) [default], iteration 12 completed (9571.358 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 344.298 ms, heap usage 701.230 MB -> 198.205 MB.\n====== als (apache-spark) [default], iteration 13 completed (9288.113 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 285.187 ms, heap usage 275.595 MB -> 197.793 MB.\n====== als (apache-spark) [default], iteration 14 completed (9172.803 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 293.096 ms, heap usage 826.511 MB -> 178.953 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5562.022 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 271.376 ms, heap usage 349.017 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5303.620 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 251.125 ms, heap usage 312.552 MB -> 179.004 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (5220.150 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 336.890 ms, heap usage 324.760 MB -> 179.012 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (5286.316 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 264.682 ms, heap usage 310.802 MB -> 178.981 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (5890.750 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 308.278 ms, heap usage 309.802 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (5240.279 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 258.806 ms, heap usage 309.302 MB -> 178.998 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (5555.636 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 326.386 ms, heap usage 309.802 MB -> 178.993 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (5388.352 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 337.023 ms, heap usage 299.802 MB -> 178.978 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (6068.267 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 248.524 ms, heap usage 316.179 MB -> 178.983 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4606.540 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 256.606 ms, heap usage 312.478 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4824.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 320.290 ms, heap usage 317.302 MB -> 178.993 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (5334.941 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 248.608 ms, heap usage 382.537 MB -> 178.998 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (5360.162 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 257.061 ms, heap usage 302.802 MB -> 178.982 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (5565.972 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 279.204 ms, heap usage 309.302 MB -> 178.997 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (5500.409 ms) ======\n"
    },
    "scala-kmeans": {
        "times": [
            528.915,
            192.925,
            208.607,
            201.168,
            195.448,
            193.883,
            192.752,
            190.588,
            196.294,
            187.71,
            205.994,
            196.845,
            185.1,
            205.909,
            206.182
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 106.929 ms, heap usage 190.171 MB -> 63.200 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (6187.539 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.565 ms, heap usage 496.809 MB -> 209.299 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1694.868 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 206.398 ms, heap usage 463.177 MB -> 209.398 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (2003.305 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 212.302 ms, heap usage 459.524 MB -> 209.445 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1621.726 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 223.150 ms, heap usage 335.714 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1269.328 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 263.102 ms, heap usage 387.379 MB -> 209.584 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1332.628 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 345.063 ms, heap usage 301.217 MB -> 209.640 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1334.895 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 238.282 ms, heap usage 362.215 MB -> 209.684 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (1301.701 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 225.459 ms, heap usage 382.839 MB -> 209.728 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (1124.225 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 213.168 ms, heap usage 659.827 MB -> 209.777 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (1152.077 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 234.392 ms, heap usage 214.753 MB -> 209.803 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1177.639 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 246.759 ms, heap usage 382.873 MB -> 209.860 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (1111.159 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 227.666 ms, heap usage 245.014 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (1324.366 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 288.359 ms, heap usage 381.212 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (1081.180 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 334.356 ms, heap usage 245.026 MB -> 209.966 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (1126.707 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 282.368 ms, heap usage 648.690 MB -> 146.565 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (10803.413 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 190.381 ms, heap usage 271.593 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10179.670 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 179.607 ms, heap usage 282.591 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (10419.647 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 174.562 ms, heap usage 532.921 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (10493.156 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 231.739 ms, heap usage 237.340 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (10700.524 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 196.441 ms, heap usage 175.972 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (10559.377 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 201.348 ms, heap usage 321.023 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (10551.392 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 159.797 ms, heap usage 285.547 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (10599.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 184.309 ms, heap usage 379.528 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (10405.099 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 206.129 ms, heap usage 236.996 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (10605.687 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 270.183 ms, heap usage 468.914 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (10370.300 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 180.779 ms, heap usage 271.478 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (10409.936 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 198.113 ms, heap usage 433.421 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (10936.851 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 184.181 ms, heap usage 320.384 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (10691.898 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 184.864 ms, heap usage 267.224 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (10469.996 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 330.267 ms, heap usage 463.183 MB -> 97.773 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (757.078 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 171.930 ms, heap usage 250.324 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (300.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 166.858 ms, heap usage 239.025 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (289.747 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 157.624 ms, heap usage 240.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (263.808 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 155.569 ms, heap usage 239.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (237.639 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 151.505 ms, heap usage 240.407 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (153.299 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 163.224 ms, heap usage 240.296 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (111.494 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 169.931 ms, heap usage 240.860 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (174.875 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 164.186 ms, heap usage 240.402 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (129.886 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 182.958 ms, heap usage 240.314 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (139.095 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 135.178 ms, heap usage 240.838 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (126.878 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 160.496 ms, heap usage 240.372 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (176.428 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 153.128 ms, heap usage 240.406 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (129.888 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 157.830 ms, heap usage 240.359 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (137.771 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 134.312 ms, heap usage 240.381 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (131.295 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 146.262 ms, heap usage 208.123 MB -> 100.661 MB.\n====== db-shootout (database) [default], iteration 0 completed (12404.390 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 178.241 ms, heap usage 254.860 MB -> 167.482 MB.\n====== db-shootout (database) [default], iteration 1 completed (10993.683 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 166.816 ms, heap usage 333.565 MB -> 167.194 MB.\n====== db-shootout (database) [default], iteration 2 completed (10563.322 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 209.258 ms, heap usage 262.956 MB -> 180.567 MB.\n====== db-shootout (database) [default], iteration 3 completed (11630.058 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 178.763 ms, heap usage 202.895 MB -> 177.576 MB.\n====== db-shootout (database) [default], iteration 4 completed (11345.410 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 200.120 ms, heap usage 253.326 MB -> 180.580 MB.\n====== db-shootout (database) [default], iteration 5 completed (11007.588 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 212.320 ms, heap usage 322.388 MB -> 181.162 MB.\n====== db-shootout (database) [default], iteration 6 completed (10530.413 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 153.414 ms, heap usage 259.750 MB -> 181.761 MB.\n====== db-shootout (database) [default], iteration 7 completed (10296.728 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 165.861 ms, heap usage 335.430 MB -> 180.416 MB.\n====== db-shootout (database) [default], iteration 8 completed (11729.260 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 155.114 ms, heap usage 217.493 MB -> 181.582 MB.\n====== db-shootout (database) [default], iteration 9 completed (10253.674 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 256.185 ms, heap usage 382.092 MB -> 181.428 MB.\n====== db-shootout (database) [default], iteration 10 completed (10081.116 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 228.461 ms, heap usage 364.449 MB -> 179.328 MB.\n====== db-shootout (database) [default], iteration 11 completed (10607.645 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 160.768 ms, heap usage 217.618 MB -> 178.374 MB.\n====== db-shootout (database) [default], iteration 12 completed (11800.789 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 162.350 ms, heap usage 327.085 MB -> 176.518 MB.\n====== db-shootout (database) [default], iteration 13 completed (11021.268 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 164.609 ms, heap usage 345.493 MB -> 179.401 MB.\n====== db-shootout (database) [default], iteration 14 completed (10453.547 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39417 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 171.054 ms, heap usage 764.680 MB -> 111.950 MB.\n====== finagle-http (web) [default], iteration 0 completed (23082.922 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 175.625 ms, heap usage 257.530 MB -> 113.944 MB.\n====== finagle-http (web) [default], iteration 1 completed (10425.413 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 192.360 ms, heap usage 142.930 MB -> 114.648 MB.\n====== finagle-http (web) [default], iteration 2 completed (5413.474 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 168.536 ms, heap usage 136.804 MB -> 114.675 MB.\n====== finagle-http (web) [default], iteration 3 completed (4292.558 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 161.104 ms, heap usage 135.231 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 4 completed (4982.604 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 187.983 ms, heap usage 137.549 MB -> 114.682 MB.\n====== finagle-http (web) [default], iteration 5 completed (4510.982 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 160.069 ms, heap usage 135.336 MB -> 114.684 MB.\n====== finagle-http (web) [default], iteration 6 completed (4583.460 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 155.528 ms, heap usage 134.320 MB -> 114.694 MB.\n====== finagle-http (web) [default], iteration 7 completed (4231.741 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 151.912 ms, heap usage 134.424 MB -> 114.757 MB.\n====== finagle-http (web) [default], iteration 8 completed (4629.532 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 135.249 MB -> 114.771 MB.\n====== finagle-http (web) [default], iteration 9 completed (4479.436 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 133.597 ms, heap usage 134.857 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 10 completed (4595.146 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 153.866 ms, heap usage 134.205 MB -> 114.789 MB.\n====== finagle-http (web) [default], iteration 11 completed (4513.085 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 139.530 ms, heap usage 133.233 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 12 completed (4421.906 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 151.855 ms, heap usage 136.255 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 13 completed (4772.345 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 148.653 ms, heap usage 134.209 MB -> 114.759 MB.\n====== finagle-http (web) [default], iteration 14 completed (4171.305 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 171.810 ms, heap usage 149.802 MB -> 115.854 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (20016.203 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 135.623 ms, heap usage 194.455 MB -> 117.112 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (15243.671 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 145.689 ms, heap usage 684.918 MB -> 116.540 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (15173.108 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 197.548 ms, heap usage 691.507 MB -> 116.560 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (14846.662 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 198.578 ms, heap usage 198.756 MB -> 114.731 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (14947.932 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 173.402 ms, heap usage 744.176 MB -> 114.712 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (15877.645 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 219.679 ms, heap usage 158.389 MB -> 113.375 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (15040.873 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 198.390 ms, heap usage 668.182 MB -> 113.378 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (15305.246 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 153.299 ms, heap usage 584.491 MB -> 113.393 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (14977.348 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 146.991 ms, heap usage 750.095 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (15036.507 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 159.673 ms, heap usage 685.262 MB -> 113.386 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (15067.960 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 213.581 ms, heap usage 705.178 MB -> 113.406 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14742.743 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 181.711 ms, heap usage 605.347 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (14916.835 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.081 ms, heap usage 172.060 MB -> 113.404 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (14721.440 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 174.697 ms, heap usage 589.634 MB -> 113.388 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (16424.038 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 186.372 ms, heap usage 735.762 MB -> 126.275 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (14991.979 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 290.688 ms, heap usage 254.907 MB -> 157.853 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3089.060 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 204.835 ms, heap usage 333.769 MB -> 185.965 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2681.550 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 182.933 ms, heap usage 200.364 MB -> 157.821 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (2591.133 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 179.529 ms, heap usage 277.762 MB -> 158.670 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (2299.103 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 200.098 ms, heap usage 210.632 MB -> 158.097 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (2445.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 190.419 ms, heap usage 276.460 MB -> 159.088 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (2371.474 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 174.626 ms, heap usage 222.237 MB -> 186.538 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (2473.615 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 214.512 ms, heap usage 439.245 MB -> 159.900 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (2064.900 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 168.698 ms, heap usage 446.054 MB -> 159.541 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (2257.468 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 237.408 ms, heap usage 234.506 MB -> 186.995 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (2170.313 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 209.799 ms, heap usage 418.506 MB -> 159.781 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (2191.906 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 229.458 ms, heap usage 480.459 MB -> 159.936 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (2138.269 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 211.897 ms, heap usage 466.689 MB -> 160.720 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (2049.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 189.352 ms, heap usage 354.044 MB -> 160.155 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (2040.082 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 194.700 ms, heap usage 295.642 MB -> 143.293 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 56\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 24\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 703\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 11\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 14\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 24\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 12\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 47.51 op/s (47.51 op/s including failed)\nElapsed time: 0.84 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3547.921 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 248.165 ms, heap usage 503.852 MB -> 141.700 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 679\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 703\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 14\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 24\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 12\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 108.11 op/s (108.11 op/s including failed)\nElapsed time: 0.74 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2410.653 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 181.277 ms, heap usage 391.576 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 666\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 703\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 11\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 14\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 24\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 12\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 169.01 op/s (169.01 op/s including failed)\nElapsed time: 0.71 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (2066.546 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 220.955 ms, heap usage 494.149 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 703\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 14\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 24\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 12\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 222.22 op/s (222.22 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1829.661 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 205.050 ms, heap usage 422.764 MB -> 141.687 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 703\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 11\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 14\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 24\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 12\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 333.33 op/s (333.33 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1893.863 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 201.343 ms, heap usage 494.218 MB -> 141.688 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 633\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 703\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 24\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 12\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 363.09 op/s (363.09 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1895.940 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 182.860 ms, heap usage 493.209 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 580\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 703\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 11\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 14\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 24\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 12\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 459.02 op/s (459.02 op/s including failed)\nElapsed time: 0.61 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1952.977 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 305.641 ms, heap usage 493.221 MB -> 141.685 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 541\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 703\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 11\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 14\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 24\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 12\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 576.58 op/s (576.58 op/s including failed)\nElapsed time: 0.56 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1795.886 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 194.826 ms, heap usage 365.744 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 18\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 730\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 11\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 14\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 24\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 12\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 473.68 op/s (473.68 op/s including failed)\nElapsed time: 0.76 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1976.848 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 197.099 ms, heap usage 498.182 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 730\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 11\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 14\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 24\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 12\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 613.50 op/s (613.50 op/s including failed)\nElapsed time: 0.65 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1874.670 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 220.616 ms, heap usage 412.582 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 730\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 11\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 14\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 24\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 12\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 739.50 op/s (739.50 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1809.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 229.427 ms, heap usage 493.244 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 579\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 730\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 11\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 24\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 12\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 797.34 op/s (797.34 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (2027.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 233.061 ms, heap usage 493.236 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 619\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 730\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 11\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 14\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 24\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 12\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 791.48 op/s (791.48 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1977.936 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 260.927 ms, heap usage 493.244 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 730\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 11\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 14\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 24\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 12\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 750.67 op/s (750.67 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (2141.642 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 267.832 ms, heap usage 407.307 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 601\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 730\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 11\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 14\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 12\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 966.18 op/s (966.18 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1865.933 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 196.610 ms, heap usage 166.694 MB -> 152.381 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (58120.386 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 314.055 ms, heap usage 442.788 MB -> 428.544 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (32227.208 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 272.478 ms, heap usage 439.699 MB -> 428.679 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (32368.500 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 367.651 ms, heap usage 531.599 MB -> 428.772 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (31930.918 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 299.299 ms, heap usage 447.937 MB -> 429.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (31541.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 287.549 ms, heap usage 447.896 MB -> 429.397 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (32105.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 277.492 ms, heap usage 446.758 MB -> 426.946 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (30103.488 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 252.894 ms, heap usage 642.931 MB -> 426.553 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (30495.558 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 240.060 ms, heap usage 452.457 MB -> 424.504 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (30590.481 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 248.503 ms, heap usage 435.730 MB -> 424.249 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (30206.652 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 249.386 ms, heap usage 525.208 MB -> 422.576 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (28775.738 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 303.313 ms, heap usage 742.561 MB -> 421.722 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (29893.644 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 240.840 ms, heap usage 637.025 MB -> 421.841 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (30188.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 249.257 ms, heap usage 742.673 MB -> 421.908 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (29940.902 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 203.730 ms, heap usage 760.930 MB -> 421.991 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (30274.413 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 255.470 ms, heap usage 699.724 MB -> 167.378 MB.\n====== als (apache-spark) [default], iteration 0 completed (22015.250 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 350.433 ms, heap usage 344.646 MB -> 192.150 MB.\n====== als (apache-spark) [default], iteration 1 completed (11444.600 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 316.353 ms, heap usage 707.581 MB -> 193.415 MB.\n====== als (apache-spark) [default], iteration 2 completed (10696.504 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 307.867 ms, heap usage 647.009 MB -> 194.023 MB.\n====== als (apache-spark) [default], iteration 3 completed (10216.778 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 267.954 ms, heap usage 683.784 MB -> 194.638 MB.\n====== als (apache-spark) [default], iteration 4 completed (9859.064 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 281.111 ms, heap usage 428.967 MB -> 194.996 MB.\n====== als (apache-spark) [default], iteration 5 completed (9616.145 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 297.340 ms, heap usage 369.268 MB -> 195.120 MB.\n====== als (apache-spark) [default], iteration 6 completed (9813.018 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 264.187 ms, heap usage 561.294 MB -> 196.222 MB.\n====== als (apache-spark) [default], iteration 7 completed (9917.177 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 302.104 ms, heap usage 692.182 MB -> 196.730 MB.\n====== als (apache-spark) [default], iteration 8 completed (9790.625 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 327.750 ms, heap usage 843.970 MB -> 197.512 MB.\n====== als (apache-spark) [default], iteration 9 completed (9239.064 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 261.342 ms, heap usage 334.900 MB -> 197.328 MB.\n====== als (apache-spark) [default], iteration 10 completed (9458.038 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 325.571 ms, heap usage 275.451 MB -> 197.311 MB.\n====== als (apache-spark) [default], iteration 11 completed (9574.332 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 301.606 ms, heap usage 743.440 MB -> 198.064 MB.\n====== als (apache-spark) [default], iteration 12 completed (9571.358 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 344.298 ms, heap usage 701.230 MB -> 198.205 MB.\n====== als (apache-spark) [default], iteration 13 completed (9288.113 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 285.187 ms, heap usage 275.595 MB -> 197.793 MB.\n====== als (apache-spark) [default], iteration 14 completed (9172.803 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 293.096 ms, heap usage 826.511 MB -> 178.953 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5562.022 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 271.376 ms, heap usage 349.017 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5303.620 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 251.125 ms, heap usage 312.552 MB -> 179.004 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (5220.150 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 336.890 ms, heap usage 324.760 MB -> 179.012 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (5286.316 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 264.682 ms, heap usage 310.802 MB -> 178.981 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (5890.750 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 308.278 ms, heap usage 309.802 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (5240.279 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 258.806 ms, heap usage 309.302 MB -> 178.998 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (5555.636 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 326.386 ms, heap usage 309.802 MB -> 178.993 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (5388.352 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 337.023 ms, heap usage 299.802 MB -> 178.978 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (6068.267 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 248.524 ms, heap usage 316.179 MB -> 178.983 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4606.540 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 256.606 ms, heap usage 312.478 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4824.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 320.290 ms, heap usage 317.302 MB -> 178.993 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (5334.941 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 248.608 ms, heap usage 382.537 MB -> 178.998 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (5360.162 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 257.061 ms, heap usage 302.802 MB -> 178.982 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (5565.972 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 279.204 ms, heap usage 309.302 MB -> 178.997 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (5500.409 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 404.952 ms, heap usage 351.931 MB -> 201.232 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (528.915 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 314.014 ms, heap usage 230.732 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (192.925 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 283.646 ms, heap usage 231.267 MB -> 201.280 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (208.607 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 264.196 ms, heap usage 231.272 MB -> 201.264 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (201.168 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 275.380 ms, heap usage 231.267 MB -> 201.265 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (195.448 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 276.700 ms, heap usage 231.265 MB -> 201.267 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (193.883 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 270.527 ms, heap usage 231.265 MB -> 201.267 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (192.752 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 298.673 ms, heap usage 231.265 MB -> 201.285 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (190.588 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 276.502 ms, heap usage 231.265 MB -> 201.280 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (196.294 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 282.001 ms, heap usage 231.265 MB -> 201.265 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (187.710 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 274.661 ms, heap usage 231.265 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (205.994 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 324.576 ms, heap usage 231.273 MB -> 201.285 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (196.845 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 330.213 ms, heap usage 231.265 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (185.100 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 318.153 ms, heap usage 231.265 MB -> 201.281 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (205.909 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 270.804 ms, heap usage 231.273 MB -> 201.269 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (206.182 ms) ======\n"
    },
    "philosophers": {
        "times": [
            1378.007,
            575.902,
            556.882,
            431.271,
            504.43,
            449.552,
            447.054,
            445.125,
            501.871,
            456.366,
            433.011,
            465.629,
            400.286,
            416.982,
            396.622
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 106.929 ms, heap usage 190.171 MB -> 63.200 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (6187.539 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.565 ms, heap usage 496.809 MB -> 209.299 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1694.868 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 206.398 ms, heap usage 463.177 MB -> 209.398 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (2003.305 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 212.302 ms, heap usage 459.524 MB -> 209.445 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1621.726 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 223.150 ms, heap usage 335.714 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1269.328 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 263.102 ms, heap usage 387.379 MB -> 209.584 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1332.628 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 345.063 ms, heap usage 301.217 MB -> 209.640 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1334.895 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 238.282 ms, heap usage 362.215 MB -> 209.684 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (1301.701 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 225.459 ms, heap usage 382.839 MB -> 209.728 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (1124.225 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 213.168 ms, heap usage 659.827 MB -> 209.777 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (1152.077 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 234.392 ms, heap usage 214.753 MB -> 209.803 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1177.639 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 246.759 ms, heap usage 382.873 MB -> 209.860 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (1111.159 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 227.666 ms, heap usage 245.014 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (1324.366 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 288.359 ms, heap usage 381.212 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (1081.180 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 334.356 ms, heap usage 245.026 MB -> 209.966 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (1126.707 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 282.368 ms, heap usage 648.690 MB -> 146.565 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (10803.413 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 190.381 ms, heap usage 271.593 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10179.670 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 179.607 ms, heap usage 282.591 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (10419.647 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 174.562 ms, heap usage 532.921 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (10493.156 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 231.739 ms, heap usage 237.340 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (10700.524 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 196.441 ms, heap usage 175.972 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (10559.377 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 201.348 ms, heap usage 321.023 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (10551.392 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 159.797 ms, heap usage 285.547 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (10599.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 184.309 ms, heap usage 379.528 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (10405.099 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 206.129 ms, heap usage 236.996 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (10605.687 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 270.183 ms, heap usage 468.914 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (10370.300 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 180.779 ms, heap usage 271.478 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (10409.936 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 198.113 ms, heap usage 433.421 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (10936.851 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 184.181 ms, heap usage 320.384 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (10691.898 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 184.864 ms, heap usage 267.224 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (10469.996 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 330.267 ms, heap usage 463.183 MB -> 97.773 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (757.078 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 171.930 ms, heap usage 250.324 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (300.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 166.858 ms, heap usage 239.025 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (289.747 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 157.624 ms, heap usage 240.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (263.808 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 155.569 ms, heap usage 239.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (237.639 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 151.505 ms, heap usage 240.407 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (153.299 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 163.224 ms, heap usage 240.296 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (111.494 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 169.931 ms, heap usage 240.860 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (174.875 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 164.186 ms, heap usage 240.402 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (129.886 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 182.958 ms, heap usage 240.314 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (139.095 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 135.178 ms, heap usage 240.838 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (126.878 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 160.496 ms, heap usage 240.372 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (176.428 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 153.128 ms, heap usage 240.406 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (129.888 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 157.830 ms, heap usage 240.359 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (137.771 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 134.312 ms, heap usage 240.381 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (131.295 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 146.262 ms, heap usage 208.123 MB -> 100.661 MB.\n====== db-shootout (database) [default], iteration 0 completed (12404.390 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 178.241 ms, heap usage 254.860 MB -> 167.482 MB.\n====== db-shootout (database) [default], iteration 1 completed (10993.683 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 166.816 ms, heap usage 333.565 MB -> 167.194 MB.\n====== db-shootout (database) [default], iteration 2 completed (10563.322 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 209.258 ms, heap usage 262.956 MB -> 180.567 MB.\n====== db-shootout (database) [default], iteration 3 completed (11630.058 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 178.763 ms, heap usage 202.895 MB -> 177.576 MB.\n====== db-shootout (database) [default], iteration 4 completed (11345.410 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 200.120 ms, heap usage 253.326 MB -> 180.580 MB.\n====== db-shootout (database) [default], iteration 5 completed (11007.588 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 212.320 ms, heap usage 322.388 MB -> 181.162 MB.\n====== db-shootout (database) [default], iteration 6 completed (10530.413 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 153.414 ms, heap usage 259.750 MB -> 181.761 MB.\n====== db-shootout (database) [default], iteration 7 completed (10296.728 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 165.861 ms, heap usage 335.430 MB -> 180.416 MB.\n====== db-shootout (database) [default], iteration 8 completed (11729.260 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 155.114 ms, heap usage 217.493 MB -> 181.582 MB.\n====== db-shootout (database) [default], iteration 9 completed (10253.674 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 256.185 ms, heap usage 382.092 MB -> 181.428 MB.\n====== db-shootout (database) [default], iteration 10 completed (10081.116 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 228.461 ms, heap usage 364.449 MB -> 179.328 MB.\n====== db-shootout (database) [default], iteration 11 completed (10607.645 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 160.768 ms, heap usage 217.618 MB -> 178.374 MB.\n====== db-shootout (database) [default], iteration 12 completed (11800.789 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 162.350 ms, heap usage 327.085 MB -> 176.518 MB.\n====== db-shootout (database) [default], iteration 13 completed (11021.268 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 164.609 ms, heap usage 345.493 MB -> 179.401 MB.\n====== db-shootout (database) [default], iteration 14 completed (10453.547 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39417 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 171.054 ms, heap usage 764.680 MB -> 111.950 MB.\n====== finagle-http (web) [default], iteration 0 completed (23082.922 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 175.625 ms, heap usage 257.530 MB -> 113.944 MB.\n====== finagle-http (web) [default], iteration 1 completed (10425.413 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 192.360 ms, heap usage 142.930 MB -> 114.648 MB.\n====== finagle-http (web) [default], iteration 2 completed (5413.474 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 168.536 ms, heap usage 136.804 MB -> 114.675 MB.\n====== finagle-http (web) [default], iteration 3 completed (4292.558 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 161.104 ms, heap usage 135.231 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 4 completed (4982.604 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 187.983 ms, heap usage 137.549 MB -> 114.682 MB.\n====== finagle-http (web) [default], iteration 5 completed (4510.982 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 160.069 ms, heap usage 135.336 MB -> 114.684 MB.\n====== finagle-http (web) [default], iteration 6 completed (4583.460 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 155.528 ms, heap usage 134.320 MB -> 114.694 MB.\n====== finagle-http (web) [default], iteration 7 completed (4231.741 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 151.912 ms, heap usage 134.424 MB -> 114.757 MB.\n====== finagle-http (web) [default], iteration 8 completed (4629.532 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 135.249 MB -> 114.771 MB.\n====== finagle-http (web) [default], iteration 9 completed (4479.436 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 133.597 ms, heap usage 134.857 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 10 completed (4595.146 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 153.866 ms, heap usage 134.205 MB -> 114.789 MB.\n====== finagle-http (web) [default], iteration 11 completed (4513.085 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 139.530 ms, heap usage 133.233 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 12 completed (4421.906 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 151.855 ms, heap usage 136.255 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 13 completed (4772.345 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 148.653 ms, heap usage 134.209 MB -> 114.759 MB.\n====== finagle-http (web) [default], iteration 14 completed (4171.305 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 171.810 ms, heap usage 149.802 MB -> 115.854 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (20016.203 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 135.623 ms, heap usage 194.455 MB -> 117.112 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (15243.671 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 145.689 ms, heap usage 684.918 MB -> 116.540 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (15173.108 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 197.548 ms, heap usage 691.507 MB -> 116.560 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (14846.662 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 198.578 ms, heap usage 198.756 MB -> 114.731 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (14947.932 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 173.402 ms, heap usage 744.176 MB -> 114.712 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (15877.645 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 219.679 ms, heap usage 158.389 MB -> 113.375 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (15040.873 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 198.390 ms, heap usage 668.182 MB -> 113.378 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (15305.246 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 153.299 ms, heap usage 584.491 MB -> 113.393 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (14977.348 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 146.991 ms, heap usage 750.095 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (15036.507 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 159.673 ms, heap usage 685.262 MB -> 113.386 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (15067.960 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 213.581 ms, heap usage 705.178 MB -> 113.406 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14742.743 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 181.711 ms, heap usage 605.347 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (14916.835 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.081 ms, heap usage 172.060 MB -> 113.404 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (14721.440 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 174.697 ms, heap usage 589.634 MB -> 113.388 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (16424.038 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 186.372 ms, heap usage 735.762 MB -> 126.275 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (14991.979 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 290.688 ms, heap usage 254.907 MB -> 157.853 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3089.060 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 204.835 ms, heap usage 333.769 MB -> 185.965 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2681.550 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 182.933 ms, heap usage 200.364 MB -> 157.821 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (2591.133 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 179.529 ms, heap usage 277.762 MB -> 158.670 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (2299.103 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 200.098 ms, heap usage 210.632 MB -> 158.097 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (2445.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 190.419 ms, heap usage 276.460 MB -> 159.088 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (2371.474 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 174.626 ms, heap usage 222.237 MB -> 186.538 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (2473.615 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 214.512 ms, heap usage 439.245 MB -> 159.900 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (2064.900 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 168.698 ms, heap usage 446.054 MB -> 159.541 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (2257.468 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 237.408 ms, heap usage 234.506 MB -> 186.995 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (2170.313 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 209.799 ms, heap usage 418.506 MB -> 159.781 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (2191.906 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 229.458 ms, heap usage 480.459 MB -> 159.936 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (2138.269 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 211.897 ms, heap usage 466.689 MB -> 160.720 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (2049.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 189.352 ms, heap usage 354.044 MB -> 160.155 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (2040.082 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 194.700 ms, heap usage 295.642 MB -> 143.293 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 56\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 24\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 703\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 11\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 14\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 24\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 12\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 47.51 op/s (47.51 op/s including failed)\nElapsed time: 0.84 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3547.921 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 248.165 ms, heap usage 503.852 MB -> 141.700 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 679\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 703\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 14\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 24\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 12\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 108.11 op/s (108.11 op/s including failed)\nElapsed time: 0.74 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2410.653 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 181.277 ms, heap usage 391.576 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 666\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 703\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 11\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 14\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 24\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 12\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 169.01 op/s (169.01 op/s including failed)\nElapsed time: 0.71 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (2066.546 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 220.955 ms, heap usage 494.149 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 703\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 14\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 24\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 12\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 222.22 op/s (222.22 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1829.661 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 205.050 ms, heap usage 422.764 MB -> 141.687 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 703\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 11\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 14\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 24\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 12\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 333.33 op/s (333.33 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1893.863 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 201.343 ms, heap usage 494.218 MB -> 141.688 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 633\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 703\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 24\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 12\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 363.09 op/s (363.09 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1895.940 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 182.860 ms, heap usage 493.209 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 580\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 703\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 11\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 14\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 24\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 12\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 459.02 op/s (459.02 op/s including failed)\nElapsed time: 0.61 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1952.977 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 305.641 ms, heap usage 493.221 MB -> 141.685 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 541\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 703\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 11\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 14\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 24\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 12\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 576.58 op/s (576.58 op/s including failed)\nElapsed time: 0.56 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1795.886 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 194.826 ms, heap usage 365.744 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 18\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 730\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 11\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 14\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 24\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 12\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 473.68 op/s (473.68 op/s including failed)\nElapsed time: 0.76 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1976.848 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 197.099 ms, heap usage 498.182 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 730\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 11\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 14\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 24\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 12\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 613.50 op/s (613.50 op/s including failed)\nElapsed time: 0.65 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1874.670 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 220.616 ms, heap usage 412.582 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 730\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 11\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 14\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 24\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 12\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 739.50 op/s (739.50 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1809.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 229.427 ms, heap usage 493.244 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 579\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 730\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 11\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 24\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 12\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 797.34 op/s (797.34 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (2027.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 233.061 ms, heap usage 493.236 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 619\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 730\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 11\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 14\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 24\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 12\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 791.48 op/s (791.48 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1977.936 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 260.927 ms, heap usage 493.244 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 730\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 11\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 14\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 24\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 12\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 750.67 op/s (750.67 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (2141.642 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 267.832 ms, heap usage 407.307 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 601\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 730\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 11\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 14\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 12\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 966.18 op/s (966.18 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1865.933 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 196.610 ms, heap usage 166.694 MB -> 152.381 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (58120.386 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 314.055 ms, heap usage 442.788 MB -> 428.544 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (32227.208 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 272.478 ms, heap usage 439.699 MB -> 428.679 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (32368.500 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 367.651 ms, heap usage 531.599 MB -> 428.772 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (31930.918 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 299.299 ms, heap usage 447.937 MB -> 429.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (31541.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 287.549 ms, heap usage 447.896 MB -> 429.397 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (32105.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 277.492 ms, heap usage 446.758 MB -> 426.946 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (30103.488 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 252.894 ms, heap usage 642.931 MB -> 426.553 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (30495.558 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 240.060 ms, heap usage 452.457 MB -> 424.504 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (30590.481 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 248.503 ms, heap usage 435.730 MB -> 424.249 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (30206.652 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 249.386 ms, heap usage 525.208 MB -> 422.576 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (28775.738 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 303.313 ms, heap usage 742.561 MB -> 421.722 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (29893.644 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 240.840 ms, heap usage 637.025 MB -> 421.841 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (30188.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 249.257 ms, heap usage 742.673 MB -> 421.908 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (29940.902 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 203.730 ms, heap usage 760.930 MB -> 421.991 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (30274.413 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 255.470 ms, heap usage 699.724 MB -> 167.378 MB.\n====== als (apache-spark) [default], iteration 0 completed (22015.250 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 350.433 ms, heap usage 344.646 MB -> 192.150 MB.\n====== als (apache-spark) [default], iteration 1 completed (11444.600 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 316.353 ms, heap usage 707.581 MB -> 193.415 MB.\n====== als (apache-spark) [default], iteration 2 completed (10696.504 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 307.867 ms, heap usage 647.009 MB -> 194.023 MB.\n====== als (apache-spark) [default], iteration 3 completed (10216.778 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 267.954 ms, heap usage 683.784 MB -> 194.638 MB.\n====== als (apache-spark) [default], iteration 4 completed (9859.064 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 281.111 ms, heap usage 428.967 MB -> 194.996 MB.\n====== als (apache-spark) [default], iteration 5 completed (9616.145 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 297.340 ms, heap usage 369.268 MB -> 195.120 MB.\n====== als (apache-spark) [default], iteration 6 completed (9813.018 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 264.187 ms, heap usage 561.294 MB -> 196.222 MB.\n====== als (apache-spark) [default], iteration 7 completed (9917.177 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 302.104 ms, heap usage 692.182 MB -> 196.730 MB.\n====== als (apache-spark) [default], iteration 8 completed (9790.625 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 327.750 ms, heap usage 843.970 MB -> 197.512 MB.\n====== als (apache-spark) [default], iteration 9 completed (9239.064 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 261.342 ms, heap usage 334.900 MB -> 197.328 MB.\n====== als (apache-spark) [default], iteration 10 completed (9458.038 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 325.571 ms, heap usage 275.451 MB -> 197.311 MB.\n====== als (apache-spark) [default], iteration 11 completed (9574.332 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 301.606 ms, heap usage 743.440 MB -> 198.064 MB.\n====== als (apache-spark) [default], iteration 12 completed (9571.358 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 344.298 ms, heap usage 701.230 MB -> 198.205 MB.\n====== als (apache-spark) [default], iteration 13 completed (9288.113 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 285.187 ms, heap usage 275.595 MB -> 197.793 MB.\n====== als (apache-spark) [default], iteration 14 completed (9172.803 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 293.096 ms, heap usage 826.511 MB -> 178.953 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5562.022 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 271.376 ms, heap usage 349.017 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5303.620 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 251.125 ms, heap usage 312.552 MB -> 179.004 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (5220.150 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 336.890 ms, heap usage 324.760 MB -> 179.012 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (5286.316 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 264.682 ms, heap usage 310.802 MB -> 178.981 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (5890.750 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 308.278 ms, heap usage 309.802 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (5240.279 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 258.806 ms, heap usage 309.302 MB -> 178.998 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (5555.636 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 326.386 ms, heap usage 309.802 MB -> 178.993 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (5388.352 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 337.023 ms, heap usage 299.802 MB -> 178.978 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (6068.267 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 248.524 ms, heap usage 316.179 MB -> 178.983 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4606.540 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 256.606 ms, heap usage 312.478 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4824.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 320.290 ms, heap usage 317.302 MB -> 178.993 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (5334.941 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 248.608 ms, heap usage 382.537 MB -> 178.998 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (5360.162 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 257.061 ms, heap usage 302.802 MB -> 178.982 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (5565.972 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 279.204 ms, heap usage 309.302 MB -> 178.997 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (5500.409 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 404.952 ms, heap usage 351.931 MB -> 201.232 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (528.915 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 314.014 ms, heap usage 230.732 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (192.925 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 283.646 ms, heap usage 231.267 MB -> 201.280 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (208.607 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 264.196 ms, heap usage 231.272 MB -> 201.264 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (201.168 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 275.380 ms, heap usage 231.267 MB -> 201.265 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (195.448 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 276.700 ms, heap usage 231.265 MB -> 201.267 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (193.883 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 270.527 ms, heap usage 231.265 MB -> 201.267 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (192.752 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 298.673 ms, heap usage 231.265 MB -> 201.285 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (190.588 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 276.502 ms, heap usage 231.265 MB -> 201.280 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (196.294 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 282.001 ms, heap usage 231.265 MB -> 201.265 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (187.710 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 274.661 ms, heap usage 231.265 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (205.994 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 324.576 ms, heap usage 231.273 MB -> 201.285 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (196.845 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 330.213 ms, heap usage 231.265 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (185.100 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 318.153 ms, heap usage 231.265 MB -> 201.281 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (205.909 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 270.804 ms, heap usage 231.273 MB -> 201.269 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (206.182 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 314.737 ms, heap usage 232.766 MB -> 180.295 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1378.007 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 261.201 ms, heap usage 506.267 MB -> 180.191 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (575.902 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 254.781 ms, heap usage 480.688 MB -> 180.185 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (556.882 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 266.955 ms, heap usage 494.185 MB -> 180.186 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (431.271 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 327.384 ms, heap usage 488.686 MB -> 180.186 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (504.430 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 298.076 ms, heap usage 490.686 MB -> 180.206 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (449.552 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 285.466 ms, heap usage 489.186 MB -> 180.196 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (447.054 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 264.792 ms, heap usage 492.186 MB -> 180.209 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (445.125 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 339.222 ms, heap usage 493.686 MB -> 180.189 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (501.871 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 263.772 ms, heap usage 494.686 MB -> 180.207 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (456.366 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 310.936 ms, heap usage 493.186 MB -> 180.186 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (433.011 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 265.608 ms, heap usage 488.686 MB -> 180.204 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (465.629 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 282.134 ms, heap usage 494.186 MB -> 180.189 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (400.286 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 319.203 ms, heap usage 490.694 MB -> 180.187 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (416.982 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 259.433 ms, heap usage 488.187 MB -> 180.202 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (396.622 ms) ======\n"
    },
    "log-regression": {
        "times": [
            13384.279,
            3039.923,
            2590.404,
            2328.598,
            2043.44,
            2118.994,
            2038.933,
            1947.981,
            2036.573,
            2029.457,
            1965.379,
            2138.41,
            2000.336,
            1811.999,
            2180.194
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 106.929 ms, heap usage 190.171 MB -> 63.200 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (6187.539 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.565 ms, heap usage 496.809 MB -> 209.299 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1694.868 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 206.398 ms, heap usage 463.177 MB -> 209.398 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (2003.305 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 212.302 ms, heap usage 459.524 MB -> 209.445 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1621.726 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 223.150 ms, heap usage 335.714 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1269.328 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 263.102 ms, heap usage 387.379 MB -> 209.584 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1332.628 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 345.063 ms, heap usage 301.217 MB -> 209.640 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1334.895 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 238.282 ms, heap usage 362.215 MB -> 209.684 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (1301.701 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 225.459 ms, heap usage 382.839 MB -> 209.728 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (1124.225 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 213.168 ms, heap usage 659.827 MB -> 209.777 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (1152.077 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 234.392 ms, heap usage 214.753 MB -> 209.803 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1177.639 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 246.759 ms, heap usage 382.873 MB -> 209.860 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (1111.159 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 227.666 ms, heap usage 245.014 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (1324.366 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 288.359 ms, heap usage 381.212 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (1081.180 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 334.356 ms, heap usage 245.026 MB -> 209.966 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (1126.707 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 282.368 ms, heap usage 648.690 MB -> 146.565 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (10803.413 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 190.381 ms, heap usage 271.593 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10179.670 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 179.607 ms, heap usage 282.591 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (10419.647 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 174.562 ms, heap usage 532.921 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (10493.156 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 231.739 ms, heap usage 237.340 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (10700.524 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 196.441 ms, heap usage 175.972 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (10559.377 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 201.348 ms, heap usage 321.023 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (10551.392 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 159.797 ms, heap usage 285.547 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (10599.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 184.309 ms, heap usage 379.528 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (10405.099 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 206.129 ms, heap usage 236.996 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (10605.687 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 270.183 ms, heap usage 468.914 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (10370.300 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 180.779 ms, heap usage 271.478 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (10409.936 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 198.113 ms, heap usage 433.421 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (10936.851 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 184.181 ms, heap usage 320.384 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (10691.898 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 184.864 ms, heap usage 267.224 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (10469.996 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 330.267 ms, heap usage 463.183 MB -> 97.773 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (757.078 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 171.930 ms, heap usage 250.324 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (300.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 166.858 ms, heap usage 239.025 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (289.747 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 157.624 ms, heap usage 240.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (263.808 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 155.569 ms, heap usage 239.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (237.639 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 151.505 ms, heap usage 240.407 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (153.299 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 163.224 ms, heap usage 240.296 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (111.494 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 169.931 ms, heap usage 240.860 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (174.875 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 164.186 ms, heap usage 240.402 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (129.886 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 182.958 ms, heap usage 240.314 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (139.095 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 135.178 ms, heap usage 240.838 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (126.878 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 160.496 ms, heap usage 240.372 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (176.428 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 153.128 ms, heap usage 240.406 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (129.888 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 157.830 ms, heap usage 240.359 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (137.771 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 134.312 ms, heap usage 240.381 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (131.295 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 146.262 ms, heap usage 208.123 MB -> 100.661 MB.\n====== db-shootout (database) [default], iteration 0 completed (12404.390 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 178.241 ms, heap usage 254.860 MB -> 167.482 MB.\n====== db-shootout (database) [default], iteration 1 completed (10993.683 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 166.816 ms, heap usage 333.565 MB -> 167.194 MB.\n====== db-shootout (database) [default], iteration 2 completed (10563.322 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 209.258 ms, heap usage 262.956 MB -> 180.567 MB.\n====== db-shootout (database) [default], iteration 3 completed (11630.058 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 178.763 ms, heap usage 202.895 MB -> 177.576 MB.\n====== db-shootout (database) [default], iteration 4 completed (11345.410 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 200.120 ms, heap usage 253.326 MB -> 180.580 MB.\n====== db-shootout (database) [default], iteration 5 completed (11007.588 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 212.320 ms, heap usage 322.388 MB -> 181.162 MB.\n====== db-shootout (database) [default], iteration 6 completed (10530.413 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 153.414 ms, heap usage 259.750 MB -> 181.761 MB.\n====== db-shootout (database) [default], iteration 7 completed (10296.728 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 165.861 ms, heap usage 335.430 MB -> 180.416 MB.\n====== db-shootout (database) [default], iteration 8 completed (11729.260 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 155.114 ms, heap usage 217.493 MB -> 181.582 MB.\n====== db-shootout (database) [default], iteration 9 completed (10253.674 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 256.185 ms, heap usage 382.092 MB -> 181.428 MB.\n====== db-shootout (database) [default], iteration 10 completed (10081.116 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 228.461 ms, heap usage 364.449 MB -> 179.328 MB.\n====== db-shootout (database) [default], iteration 11 completed (10607.645 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 160.768 ms, heap usage 217.618 MB -> 178.374 MB.\n====== db-shootout (database) [default], iteration 12 completed (11800.789 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 162.350 ms, heap usage 327.085 MB -> 176.518 MB.\n====== db-shootout (database) [default], iteration 13 completed (11021.268 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 164.609 ms, heap usage 345.493 MB -> 179.401 MB.\n====== db-shootout (database) [default], iteration 14 completed (10453.547 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39417 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 171.054 ms, heap usage 764.680 MB -> 111.950 MB.\n====== finagle-http (web) [default], iteration 0 completed (23082.922 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 175.625 ms, heap usage 257.530 MB -> 113.944 MB.\n====== finagle-http (web) [default], iteration 1 completed (10425.413 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 192.360 ms, heap usage 142.930 MB -> 114.648 MB.\n====== finagle-http (web) [default], iteration 2 completed (5413.474 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 168.536 ms, heap usage 136.804 MB -> 114.675 MB.\n====== finagle-http (web) [default], iteration 3 completed (4292.558 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 161.104 ms, heap usage 135.231 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 4 completed (4982.604 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 187.983 ms, heap usage 137.549 MB -> 114.682 MB.\n====== finagle-http (web) [default], iteration 5 completed (4510.982 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 160.069 ms, heap usage 135.336 MB -> 114.684 MB.\n====== finagle-http (web) [default], iteration 6 completed (4583.460 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 155.528 ms, heap usage 134.320 MB -> 114.694 MB.\n====== finagle-http (web) [default], iteration 7 completed (4231.741 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 151.912 ms, heap usage 134.424 MB -> 114.757 MB.\n====== finagle-http (web) [default], iteration 8 completed (4629.532 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 135.249 MB -> 114.771 MB.\n====== finagle-http (web) [default], iteration 9 completed (4479.436 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 133.597 ms, heap usage 134.857 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 10 completed (4595.146 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 153.866 ms, heap usage 134.205 MB -> 114.789 MB.\n====== finagle-http (web) [default], iteration 11 completed (4513.085 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 139.530 ms, heap usage 133.233 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 12 completed (4421.906 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 151.855 ms, heap usage 136.255 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 13 completed (4772.345 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 148.653 ms, heap usage 134.209 MB -> 114.759 MB.\n====== finagle-http (web) [default], iteration 14 completed (4171.305 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 171.810 ms, heap usage 149.802 MB -> 115.854 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (20016.203 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 135.623 ms, heap usage 194.455 MB -> 117.112 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (15243.671 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 145.689 ms, heap usage 684.918 MB -> 116.540 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (15173.108 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 197.548 ms, heap usage 691.507 MB -> 116.560 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (14846.662 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 198.578 ms, heap usage 198.756 MB -> 114.731 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (14947.932 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 173.402 ms, heap usage 744.176 MB -> 114.712 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (15877.645 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 219.679 ms, heap usage 158.389 MB -> 113.375 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (15040.873 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 198.390 ms, heap usage 668.182 MB -> 113.378 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (15305.246 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 153.299 ms, heap usage 584.491 MB -> 113.393 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (14977.348 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 146.991 ms, heap usage 750.095 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (15036.507 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 159.673 ms, heap usage 685.262 MB -> 113.386 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (15067.960 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 213.581 ms, heap usage 705.178 MB -> 113.406 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14742.743 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 181.711 ms, heap usage 605.347 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (14916.835 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.081 ms, heap usage 172.060 MB -> 113.404 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (14721.440 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 174.697 ms, heap usage 589.634 MB -> 113.388 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (16424.038 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 186.372 ms, heap usage 735.762 MB -> 126.275 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (14991.979 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 290.688 ms, heap usage 254.907 MB -> 157.853 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3089.060 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 204.835 ms, heap usage 333.769 MB -> 185.965 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2681.550 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 182.933 ms, heap usage 200.364 MB -> 157.821 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (2591.133 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 179.529 ms, heap usage 277.762 MB -> 158.670 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (2299.103 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 200.098 ms, heap usage 210.632 MB -> 158.097 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (2445.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 190.419 ms, heap usage 276.460 MB -> 159.088 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (2371.474 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 174.626 ms, heap usage 222.237 MB -> 186.538 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (2473.615 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 214.512 ms, heap usage 439.245 MB -> 159.900 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (2064.900 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 168.698 ms, heap usage 446.054 MB -> 159.541 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (2257.468 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 237.408 ms, heap usage 234.506 MB -> 186.995 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (2170.313 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 209.799 ms, heap usage 418.506 MB -> 159.781 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (2191.906 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 229.458 ms, heap usage 480.459 MB -> 159.936 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (2138.269 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 211.897 ms, heap usage 466.689 MB -> 160.720 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (2049.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 189.352 ms, heap usage 354.044 MB -> 160.155 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (2040.082 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 194.700 ms, heap usage 295.642 MB -> 143.293 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 56\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 24\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 703\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 11\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 14\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 24\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 12\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 47.51 op/s (47.51 op/s including failed)\nElapsed time: 0.84 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3547.921 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 248.165 ms, heap usage 503.852 MB -> 141.700 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 679\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 703\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 14\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 24\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 12\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 108.11 op/s (108.11 op/s including failed)\nElapsed time: 0.74 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2410.653 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 181.277 ms, heap usage 391.576 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 666\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 703\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 11\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 14\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 24\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 12\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 169.01 op/s (169.01 op/s including failed)\nElapsed time: 0.71 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (2066.546 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 220.955 ms, heap usage 494.149 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 703\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 14\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 24\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 12\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 222.22 op/s (222.22 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1829.661 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 205.050 ms, heap usage 422.764 MB -> 141.687 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 703\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 11\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 14\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 24\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 12\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 333.33 op/s (333.33 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1893.863 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 201.343 ms, heap usage 494.218 MB -> 141.688 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 633\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 703\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 24\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 12\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 363.09 op/s (363.09 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1895.940 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 182.860 ms, heap usage 493.209 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 580\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 703\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 11\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 14\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 24\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 12\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 459.02 op/s (459.02 op/s including failed)\nElapsed time: 0.61 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1952.977 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 305.641 ms, heap usage 493.221 MB -> 141.685 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 541\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 703\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 11\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 14\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 24\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 12\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 576.58 op/s (576.58 op/s including failed)\nElapsed time: 0.56 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1795.886 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 194.826 ms, heap usage 365.744 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 18\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 730\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 11\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 14\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 24\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 12\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 473.68 op/s (473.68 op/s including failed)\nElapsed time: 0.76 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1976.848 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 197.099 ms, heap usage 498.182 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 730\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 11\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 14\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 24\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 12\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 613.50 op/s (613.50 op/s including failed)\nElapsed time: 0.65 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1874.670 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 220.616 ms, heap usage 412.582 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 730\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 11\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 14\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 24\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 12\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 739.50 op/s (739.50 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1809.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 229.427 ms, heap usage 493.244 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 579\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 730\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 11\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 24\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 12\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 797.34 op/s (797.34 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (2027.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 233.061 ms, heap usage 493.236 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 619\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 730\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 11\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 14\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 24\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 12\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 791.48 op/s (791.48 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1977.936 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 260.927 ms, heap usage 493.244 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 730\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 11\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 14\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 24\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 12\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 750.67 op/s (750.67 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (2141.642 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 267.832 ms, heap usage 407.307 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 601\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 730\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 11\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 14\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 12\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 966.18 op/s (966.18 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1865.933 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 196.610 ms, heap usage 166.694 MB -> 152.381 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (58120.386 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 314.055 ms, heap usage 442.788 MB -> 428.544 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (32227.208 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 272.478 ms, heap usage 439.699 MB -> 428.679 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (32368.500 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 367.651 ms, heap usage 531.599 MB -> 428.772 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (31930.918 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 299.299 ms, heap usage 447.937 MB -> 429.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (31541.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 287.549 ms, heap usage 447.896 MB -> 429.397 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (32105.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 277.492 ms, heap usage 446.758 MB -> 426.946 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (30103.488 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 252.894 ms, heap usage 642.931 MB -> 426.553 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (30495.558 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 240.060 ms, heap usage 452.457 MB -> 424.504 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (30590.481 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 248.503 ms, heap usage 435.730 MB -> 424.249 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (30206.652 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 249.386 ms, heap usage 525.208 MB -> 422.576 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (28775.738 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 303.313 ms, heap usage 742.561 MB -> 421.722 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (29893.644 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 240.840 ms, heap usage 637.025 MB -> 421.841 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (30188.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 249.257 ms, heap usage 742.673 MB -> 421.908 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (29940.902 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 203.730 ms, heap usage 760.930 MB -> 421.991 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (30274.413 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 255.470 ms, heap usage 699.724 MB -> 167.378 MB.\n====== als (apache-spark) [default], iteration 0 completed (22015.250 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 350.433 ms, heap usage 344.646 MB -> 192.150 MB.\n====== als (apache-spark) [default], iteration 1 completed (11444.600 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 316.353 ms, heap usage 707.581 MB -> 193.415 MB.\n====== als (apache-spark) [default], iteration 2 completed (10696.504 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 307.867 ms, heap usage 647.009 MB -> 194.023 MB.\n====== als (apache-spark) [default], iteration 3 completed (10216.778 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 267.954 ms, heap usage 683.784 MB -> 194.638 MB.\n====== als (apache-spark) [default], iteration 4 completed (9859.064 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 281.111 ms, heap usage 428.967 MB -> 194.996 MB.\n====== als (apache-spark) [default], iteration 5 completed (9616.145 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 297.340 ms, heap usage 369.268 MB -> 195.120 MB.\n====== als (apache-spark) [default], iteration 6 completed (9813.018 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 264.187 ms, heap usage 561.294 MB -> 196.222 MB.\n====== als (apache-spark) [default], iteration 7 completed (9917.177 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 302.104 ms, heap usage 692.182 MB -> 196.730 MB.\n====== als (apache-spark) [default], iteration 8 completed (9790.625 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 327.750 ms, heap usage 843.970 MB -> 197.512 MB.\n====== als (apache-spark) [default], iteration 9 completed (9239.064 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 261.342 ms, heap usage 334.900 MB -> 197.328 MB.\n====== als (apache-spark) [default], iteration 10 completed (9458.038 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 325.571 ms, heap usage 275.451 MB -> 197.311 MB.\n====== als (apache-spark) [default], iteration 11 completed (9574.332 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 301.606 ms, heap usage 743.440 MB -> 198.064 MB.\n====== als (apache-spark) [default], iteration 12 completed (9571.358 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 344.298 ms, heap usage 701.230 MB -> 198.205 MB.\n====== als (apache-spark) [default], iteration 13 completed (9288.113 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 285.187 ms, heap usage 275.595 MB -> 197.793 MB.\n====== als (apache-spark) [default], iteration 14 completed (9172.803 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 293.096 ms, heap usage 826.511 MB -> 178.953 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5562.022 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 271.376 ms, heap usage 349.017 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5303.620 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 251.125 ms, heap usage 312.552 MB -> 179.004 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (5220.150 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 336.890 ms, heap usage 324.760 MB -> 179.012 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (5286.316 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 264.682 ms, heap usage 310.802 MB -> 178.981 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (5890.750 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 308.278 ms, heap usage 309.802 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (5240.279 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 258.806 ms, heap usage 309.302 MB -> 178.998 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (5555.636 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 326.386 ms, heap usage 309.802 MB -> 178.993 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (5388.352 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 337.023 ms, heap usage 299.802 MB -> 178.978 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (6068.267 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 248.524 ms, heap usage 316.179 MB -> 178.983 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4606.540 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 256.606 ms, heap usage 312.478 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4824.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 320.290 ms, heap usage 317.302 MB -> 178.993 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (5334.941 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 248.608 ms, heap usage 382.537 MB -> 178.998 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (5360.162 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 257.061 ms, heap usage 302.802 MB -> 178.982 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (5565.972 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 279.204 ms, heap usage 309.302 MB -> 178.997 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (5500.409 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 404.952 ms, heap usage 351.931 MB -> 201.232 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (528.915 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 314.014 ms, heap usage 230.732 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (192.925 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 283.646 ms, heap usage 231.267 MB -> 201.280 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (208.607 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 264.196 ms, heap usage 231.272 MB -> 201.264 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (201.168 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 275.380 ms, heap usage 231.267 MB -> 201.265 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (195.448 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 276.700 ms, heap usage 231.265 MB -> 201.267 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (193.883 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 270.527 ms, heap usage 231.265 MB -> 201.267 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (192.752 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 298.673 ms, heap usage 231.265 MB -> 201.285 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (190.588 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 276.502 ms, heap usage 231.265 MB -> 201.280 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (196.294 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 282.001 ms, heap usage 231.265 MB -> 201.265 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (187.710 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 274.661 ms, heap usage 231.265 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (205.994 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 324.576 ms, heap usage 231.273 MB -> 201.285 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (196.845 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 330.213 ms, heap usage 231.265 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (185.100 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 318.153 ms, heap usage 231.265 MB -> 201.281 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (205.909 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 270.804 ms, heap usage 231.273 MB -> 201.269 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (206.182 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 314.737 ms, heap usage 232.766 MB -> 180.295 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1378.007 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 261.201 ms, heap usage 506.267 MB -> 180.191 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (575.902 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 254.781 ms, heap usage 480.688 MB -> 180.185 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (556.882 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 266.955 ms, heap usage 494.185 MB -> 180.186 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (431.271 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 327.384 ms, heap usage 488.686 MB -> 180.186 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (504.430 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 298.076 ms, heap usage 490.686 MB -> 180.206 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (449.552 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 285.466 ms, heap usage 489.186 MB -> 180.196 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (447.054 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 264.792 ms, heap usage 492.186 MB -> 180.209 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (445.125 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 339.222 ms, heap usage 493.686 MB -> 180.189 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (501.871 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 263.772 ms, heap usage 494.686 MB -> 180.207 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (456.366 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 310.936 ms, heap usage 493.186 MB -> 180.186 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (433.011 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 265.608 ms, heap usage 488.686 MB -> 180.204 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (465.629 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 282.134 ms, heap usage 494.186 MB -> 180.189 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (400.286 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 319.203 ms, heap usage 490.694 MB -> 180.187 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (416.982 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 259.433 ms, heap usage 488.187 MB -> 180.202 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (396.622 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 343.495 ms, heap usage 400.529 MB -> 192.068 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (13384.279 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 370.814 ms, heap usage 801.557 MB -> 272.923 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (3039.923 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 434.335 ms, heap usage 674.149 MB -> 272.987 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (2590.404 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 275.204 ms, heap usage 782.439 MB -> 273.857 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (2328.598 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 281.930 ms, heap usage 804.824 MB -> 274.283 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (2043.440 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 299.552 ms, heap usage 785.726 MB -> 274.330 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (2118.994 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 266.508 ms, heap usage 781.159 MB -> 274.639 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (2038.933 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 301.837 ms, heap usage 773.248 MB -> 274.788 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1947.981 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 301.024 ms, heap usage 790.752 MB -> 276.192 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (2036.573 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 270.570 ms, heap usage 781.218 MB -> 275.263 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (2029.457 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 322.206 ms, heap usage 771.255 MB -> 275.344 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1965.379 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 275.481 ms, heap usage 787.081 MB -> 276.111 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (2138.410 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 359.685 ms, heap usage 773.508 MB -> 275.667 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (2000.336 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 339.421 ms, heap usage 786.372 MB -> 276.665 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1811.999 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 325.664 ms, heap usage 784.908 MB -> 276.140 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (2180.194 ms) ======\n"
    },
    "gauss-mix": {
        "times": [
            28647.863,
            19851.827,
            18800.787,
            18872.396,
            17041.003,
            17747.673,
            17422.806,
            17271.624,
            15950.833,
            16296.144,
            16968.823,
            15657.866,
            16581.067,
            16176.639,
            15460.779
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 106.929 ms, heap usage 190.171 MB -> 63.200 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (6187.539 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.565 ms, heap usage 496.809 MB -> 209.299 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1694.868 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 206.398 ms, heap usage 463.177 MB -> 209.398 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (2003.305 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 212.302 ms, heap usage 459.524 MB -> 209.445 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1621.726 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 223.150 ms, heap usage 335.714 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1269.328 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 263.102 ms, heap usage 387.379 MB -> 209.584 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1332.628 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 345.063 ms, heap usage 301.217 MB -> 209.640 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1334.895 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 238.282 ms, heap usage 362.215 MB -> 209.684 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (1301.701 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 225.459 ms, heap usage 382.839 MB -> 209.728 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (1124.225 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 213.168 ms, heap usage 659.827 MB -> 209.777 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (1152.077 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 234.392 ms, heap usage 214.753 MB -> 209.803 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1177.639 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 246.759 ms, heap usage 382.873 MB -> 209.860 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (1111.159 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 227.666 ms, heap usage 245.014 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (1324.366 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 288.359 ms, heap usage 381.212 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (1081.180 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 334.356 ms, heap usage 245.026 MB -> 209.966 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (1126.707 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 282.368 ms, heap usage 648.690 MB -> 146.565 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (10803.413 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 190.381 ms, heap usage 271.593 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10179.670 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 179.607 ms, heap usage 282.591 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (10419.647 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 174.562 ms, heap usage 532.921 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (10493.156 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 231.739 ms, heap usage 237.340 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (10700.524 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 196.441 ms, heap usage 175.972 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (10559.377 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 201.348 ms, heap usage 321.023 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (10551.392 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 159.797 ms, heap usage 285.547 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (10599.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 184.309 ms, heap usage 379.528 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (10405.099 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 206.129 ms, heap usage 236.996 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (10605.687 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 270.183 ms, heap usage 468.914 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (10370.300 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 180.779 ms, heap usage 271.478 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (10409.936 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 198.113 ms, heap usage 433.421 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (10936.851 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 184.181 ms, heap usage 320.384 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (10691.898 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 184.864 ms, heap usage 267.224 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (10469.996 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 330.267 ms, heap usage 463.183 MB -> 97.773 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (757.078 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 171.930 ms, heap usage 250.324 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (300.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 166.858 ms, heap usage 239.025 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (289.747 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 157.624 ms, heap usage 240.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (263.808 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 155.569 ms, heap usage 239.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (237.639 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 151.505 ms, heap usage 240.407 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (153.299 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 163.224 ms, heap usage 240.296 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (111.494 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 169.931 ms, heap usage 240.860 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (174.875 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 164.186 ms, heap usage 240.402 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (129.886 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 182.958 ms, heap usage 240.314 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (139.095 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 135.178 ms, heap usage 240.838 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (126.878 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 160.496 ms, heap usage 240.372 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (176.428 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 153.128 ms, heap usage 240.406 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (129.888 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 157.830 ms, heap usage 240.359 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (137.771 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 134.312 ms, heap usage 240.381 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (131.295 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 146.262 ms, heap usage 208.123 MB -> 100.661 MB.\n====== db-shootout (database) [default], iteration 0 completed (12404.390 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 178.241 ms, heap usage 254.860 MB -> 167.482 MB.\n====== db-shootout (database) [default], iteration 1 completed (10993.683 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 166.816 ms, heap usage 333.565 MB -> 167.194 MB.\n====== db-shootout (database) [default], iteration 2 completed (10563.322 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 209.258 ms, heap usage 262.956 MB -> 180.567 MB.\n====== db-shootout (database) [default], iteration 3 completed (11630.058 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 178.763 ms, heap usage 202.895 MB -> 177.576 MB.\n====== db-shootout (database) [default], iteration 4 completed (11345.410 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 200.120 ms, heap usage 253.326 MB -> 180.580 MB.\n====== db-shootout (database) [default], iteration 5 completed (11007.588 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 212.320 ms, heap usage 322.388 MB -> 181.162 MB.\n====== db-shootout (database) [default], iteration 6 completed (10530.413 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 153.414 ms, heap usage 259.750 MB -> 181.761 MB.\n====== db-shootout (database) [default], iteration 7 completed (10296.728 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 165.861 ms, heap usage 335.430 MB -> 180.416 MB.\n====== db-shootout (database) [default], iteration 8 completed (11729.260 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 155.114 ms, heap usage 217.493 MB -> 181.582 MB.\n====== db-shootout (database) [default], iteration 9 completed (10253.674 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 256.185 ms, heap usage 382.092 MB -> 181.428 MB.\n====== db-shootout (database) [default], iteration 10 completed (10081.116 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 228.461 ms, heap usage 364.449 MB -> 179.328 MB.\n====== db-shootout (database) [default], iteration 11 completed (10607.645 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 160.768 ms, heap usage 217.618 MB -> 178.374 MB.\n====== db-shootout (database) [default], iteration 12 completed (11800.789 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 162.350 ms, heap usage 327.085 MB -> 176.518 MB.\n====== db-shootout (database) [default], iteration 13 completed (11021.268 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 164.609 ms, heap usage 345.493 MB -> 179.401 MB.\n====== db-shootout (database) [default], iteration 14 completed (10453.547 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39417 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 171.054 ms, heap usage 764.680 MB -> 111.950 MB.\n====== finagle-http (web) [default], iteration 0 completed (23082.922 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 175.625 ms, heap usage 257.530 MB -> 113.944 MB.\n====== finagle-http (web) [default], iteration 1 completed (10425.413 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 192.360 ms, heap usage 142.930 MB -> 114.648 MB.\n====== finagle-http (web) [default], iteration 2 completed (5413.474 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 168.536 ms, heap usage 136.804 MB -> 114.675 MB.\n====== finagle-http (web) [default], iteration 3 completed (4292.558 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 161.104 ms, heap usage 135.231 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 4 completed (4982.604 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 187.983 ms, heap usage 137.549 MB -> 114.682 MB.\n====== finagle-http (web) [default], iteration 5 completed (4510.982 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 160.069 ms, heap usage 135.336 MB -> 114.684 MB.\n====== finagle-http (web) [default], iteration 6 completed (4583.460 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 155.528 ms, heap usage 134.320 MB -> 114.694 MB.\n====== finagle-http (web) [default], iteration 7 completed (4231.741 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 151.912 ms, heap usage 134.424 MB -> 114.757 MB.\n====== finagle-http (web) [default], iteration 8 completed (4629.532 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 135.249 MB -> 114.771 MB.\n====== finagle-http (web) [default], iteration 9 completed (4479.436 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 133.597 ms, heap usage 134.857 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 10 completed (4595.146 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 153.866 ms, heap usage 134.205 MB -> 114.789 MB.\n====== finagle-http (web) [default], iteration 11 completed (4513.085 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 139.530 ms, heap usage 133.233 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 12 completed (4421.906 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 151.855 ms, heap usage 136.255 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 13 completed (4772.345 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 148.653 ms, heap usage 134.209 MB -> 114.759 MB.\n====== finagle-http (web) [default], iteration 14 completed (4171.305 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 171.810 ms, heap usage 149.802 MB -> 115.854 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (20016.203 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 135.623 ms, heap usage 194.455 MB -> 117.112 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (15243.671 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 145.689 ms, heap usage 684.918 MB -> 116.540 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (15173.108 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 197.548 ms, heap usage 691.507 MB -> 116.560 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (14846.662 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 198.578 ms, heap usage 198.756 MB -> 114.731 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (14947.932 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 173.402 ms, heap usage 744.176 MB -> 114.712 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (15877.645 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 219.679 ms, heap usage 158.389 MB -> 113.375 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (15040.873 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 198.390 ms, heap usage 668.182 MB -> 113.378 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (15305.246 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 153.299 ms, heap usage 584.491 MB -> 113.393 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (14977.348 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 146.991 ms, heap usage 750.095 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (15036.507 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 159.673 ms, heap usage 685.262 MB -> 113.386 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (15067.960 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 213.581 ms, heap usage 705.178 MB -> 113.406 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14742.743 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 181.711 ms, heap usage 605.347 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (14916.835 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.081 ms, heap usage 172.060 MB -> 113.404 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (14721.440 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 174.697 ms, heap usage 589.634 MB -> 113.388 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (16424.038 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 186.372 ms, heap usage 735.762 MB -> 126.275 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (14991.979 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 290.688 ms, heap usage 254.907 MB -> 157.853 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3089.060 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 204.835 ms, heap usage 333.769 MB -> 185.965 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2681.550 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 182.933 ms, heap usage 200.364 MB -> 157.821 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (2591.133 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 179.529 ms, heap usage 277.762 MB -> 158.670 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (2299.103 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 200.098 ms, heap usage 210.632 MB -> 158.097 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (2445.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 190.419 ms, heap usage 276.460 MB -> 159.088 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (2371.474 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 174.626 ms, heap usage 222.237 MB -> 186.538 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (2473.615 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 214.512 ms, heap usage 439.245 MB -> 159.900 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (2064.900 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 168.698 ms, heap usage 446.054 MB -> 159.541 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (2257.468 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 237.408 ms, heap usage 234.506 MB -> 186.995 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (2170.313 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 209.799 ms, heap usage 418.506 MB -> 159.781 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (2191.906 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 229.458 ms, heap usage 480.459 MB -> 159.936 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (2138.269 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 211.897 ms, heap usage 466.689 MB -> 160.720 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (2049.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 189.352 ms, heap usage 354.044 MB -> 160.155 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (2040.082 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 194.700 ms, heap usage 295.642 MB -> 143.293 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 56\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 24\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 703\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 11\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 14\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 24\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 12\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 47.51 op/s (47.51 op/s including failed)\nElapsed time: 0.84 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3547.921 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 248.165 ms, heap usage 503.852 MB -> 141.700 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 679\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 703\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 14\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 24\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 12\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 108.11 op/s (108.11 op/s including failed)\nElapsed time: 0.74 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2410.653 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 181.277 ms, heap usage 391.576 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 666\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 703\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 11\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 14\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 24\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 12\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 169.01 op/s (169.01 op/s including failed)\nElapsed time: 0.71 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (2066.546 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 220.955 ms, heap usage 494.149 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 703\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 14\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 24\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 12\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 222.22 op/s (222.22 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1829.661 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 205.050 ms, heap usage 422.764 MB -> 141.687 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 703\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 11\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 14\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 24\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 12\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 333.33 op/s (333.33 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1893.863 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 201.343 ms, heap usage 494.218 MB -> 141.688 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 633\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 703\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 24\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 12\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 363.09 op/s (363.09 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1895.940 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 182.860 ms, heap usage 493.209 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 580\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 703\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 11\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 14\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 24\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 12\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 459.02 op/s (459.02 op/s including failed)\nElapsed time: 0.61 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1952.977 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 305.641 ms, heap usage 493.221 MB -> 141.685 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 541\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 703\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 11\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 14\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 24\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 12\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 576.58 op/s (576.58 op/s including failed)\nElapsed time: 0.56 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1795.886 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 194.826 ms, heap usage 365.744 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 18\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 730\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 11\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 14\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 24\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 12\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 473.68 op/s (473.68 op/s including failed)\nElapsed time: 0.76 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1976.848 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 197.099 ms, heap usage 498.182 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 730\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 11\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 14\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 24\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 12\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 613.50 op/s (613.50 op/s including failed)\nElapsed time: 0.65 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1874.670 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 220.616 ms, heap usage 412.582 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 730\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 11\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 14\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 24\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 12\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 739.50 op/s (739.50 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1809.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 229.427 ms, heap usage 493.244 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 579\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 730\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 11\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 24\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 12\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 797.34 op/s (797.34 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (2027.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 233.061 ms, heap usage 493.236 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 619\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 730\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 11\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 14\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 24\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 12\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 791.48 op/s (791.48 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1977.936 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 260.927 ms, heap usage 493.244 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 730\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 11\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 14\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 24\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 12\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 750.67 op/s (750.67 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (2141.642 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 267.832 ms, heap usage 407.307 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 601\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 730\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 11\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 14\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 12\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 966.18 op/s (966.18 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1865.933 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 196.610 ms, heap usage 166.694 MB -> 152.381 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (58120.386 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 314.055 ms, heap usage 442.788 MB -> 428.544 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (32227.208 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 272.478 ms, heap usage 439.699 MB -> 428.679 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (32368.500 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 367.651 ms, heap usage 531.599 MB -> 428.772 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (31930.918 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 299.299 ms, heap usage 447.937 MB -> 429.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (31541.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 287.549 ms, heap usage 447.896 MB -> 429.397 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (32105.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 277.492 ms, heap usage 446.758 MB -> 426.946 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (30103.488 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 252.894 ms, heap usage 642.931 MB -> 426.553 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (30495.558 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 240.060 ms, heap usage 452.457 MB -> 424.504 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (30590.481 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 248.503 ms, heap usage 435.730 MB -> 424.249 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (30206.652 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 249.386 ms, heap usage 525.208 MB -> 422.576 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (28775.738 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 303.313 ms, heap usage 742.561 MB -> 421.722 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (29893.644 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 240.840 ms, heap usage 637.025 MB -> 421.841 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (30188.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 249.257 ms, heap usage 742.673 MB -> 421.908 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (29940.902 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 203.730 ms, heap usage 760.930 MB -> 421.991 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (30274.413 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 255.470 ms, heap usage 699.724 MB -> 167.378 MB.\n====== als (apache-spark) [default], iteration 0 completed (22015.250 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 350.433 ms, heap usage 344.646 MB -> 192.150 MB.\n====== als (apache-spark) [default], iteration 1 completed (11444.600 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 316.353 ms, heap usage 707.581 MB -> 193.415 MB.\n====== als (apache-spark) [default], iteration 2 completed (10696.504 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 307.867 ms, heap usage 647.009 MB -> 194.023 MB.\n====== als (apache-spark) [default], iteration 3 completed (10216.778 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 267.954 ms, heap usage 683.784 MB -> 194.638 MB.\n====== als (apache-spark) [default], iteration 4 completed (9859.064 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 281.111 ms, heap usage 428.967 MB -> 194.996 MB.\n====== als (apache-spark) [default], iteration 5 completed (9616.145 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 297.340 ms, heap usage 369.268 MB -> 195.120 MB.\n====== als (apache-spark) [default], iteration 6 completed (9813.018 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 264.187 ms, heap usage 561.294 MB -> 196.222 MB.\n====== als (apache-spark) [default], iteration 7 completed (9917.177 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 302.104 ms, heap usage 692.182 MB -> 196.730 MB.\n====== als (apache-spark) [default], iteration 8 completed (9790.625 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 327.750 ms, heap usage 843.970 MB -> 197.512 MB.\n====== als (apache-spark) [default], iteration 9 completed (9239.064 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 261.342 ms, heap usage 334.900 MB -> 197.328 MB.\n====== als (apache-spark) [default], iteration 10 completed (9458.038 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 325.571 ms, heap usage 275.451 MB -> 197.311 MB.\n====== als (apache-spark) [default], iteration 11 completed (9574.332 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 301.606 ms, heap usage 743.440 MB -> 198.064 MB.\n====== als (apache-spark) [default], iteration 12 completed (9571.358 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 344.298 ms, heap usage 701.230 MB -> 198.205 MB.\n====== als (apache-spark) [default], iteration 13 completed (9288.113 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 285.187 ms, heap usage 275.595 MB -> 197.793 MB.\n====== als (apache-spark) [default], iteration 14 completed (9172.803 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 293.096 ms, heap usage 826.511 MB -> 178.953 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5562.022 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 271.376 ms, heap usage 349.017 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5303.620 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 251.125 ms, heap usage 312.552 MB -> 179.004 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (5220.150 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 336.890 ms, heap usage 324.760 MB -> 179.012 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (5286.316 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 264.682 ms, heap usage 310.802 MB -> 178.981 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (5890.750 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 308.278 ms, heap usage 309.802 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (5240.279 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 258.806 ms, heap usage 309.302 MB -> 178.998 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (5555.636 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 326.386 ms, heap usage 309.802 MB -> 178.993 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (5388.352 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 337.023 ms, heap usage 299.802 MB -> 178.978 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (6068.267 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 248.524 ms, heap usage 316.179 MB -> 178.983 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4606.540 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 256.606 ms, heap usage 312.478 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4824.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 320.290 ms, heap usage 317.302 MB -> 178.993 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (5334.941 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 248.608 ms, heap usage 382.537 MB -> 178.998 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (5360.162 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 257.061 ms, heap usage 302.802 MB -> 178.982 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (5565.972 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 279.204 ms, heap usage 309.302 MB -> 178.997 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (5500.409 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 404.952 ms, heap usage 351.931 MB -> 201.232 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (528.915 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 314.014 ms, heap usage 230.732 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (192.925 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 283.646 ms, heap usage 231.267 MB -> 201.280 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (208.607 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 264.196 ms, heap usage 231.272 MB -> 201.264 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (201.168 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 275.380 ms, heap usage 231.267 MB -> 201.265 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (195.448 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 276.700 ms, heap usage 231.265 MB -> 201.267 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (193.883 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 270.527 ms, heap usage 231.265 MB -> 201.267 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (192.752 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 298.673 ms, heap usage 231.265 MB -> 201.285 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (190.588 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 276.502 ms, heap usage 231.265 MB -> 201.280 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (196.294 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 282.001 ms, heap usage 231.265 MB -> 201.265 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (187.710 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 274.661 ms, heap usage 231.265 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (205.994 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 324.576 ms, heap usage 231.273 MB -> 201.285 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (196.845 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 330.213 ms, heap usage 231.265 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (185.100 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 318.153 ms, heap usage 231.265 MB -> 201.281 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (205.909 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 270.804 ms, heap usage 231.273 MB -> 201.269 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (206.182 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 314.737 ms, heap usage 232.766 MB -> 180.295 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1378.007 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 261.201 ms, heap usage 506.267 MB -> 180.191 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (575.902 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 254.781 ms, heap usage 480.688 MB -> 180.185 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (556.882 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 266.955 ms, heap usage 494.185 MB -> 180.186 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (431.271 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 327.384 ms, heap usage 488.686 MB -> 180.186 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (504.430 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 298.076 ms, heap usage 490.686 MB -> 180.206 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (449.552 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 285.466 ms, heap usage 489.186 MB -> 180.196 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (447.054 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 264.792 ms, heap usage 492.186 MB -> 180.209 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (445.125 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 339.222 ms, heap usage 493.686 MB -> 180.189 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (501.871 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 263.772 ms, heap usage 494.686 MB -> 180.207 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (456.366 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 310.936 ms, heap usage 493.186 MB -> 180.186 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (433.011 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 265.608 ms, heap usage 488.686 MB -> 180.204 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (465.629 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 282.134 ms, heap usage 494.186 MB -> 180.189 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (400.286 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 319.203 ms, heap usage 490.694 MB -> 180.187 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (416.982 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 259.433 ms, heap usage 488.187 MB -> 180.202 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (396.622 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 343.495 ms, heap usage 400.529 MB -> 192.068 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (13384.279 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 370.814 ms, heap usage 801.557 MB -> 272.923 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (3039.923 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 434.335 ms, heap usage 674.149 MB -> 272.987 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (2590.404 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 275.204 ms, heap usage 782.439 MB -> 273.857 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (2328.598 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 281.930 ms, heap usage 804.824 MB -> 274.283 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (2043.440 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 299.552 ms, heap usage 785.726 MB -> 274.330 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (2118.994 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 266.508 ms, heap usage 781.159 MB -> 274.639 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (2038.933 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 301.837 ms, heap usage 773.248 MB -> 274.788 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1947.981 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 301.024 ms, heap usage 790.752 MB -> 276.192 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (2036.573 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 270.570 ms, heap usage 781.218 MB -> 275.263 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (2029.457 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 322.206 ms, heap usage 771.255 MB -> 275.344 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1965.379 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 275.481 ms, heap usage 787.081 MB -> 276.111 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (2138.410 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 359.685 ms, heap usage 773.508 MB -> 275.667 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (2000.336 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 339.421 ms, heap usage 786.372 MB -> 276.665 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1811.999 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 325.664 ms, heap usage 784.908 MB -> 276.140 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (2180.194 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 400.231 ms, heap usage 629.663 MB -> 209.060 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (28647.863 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 318.437 ms, heap usage 707.267 MB -> 216.073 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (19851.827 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 438.073 ms, heap usage 807.430 MB -> 215.824 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (18800.787 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 414.999 ms, heap usage 436.901 MB -> 217.054 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (18872.396 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 316.131 ms, heap usage 821.956 MB -> 218.136 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (17041.003 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 305.158 ms, heap usage 387.475 MB -> 217.699 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (17747.673 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 346.532 ms, heap usage 710.963 MB -> 218.025 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (17422.806 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 335.379 ms, heap usage 254.501 MB -> 217.794 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (17271.624 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 354.728 ms, heap usage 297.155 MB -> 218.075 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (15950.833 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 357.761 ms, heap usage 480.461 MB -> 217.970 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (16296.144 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 345.888 ms, heap usage 549.889 MB -> 217.898 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (16968.823 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 335.766 ms, heap usage 308.680 MB -> 218.011 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (15657.866 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 350.688 ms, heap usage 743.584 MB -> 217.995 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (16581.067 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 313.803 ms, heap usage 718.157 MB -> 218.154 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (16176.639 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 366.079 ms, heap usage 446.719 MB -> 217.979 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (15460.779 ms) ======\n"
    },
    "mnemonics": {
        "times": [
            5825.169,
            5175.165,
            6273.445,
            5964.075,
            6267.783,
            5136.938,
            6401.145,
            6174.827,
            6389.615,
            6011.971,
            5366.309,
            5020.085,
            4772.518,
            4677.72,
            4875.555
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 106.929 ms, heap usage 190.171 MB -> 63.200 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (6187.539 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.565 ms, heap usage 496.809 MB -> 209.299 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1694.868 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 206.398 ms, heap usage 463.177 MB -> 209.398 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (2003.305 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 212.302 ms, heap usage 459.524 MB -> 209.445 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1621.726 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 223.150 ms, heap usage 335.714 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1269.328 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 263.102 ms, heap usage 387.379 MB -> 209.584 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1332.628 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 345.063 ms, heap usage 301.217 MB -> 209.640 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1334.895 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 238.282 ms, heap usage 362.215 MB -> 209.684 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (1301.701 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 225.459 ms, heap usage 382.839 MB -> 209.728 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (1124.225 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 213.168 ms, heap usage 659.827 MB -> 209.777 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (1152.077 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 234.392 ms, heap usage 214.753 MB -> 209.803 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1177.639 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 246.759 ms, heap usage 382.873 MB -> 209.860 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (1111.159 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 227.666 ms, heap usage 245.014 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (1324.366 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 288.359 ms, heap usage 381.212 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (1081.180 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 334.356 ms, heap usage 245.026 MB -> 209.966 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (1126.707 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 282.368 ms, heap usage 648.690 MB -> 146.565 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (10803.413 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 190.381 ms, heap usage 271.593 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10179.670 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 179.607 ms, heap usage 282.591 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (10419.647 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 174.562 ms, heap usage 532.921 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (10493.156 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 231.739 ms, heap usage 237.340 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (10700.524 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 196.441 ms, heap usage 175.972 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (10559.377 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 201.348 ms, heap usage 321.023 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (10551.392 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 159.797 ms, heap usage 285.547 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (10599.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 184.309 ms, heap usage 379.528 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (10405.099 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 206.129 ms, heap usage 236.996 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (10605.687 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 270.183 ms, heap usage 468.914 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (10370.300 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 180.779 ms, heap usage 271.478 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (10409.936 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 198.113 ms, heap usage 433.421 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (10936.851 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 184.181 ms, heap usage 320.384 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (10691.898 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 184.864 ms, heap usage 267.224 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (10469.996 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 330.267 ms, heap usage 463.183 MB -> 97.773 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (757.078 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 171.930 ms, heap usage 250.324 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (300.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 166.858 ms, heap usage 239.025 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (289.747 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 157.624 ms, heap usage 240.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (263.808 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 155.569 ms, heap usage 239.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (237.639 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 151.505 ms, heap usage 240.407 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (153.299 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 163.224 ms, heap usage 240.296 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (111.494 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 169.931 ms, heap usage 240.860 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (174.875 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 164.186 ms, heap usage 240.402 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (129.886 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 182.958 ms, heap usage 240.314 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (139.095 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 135.178 ms, heap usage 240.838 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (126.878 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 160.496 ms, heap usage 240.372 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (176.428 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 153.128 ms, heap usage 240.406 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (129.888 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 157.830 ms, heap usage 240.359 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (137.771 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 134.312 ms, heap usage 240.381 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (131.295 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 146.262 ms, heap usage 208.123 MB -> 100.661 MB.\n====== db-shootout (database) [default], iteration 0 completed (12404.390 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 178.241 ms, heap usage 254.860 MB -> 167.482 MB.\n====== db-shootout (database) [default], iteration 1 completed (10993.683 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 166.816 ms, heap usage 333.565 MB -> 167.194 MB.\n====== db-shootout (database) [default], iteration 2 completed (10563.322 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 209.258 ms, heap usage 262.956 MB -> 180.567 MB.\n====== db-shootout (database) [default], iteration 3 completed (11630.058 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 178.763 ms, heap usage 202.895 MB -> 177.576 MB.\n====== db-shootout (database) [default], iteration 4 completed (11345.410 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 200.120 ms, heap usage 253.326 MB -> 180.580 MB.\n====== db-shootout (database) [default], iteration 5 completed (11007.588 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 212.320 ms, heap usage 322.388 MB -> 181.162 MB.\n====== db-shootout (database) [default], iteration 6 completed (10530.413 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 153.414 ms, heap usage 259.750 MB -> 181.761 MB.\n====== db-shootout (database) [default], iteration 7 completed (10296.728 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 165.861 ms, heap usage 335.430 MB -> 180.416 MB.\n====== db-shootout (database) [default], iteration 8 completed (11729.260 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 155.114 ms, heap usage 217.493 MB -> 181.582 MB.\n====== db-shootout (database) [default], iteration 9 completed (10253.674 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 256.185 ms, heap usage 382.092 MB -> 181.428 MB.\n====== db-shootout (database) [default], iteration 10 completed (10081.116 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 228.461 ms, heap usage 364.449 MB -> 179.328 MB.\n====== db-shootout (database) [default], iteration 11 completed (10607.645 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 160.768 ms, heap usage 217.618 MB -> 178.374 MB.\n====== db-shootout (database) [default], iteration 12 completed (11800.789 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 162.350 ms, heap usage 327.085 MB -> 176.518 MB.\n====== db-shootout (database) [default], iteration 13 completed (11021.268 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 164.609 ms, heap usage 345.493 MB -> 179.401 MB.\n====== db-shootout (database) [default], iteration 14 completed (10453.547 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39417 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 171.054 ms, heap usage 764.680 MB -> 111.950 MB.\n====== finagle-http (web) [default], iteration 0 completed (23082.922 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 175.625 ms, heap usage 257.530 MB -> 113.944 MB.\n====== finagle-http (web) [default], iteration 1 completed (10425.413 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 192.360 ms, heap usage 142.930 MB -> 114.648 MB.\n====== finagle-http (web) [default], iteration 2 completed (5413.474 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 168.536 ms, heap usage 136.804 MB -> 114.675 MB.\n====== finagle-http (web) [default], iteration 3 completed (4292.558 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 161.104 ms, heap usage 135.231 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 4 completed (4982.604 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 187.983 ms, heap usage 137.549 MB -> 114.682 MB.\n====== finagle-http (web) [default], iteration 5 completed (4510.982 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 160.069 ms, heap usage 135.336 MB -> 114.684 MB.\n====== finagle-http (web) [default], iteration 6 completed (4583.460 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 155.528 ms, heap usage 134.320 MB -> 114.694 MB.\n====== finagle-http (web) [default], iteration 7 completed (4231.741 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 151.912 ms, heap usage 134.424 MB -> 114.757 MB.\n====== finagle-http (web) [default], iteration 8 completed (4629.532 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 135.249 MB -> 114.771 MB.\n====== finagle-http (web) [default], iteration 9 completed (4479.436 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 133.597 ms, heap usage 134.857 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 10 completed (4595.146 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 153.866 ms, heap usage 134.205 MB -> 114.789 MB.\n====== finagle-http (web) [default], iteration 11 completed (4513.085 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 139.530 ms, heap usage 133.233 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 12 completed (4421.906 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 151.855 ms, heap usage 136.255 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 13 completed (4772.345 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 148.653 ms, heap usage 134.209 MB -> 114.759 MB.\n====== finagle-http (web) [default], iteration 14 completed (4171.305 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 171.810 ms, heap usage 149.802 MB -> 115.854 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (20016.203 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 135.623 ms, heap usage 194.455 MB -> 117.112 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (15243.671 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 145.689 ms, heap usage 684.918 MB -> 116.540 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (15173.108 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 197.548 ms, heap usage 691.507 MB -> 116.560 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (14846.662 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 198.578 ms, heap usage 198.756 MB -> 114.731 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (14947.932 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 173.402 ms, heap usage 744.176 MB -> 114.712 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (15877.645 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 219.679 ms, heap usage 158.389 MB -> 113.375 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (15040.873 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 198.390 ms, heap usage 668.182 MB -> 113.378 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (15305.246 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 153.299 ms, heap usage 584.491 MB -> 113.393 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (14977.348 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 146.991 ms, heap usage 750.095 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (15036.507 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 159.673 ms, heap usage 685.262 MB -> 113.386 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (15067.960 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 213.581 ms, heap usage 705.178 MB -> 113.406 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14742.743 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 181.711 ms, heap usage 605.347 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (14916.835 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.081 ms, heap usage 172.060 MB -> 113.404 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (14721.440 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 174.697 ms, heap usage 589.634 MB -> 113.388 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (16424.038 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 186.372 ms, heap usage 735.762 MB -> 126.275 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (14991.979 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 290.688 ms, heap usage 254.907 MB -> 157.853 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3089.060 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 204.835 ms, heap usage 333.769 MB -> 185.965 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2681.550 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 182.933 ms, heap usage 200.364 MB -> 157.821 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (2591.133 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 179.529 ms, heap usage 277.762 MB -> 158.670 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (2299.103 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 200.098 ms, heap usage 210.632 MB -> 158.097 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (2445.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 190.419 ms, heap usage 276.460 MB -> 159.088 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (2371.474 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 174.626 ms, heap usage 222.237 MB -> 186.538 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (2473.615 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 214.512 ms, heap usage 439.245 MB -> 159.900 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (2064.900 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 168.698 ms, heap usage 446.054 MB -> 159.541 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (2257.468 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 237.408 ms, heap usage 234.506 MB -> 186.995 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (2170.313 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 209.799 ms, heap usage 418.506 MB -> 159.781 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (2191.906 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 229.458 ms, heap usage 480.459 MB -> 159.936 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (2138.269 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 211.897 ms, heap usage 466.689 MB -> 160.720 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (2049.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 189.352 ms, heap usage 354.044 MB -> 160.155 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (2040.082 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 194.700 ms, heap usage 295.642 MB -> 143.293 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 56\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 24\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 703\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 11\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 14\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 24\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 12\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 47.51 op/s (47.51 op/s including failed)\nElapsed time: 0.84 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3547.921 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 248.165 ms, heap usage 503.852 MB -> 141.700 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 679\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 703\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 14\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 24\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 12\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 108.11 op/s (108.11 op/s including failed)\nElapsed time: 0.74 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2410.653 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 181.277 ms, heap usage 391.576 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 666\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 703\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 11\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 14\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 24\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 12\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 169.01 op/s (169.01 op/s including failed)\nElapsed time: 0.71 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (2066.546 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 220.955 ms, heap usage 494.149 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 703\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 14\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 24\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 12\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 222.22 op/s (222.22 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1829.661 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 205.050 ms, heap usage 422.764 MB -> 141.687 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 703\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 11\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 14\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 24\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 12\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 333.33 op/s (333.33 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1893.863 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 201.343 ms, heap usage 494.218 MB -> 141.688 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 633\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 703\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 24\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 12\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 363.09 op/s (363.09 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1895.940 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 182.860 ms, heap usage 493.209 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 580\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 703\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 11\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 14\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 24\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 12\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 459.02 op/s (459.02 op/s including failed)\nElapsed time: 0.61 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1952.977 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 305.641 ms, heap usage 493.221 MB -> 141.685 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 541\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 703\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 11\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 14\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 24\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 12\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 576.58 op/s (576.58 op/s including failed)\nElapsed time: 0.56 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1795.886 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 194.826 ms, heap usage 365.744 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 18\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 730\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 11\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 14\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 24\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 12\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 473.68 op/s (473.68 op/s including failed)\nElapsed time: 0.76 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1976.848 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 197.099 ms, heap usage 498.182 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 730\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 11\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 14\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 24\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 12\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 613.50 op/s (613.50 op/s including failed)\nElapsed time: 0.65 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1874.670 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 220.616 ms, heap usage 412.582 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 730\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 11\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 14\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 24\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 12\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 739.50 op/s (739.50 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1809.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 229.427 ms, heap usage 493.244 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 579\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 730\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 11\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 24\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 12\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 797.34 op/s (797.34 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (2027.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 233.061 ms, heap usage 493.236 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 619\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 730\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 11\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 14\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 24\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 12\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 791.48 op/s (791.48 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1977.936 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 260.927 ms, heap usage 493.244 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 730\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 11\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 14\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 24\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 12\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 750.67 op/s (750.67 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (2141.642 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 267.832 ms, heap usage 407.307 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 601\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 730\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 11\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 14\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 12\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 966.18 op/s (966.18 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1865.933 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 196.610 ms, heap usage 166.694 MB -> 152.381 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (58120.386 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 314.055 ms, heap usage 442.788 MB -> 428.544 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (32227.208 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 272.478 ms, heap usage 439.699 MB -> 428.679 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (32368.500 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 367.651 ms, heap usage 531.599 MB -> 428.772 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (31930.918 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 299.299 ms, heap usage 447.937 MB -> 429.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (31541.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 287.549 ms, heap usage 447.896 MB -> 429.397 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (32105.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 277.492 ms, heap usage 446.758 MB -> 426.946 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (30103.488 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 252.894 ms, heap usage 642.931 MB -> 426.553 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (30495.558 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 240.060 ms, heap usage 452.457 MB -> 424.504 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (30590.481 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 248.503 ms, heap usage 435.730 MB -> 424.249 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (30206.652 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 249.386 ms, heap usage 525.208 MB -> 422.576 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (28775.738 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 303.313 ms, heap usage 742.561 MB -> 421.722 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (29893.644 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 240.840 ms, heap usage 637.025 MB -> 421.841 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (30188.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 249.257 ms, heap usage 742.673 MB -> 421.908 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (29940.902 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 203.730 ms, heap usage 760.930 MB -> 421.991 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (30274.413 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 255.470 ms, heap usage 699.724 MB -> 167.378 MB.\n====== als (apache-spark) [default], iteration 0 completed (22015.250 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 350.433 ms, heap usage 344.646 MB -> 192.150 MB.\n====== als (apache-spark) [default], iteration 1 completed (11444.600 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 316.353 ms, heap usage 707.581 MB -> 193.415 MB.\n====== als (apache-spark) [default], iteration 2 completed (10696.504 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 307.867 ms, heap usage 647.009 MB -> 194.023 MB.\n====== als (apache-spark) [default], iteration 3 completed (10216.778 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 267.954 ms, heap usage 683.784 MB -> 194.638 MB.\n====== als (apache-spark) [default], iteration 4 completed (9859.064 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 281.111 ms, heap usage 428.967 MB -> 194.996 MB.\n====== als (apache-spark) [default], iteration 5 completed (9616.145 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 297.340 ms, heap usage 369.268 MB -> 195.120 MB.\n====== als (apache-spark) [default], iteration 6 completed (9813.018 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 264.187 ms, heap usage 561.294 MB -> 196.222 MB.\n====== als (apache-spark) [default], iteration 7 completed (9917.177 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 302.104 ms, heap usage 692.182 MB -> 196.730 MB.\n====== als (apache-spark) [default], iteration 8 completed (9790.625 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 327.750 ms, heap usage 843.970 MB -> 197.512 MB.\n====== als (apache-spark) [default], iteration 9 completed (9239.064 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 261.342 ms, heap usage 334.900 MB -> 197.328 MB.\n====== als (apache-spark) [default], iteration 10 completed (9458.038 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 325.571 ms, heap usage 275.451 MB -> 197.311 MB.\n====== als (apache-spark) [default], iteration 11 completed (9574.332 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 301.606 ms, heap usage 743.440 MB -> 198.064 MB.\n====== als (apache-spark) [default], iteration 12 completed (9571.358 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 344.298 ms, heap usage 701.230 MB -> 198.205 MB.\n====== als (apache-spark) [default], iteration 13 completed (9288.113 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 285.187 ms, heap usage 275.595 MB -> 197.793 MB.\n====== als (apache-spark) [default], iteration 14 completed (9172.803 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 293.096 ms, heap usage 826.511 MB -> 178.953 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5562.022 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 271.376 ms, heap usage 349.017 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5303.620 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 251.125 ms, heap usage 312.552 MB -> 179.004 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (5220.150 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 336.890 ms, heap usage 324.760 MB -> 179.012 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (5286.316 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 264.682 ms, heap usage 310.802 MB -> 178.981 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (5890.750 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 308.278 ms, heap usage 309.802 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (5240.279 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 258.806 ms, heap usage 309.302 MB -> 178.998 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (5555.636 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 326.386 ms, heap usage 309.802 MB -> 178.993 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (5388.352 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 337.023 ms, heap usage 299.802 MB -> 178.978 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (6068.267 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 248.524 ms, heap usage 316.179 MB -> 178.983 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4606.540 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 256.606 ms, heap usage 312.478 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4824.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 320.290 ms, heap usage 317.302 MB -> 178.993 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (5334.941 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 248.608 ms, heap usage 382.537 MB -> 178.998 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (5360.162 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 257.061 ms, heap usage 302.802 MB -> 178.982 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (5565.972 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 279.204 ms, heap usage 309.302 MB -> 178.997 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (5500.409 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 404.952 ms, heap usage 351.931 MB -> 201.232 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (528.915 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 314.014 ms, heap usage 230.732 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (192.925 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 283.646 ms, heap usage 231.267 MB -> 201.280 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (208.607 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 264.196 ms, heap usage 231.272 MB -> 201.264 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (201.168 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 275.380 ms, heap usage 231.267 MB -> 201.265 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (195.448 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 276.700 ms, heap usage 231.265 MB -> 201.267 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (193.883 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 270.527 ms, heap usage 231.265 MB -> 201.267 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (192.752 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 298.673 ms, heap usage 231.265 MB -> 201.285 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (190.588 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 276.502 ms, heap usage 231.265 MB -> 201.280 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (196.294 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 282.001 ms, heap usage 231.265 MB -> 201.265 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (187.710 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 274.661 ms, heap usage 231.265 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (205.994 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 324.576 ms, heap usage 231.273 MB -> 201.285 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (196.845 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 330.213 ms, heap usage 231.265 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (185.100 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 318.153 ms, heap usage 231.265 MB -> 201.281 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (205.909 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 270.804 ms, heap usage 231.273 MB -> 201.269 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (206.182 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 314.737 ms, heap usage 232.766 MB -> 180.295 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1378.007 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 261.201 ms, heap usage 506.267 MB -> 180.191 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (575.902 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 254.781 ms, heap usage 480.688 MB -> 180.185 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (556.882 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 266.955 ms, heap usage 494.185 MB -> 180.186 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (431.271 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 327.384 ms, heap usage 488.686 MB -> 180.186 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (504.430 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 298.076 ms, heap usage 490.686 MB -> 180.206 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (449.552 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 285.466 ms, heap usage 489.186 MB -> 180.196 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (447.054 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 264.792 ms, heap usage 492.186 MB -> 180.209 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (445.125 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 339.222 ms, heap usage 493.686 MB -> 180.189 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (501.871 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 263.772 ms, heap usage 494.686 MB -> 180.207 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (456.366 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 310.936 ms, heap usage 493.186 MB -> 180.186 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (433.011 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 265.608 ms, heap usage 488.686 MB -> 180.204 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (465.629 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 282.134 ms, heap usage 494.186 MB -> 180.189 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (400.286 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 319.203 ms, heap usage 490.694 MB -> 180.187 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (416.982 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 259.433 ms, heap usage 488.187 MB -> 180.202 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (396.622 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 343.495 ms, heap usage 400.529 MB -> 192.068 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (13384.279 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 370.814 ms, heap usage 801.557 MB -> 272.923 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (3039.923 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 434.335 ms, heap usage 674.149 MB -> 272.987 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (2590.404 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 275.204 ms, heap usage 782.439 MB -> 273.857 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (2328.598 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 281.930 ms, heap usage 804.824 MB -> 274.283 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (2043.440 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 299.552 ms, heap usage 785.726 MB -> 274.330 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (2118.994 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 266.508 ms, heap usage 781.159 MB -> 274.639 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (2038.933 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 301.837 ms, heap usage 773.248 MB -> 274.788 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1947.981 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 301.024 ms, heap usage 790.752 MB -> 276.192 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (2036.573 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 270.570 ms, heap usage 781.218 MB -> 275.263 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (2029.457 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 322.206 ms, heap usage 771.255 MB -> 275.344 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1965.379 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 275.481 ms, heap usage 787.081 MB -> 276.111 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (2138.410 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 359.685 ms, heap usage 773.508 MB -> 275.667 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (2000.336 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 339.421 ms, heap usage 786.372 MB -> 276.665 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1811.999 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 325.664 ms, heap usage 784.908 MB -> 276.140 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (2180.194 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 400.231 ms, heap usage 629.663 MB -> 209.060 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (28647.863 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 318.437 ms, heap usage 707.267 MB -> 216.073 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (19851.827 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 438.073 ms, heap usage 807.430 MB -> 215.824 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (18800.787 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 414.999 ms, heap usage 436.901 MB -> 217.054 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (18872.396 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 316.131 ms, heap usage 821.956 MB -> 218.136 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (17041.003 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 305.158 ms, heap usage 387.475 MB -> 217.699 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (17747.673 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 346.532 ms, heap usage 710.963 MB -> 218.025 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (17422.806 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 335.379 ms, heap usage 254.501 MB -> 217.794 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (17271.624 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 354.728 ms, heap usage 297.155 MB -> 218.075 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (15950.833 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 357.761 ms, heap usage 480.461 MB -> 217.970 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (16296.144 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 345.888 ms, heap usage 549.889 MB -> 217.898 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (16968.823 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 335.766 ms, heap usage 308.680 MB -> 218.011 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (15657.866 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 350.688 ms, heap usage 743.584 MB -> 217.995 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (16581.067 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 313.803 ms, heap usage 718.157 MB -> 218.154 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (16176.639 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 366.079 ms, heap usage 446.719 MB -> 217.979 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (15460.779 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 364.412 ms, heap usage 754.713 MB -> 210.353 MB.\n====== mnemonics (functional) [default], iteration 0 completed (5825.169 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 359.652 ms, heap usage 342.941 MB -> 210.220 MB.\n====== mnemonics (functional) [default], iteration 1 completed (5175.165 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 352.444 ms, heap usage 350.232 MB -> 210.219 MB.\n====== mnemonics (functional) [default], iteration 2 completed (6273.445 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 305.881 ms, heap usage 339.744 MB -> 210.219 MB.\n====== mnemonics (functional) [default], iteration 3 completed (5964.075 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 305.517 ms, heap usage 339.738 MB -> 210.219 MB.\n====== mnemonics (functional) [default], iteration 4 completed (6267.783 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 292.735 ms, heap usage 339.303 MB -> 210.219 MB.\n====== mnemonics (functional) [default], iteration 5 completed (5136.938 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 358.445 ms, heap usage 346.219 MB -> 210.219 MB.\n====== mnemonics (functional) [default], iteration 6 completed (6401.145 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 403.217 ms, heap usage 327.303 MB -> 210.219 MB.\n====== mnemonics (functional) [default], iteration 7 completed (6174.827 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 383.431 ms, heap usage 339.601 MB -> 210.222 MB.\n====== mnemonics (functional) [default], iteration 8 completed (6389.615 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 346.580 ms, heap usage 330.803 MB -> 210.237 MB.\n====== mnemonics (functional) [default], iteration 9 completed (6011.971 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 299.140 ms, heap usage 339.303 MB -> 210.220 MB.\n====== mnemonics (functional) [default], iteration 10 completed (5366.309 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 363.796 ms, heap usage 339.268 MB -> 210.240 MB.\n====== mnemonics (functional) [default], iteration 11 completed (5020.085 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 306.326 ms, heap usage 354.220 MB -> 210.220 MB.\n====== mnemonics (functional) [default], iteration 12 completed (4772.518 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 320.193 ms, heap usage 351.720 MB -> 210.222 MB.\n====== mnemonics (functional) [default], iteration 13 completed (4677.720 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 287.906 ms, heap usage 487.220 MB -> 210.225 MB.\n====== mnemonics (functional) [default], iteration 14 completed (4875.555 ms) ======\n"
    },
    "dotty": {
        "times": [
            20725.749,
            9536.417,
            6715.154,
            5660.249,
            4396.689,
            4488.655,
            3760.947,
            3894.004,
            3648.241,
            3527.757,
            2676.249,
            3230.421,
            2239.803,
            2639.643,
            2730.758
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 106.929 ms, heap usage 190.171 MB -> 63.200 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (6187.539 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.565 ms, heap usage 496.809 MB -> 209.299 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1694.868 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 206.398 ms, heap usage 463.177 MB -> 209.398 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (2003.305 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 212.302 ms, heap usage 459.524 MB -> 209.445 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1621.726 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 223.150 ms, heap usage 335.714 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1269.328 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 263.102 ms, heap usage 387.379 MB -> 209.584 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1332.628 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 345.063 ms, heap usage 301.217 MB -> 209.640 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1334.895 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 238.282 ms, heap usage 362.215 MB -> 209.684 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (1301.701 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 225.459 ms, heap usage 382.839 MB -> 209.728 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (1124.225 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 213.168 ms, heap usage 659.827 MB -> 209.777 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (1152.077 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 234.392 ms, heap usage 214.753 MB -> 209.803 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1177.639 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 246.759 ms, heap usage 382.873 MB -> 209.860 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (1111.159 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 227.666 ms, heap usage 245.014 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (1324.366 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 288.359 ms, heap usage 381.212 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (1081.180 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 334.356 ms, heap usage 245.026 MB -> 209.966 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (1126.707 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 282.368 ms, heap usage 648.690 MB -> 146.565 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (10803.413 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 190.381 ms, heap usage 271.593 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10179.670 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 179.607 ms, heap usage 282.591 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (10419.647 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 174.562 ms, heap usage 532.921 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (10493.156 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 231.739 ms, heap usage 237.340 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (10700.524 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 196.441 ms, heap usage 175.972 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (10559.377 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 201.348 ms, heap usage 321.023 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (10551.392 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 159.797 ms, heap usage 285.547 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (10599.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 184.309 ms, heap usage 379.528 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (10405.099 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 206.129 ms, heap usage 236.996 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (10605.687 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 270.183 ms, heap usage 468.914 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (10370.300 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 180.779 ms, heap usage 271.478 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (10409.936 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 198.113 ms, heap usage 433.421 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (10936.851 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 184.181 ms, heap usage 320.384 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (10691.898 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 184.864 ms, heap usage 267.224 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (10469.996 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 330.267 ms, heap usage 463.183 MB -> 97.773 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (757.078 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 171.930 ms, heap usage 250.324 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (300.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 166.858 ms, heap usage 239.025 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (289.747 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 157.624 ms, heap usage 240.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (263.808 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 155.569 ms, heap usage 239.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (237.639 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 151.505 ms, heap usage 240.407 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (153.299 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 163.224 ms, heap usage 240.296 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (111.494 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 169.931 ms, heap usage 240.860 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (174.875 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 164.186 ms, heap usage 240.402 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (129.886 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 182.958 ms, heap usage 240.314 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (139.095 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 135.178 ms, heap usage 240.838 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (126.878 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 160.496 ms, heap usage 240.372 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (176.428 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 153.128 ms, heap usage 240.406 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (129.888 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 157.830 ms, heap usage 240.359 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (137.771 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 134.312 ms, heap usage 240.381 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (131.295 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 146.262 ms, heap usage 208.123 MB -> 100.661 MB.\n====== db-shootout (database) [default], iteration 0 completed (12404.390 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 178.241 ms, heap usage 254.860 MB -> 167.482 MB.\n====== db-shootout (database) [default], iteration 1 completed (10993.683 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 166.816 ms, heap usage 333.565 MB -> 167.194 MB.\n====== db-shootout (database) [default], iteration 2 completed (10563.322 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 209.258 ms, heap usage 262.956 MB -> 180.567 MB.\n====== db-shootout (database) [default], iteration 3 completed (11630.058 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 178.763 ms, heap usage 202.895 MB -> 177.576 MB.\n====== db-shootout (database) [default], iteration 4 completed (11345.410 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 200.120 ms, heap usage 253.326 MB -> 180.580 MB.\n====== db-shootout (database) [default], iteration 5 completed (11007.588 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 212.320 ms, heap usage 322.388 MB -> 181.162 MB.\n====== db-shootout (database) [default], iteration 6 completed (10530.413 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 153.414 ms, heap usage 259.750 MB -> 181.761 MB.\n====== db-shootout (database) [default], iteration 7 completed (10296.728 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 165.861 ms, heap usage 335.430 MB -> 180.416 MB.\n====== db-shootout (database) [default], iteration 8 completed (11729.260 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 155.114 ms, heap usage 217.493 MB -> 181.582 MB.\n====== db-shootout (database) [default], iteration 9 completed (10253.674 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 256.185 ms, heap usage 382.092 MB -> 181.428 MB.\n====== db-shootout (database) [default], iteration 10 completed (10081.116 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 228.461 ms, heap usage 364.449 MB -> 179.328 MB.\n====== db-shootout (database) [default], iteration 11 completed (10607.645 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 160.768 ms, heap usage 217.618 MB -> 178.374 MB.\n====== db-shootout (database) [default], iteration 12 completed (11800.789 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 162.350 ms, heap usage 327.085 MB -> 176.518 MB.\n====== db-shootout (database) [default], iteration 13 completed (11021.268 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 164.609 ms, heap usage 345.493 MB -> 179.401 MB.\n====== db-shootout (database) [default], iteration 14 completed (10453.547 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39417 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 171.054 ms, heap usage 764.680 MB -> 111.950 MB.\n====== finagle-http (web) [default], iteration 0 completed (23082.922 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 175.625 ms, heap usage 257.530 MB -> 113.944 MB.\n====== finagle-http (web) [default], iteration 1 completed (10425.413 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 192.360 ms, heap usage 142.930 MB -> 114.648 MB.\n====== finagle-http (web) [default], iteration 2 completed (5413.474 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 168.536 ms, heap usage 136.804 MB -> 114.675 MB.\n====== finagle-http (web) [default], iteration 3 completed (4292.558 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 161.104 ms, heap usage 135.231 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 4 completed (4982.604 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 187.983 ms, heap usage 137.549 MB -> 114.682 MB.\n====== finagle-http (web) [default], iteration 5 completed (4510.982 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 160.069 ms, heap usage 135.336 MB -> 114.684 MB.\n====== finagle-http (web) [default], iteration 6 completed (4583.460 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 155.528 ms, heap usage 134.320 MB -> 114.694 MB.\n====== finagle-http (web) [default], iteration 7 completed (4231.741 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 151.912 ms, heap usage 134.424 MB -> 114.757 MB.\n====== finagle-http (web) [default], iteration 8 completed (4629.532 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 135.249 MB -> 114.771 MB.\n====== finagle-http (web) [default], iteration 9 completed (4479.436 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 133.597 ms, heap usage 134.857 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 10 completed (4595.146 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 153.866 ms, heap usage 134.205 MB -> 114.789 MB.\n====== finagle-http (web) [default], iteration 11 completed (4513.085 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 139.530 ms, heap usage 133.233 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 12 completed (4421.906 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 151.855 ms, heap usage 136.255 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 13 completed (4772.345 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 148.653 ms, heap usage 134.209 MB -> 114.759 MB.\n====== finagle-http (web) [default], iteration 14 completed (4171.305 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 171.810 ms, heap usage 149.802 MB -> 115.854 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (20016.203 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 135.623 ms, heap usage 194.455 MB -> 117.112 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (15243.671 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 145.689 ms, heap usage 684.918 MB -> 116.540 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (15173.108 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 197.548 ms, heap usage 691.507 MB -> 116.560 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (14846.662 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 198.578 ms, heap usage 198.756 MB -> 114.731 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (14947.932 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 173.402 ms, heap usage 744.176 MB -> 114.712 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (15877.645 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 219.679 ms, heap usage 158.389 MB -> 113.375 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (15040.873 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 198.390 ms, heap usage 668.182 MB -> 113.378 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (15305.246 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 153.299 ms, heap usage 584.491 MB -> 113.393 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (14977.348 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 146.991 ms, heap usage 750.095 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (15036.507 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 159.673 ms, heap usage 685.262 MB -> 113.386 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (15067.960 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 213.581 ms, heap usage 705.178 MB -> 113.406 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14742.743 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 181.711 ms, heap usage 605.347 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (14916.835 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.081 ms, heap usage 172.060 MB -> 113.404 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (14721.440 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 174.697 ms, heap usage 589.634 MB -> 113.388 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (16424.038 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 186.372 ms, heap usage 735.762 MB -> 126.275 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (14991.979 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 290.688 ms, heap usage 254.907 MB -> 157.853 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3089.060 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 204.835 ms, heap usage 333.769 MB -> 185.965 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2681.550 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 182.933 ms, heap usage 200.364 MB -> 157.821 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (2591.133 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 179.529 ms, heap usage 277.762 MB -> 158.670 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (2299.103 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 200.098 ms, heap usage 210.632 MB -> 158.097 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (2445.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 190.419 ms, heap usage 276.460 MB -> 159.088 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (2371.474 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 174.626 ms, heap usage 222.237 MB -> 186.538 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (2473.615 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 214.512 ms, heap usage 439.245 MB -> 159.900 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (2064.900 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 168.698 ms, heap usage 446.054 MB -> 159.541 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (2257.468 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 237.408 ms, heap usage 234.506 MB -> 186.995 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (2170.313 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 209.799 ms, heap usage 418.506 MB -> 159.781 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (2191.906 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 229.458 ms, heap usage 480.459 MB -> 159.936 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (2138.269 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 211.897 ms, heap usage 466.689 MB -> 160.720 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (2049.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 189.352 ms, heap usage 354.044 MB -> 160.155 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (2040.082 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 194.700 ms, heap usage 295.642 MB -> 143.293 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 56\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 24\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 703\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 11\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 14\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 24\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 12\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 47.51 op/s (47.51 op/s including failed)\nElapsed time: 0.84 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3547.921 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 248.165 ms, heap usage 503.852 MB -> 141.700 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 679\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 703\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 14\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 24\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 12\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 108.11 op/s (108.11 op/s including failed)\nElapsed time: 0.74 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2410.653 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 181.277 ms, heap usage 391.576 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 666\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 703\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 11\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 14\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 24\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 12\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 169.01 op/s (169.01 op/s including failed)\nElapsed time: 0.71 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (2066.546 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 220.955 ms, heap usage 494.149 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 703\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 14\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 24\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 12\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 222.22 op/s (222.22 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1829.661 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 205.050 ms, heap usage 422.764 MB -> 141.687 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 703\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 11\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 14\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 24\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 12\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 333.33 op/s (333.33 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1893.863 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 201.343 ms, heap usage 494.218 MB -> 141.688 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 633\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 703\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 24\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 12\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 363.09 op/s (363.09 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1895.940 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 182.860 ms, heap usage 493.209 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 580\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 703\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 11\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 14\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 24\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 12\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 459.02 op/s (459.02 op/s including failed)\nElapsed time: 0.61 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1952.977 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 305.641 ms, heap usage 493.221 MB -> 141.685 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 541\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 703\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 11\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 14\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 24\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 12\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 576.58 op/s (576.58 op/s including failed)\nElapsed time: 0.56 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1795.886 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 194.826 ms, heap usage 365.744 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 18\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 730\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 11\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 14\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 24\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 12\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 473.68 op/s (473.68 op/s including failed)\nElapsed time: 0.76 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1976.848 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 197.099 ms, heap usage 498.182 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 730\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 11\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 14\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 24\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 12\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 613.50 op/s (613.50 op/s including failed)\nElapsed time: 0.65 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1874.670 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 220.616 ms, heap usage 412.582 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 730\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 11\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 14\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 24\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 12\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 739.50 op/s (739.50 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1809.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 229.427 ms, heap usage 493.244 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 579\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 730\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 11\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 24\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 12\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 797.34 op/s (797.34 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (2027.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 233.061 ms, heap usage 493.236 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 619\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 730\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 11\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 14\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 24\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 12\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 791.48 op/s (791.48 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1977.936 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 260.927 ms, heap usage 493.244 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 730\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 11\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 14\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 24\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 12\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 750.67 op/s (750.67 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (2141.642 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 267.832 ms, heap usage 407.307 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 601\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 730\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 11\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 14\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 12\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 966.18 op/s (966.18 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1865.933 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 196.610 ms, heap usage 166.694 MB -> 152.381 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (58120.386 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 314.055 ms, heap usage 442.788 MB -> 428.544 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (32227.208 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 272.478 ms, heap usage 439.699 MB -> 428.679 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (32368.500 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 367.651 ms, heap usage 531.599 MB -> 428.772 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (31930.918 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 299.299 ms, heap usage 447.937 MB -> 429.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (31541.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 287.549 ms, heap usage 447.896 MB -> 429.397 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (32105.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 277.492 ms, heap usage 446.758 MB -> 426.946 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (30103.488 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 252.894 ms, heap usage 642.931 MB -> 426.553 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (30495.558 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 240.060 ms, heap usage 452.457 MB -> 424.504 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (30590.481 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 248.503 ms, heap usage 435.730 MB -> 424.249 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (30206.652 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 249.386 ms, heap usage 525.208 MB -> 422.576 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (28775.738 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 303.313 ms, heap usage 742.561 MB -> 421.722 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (29893.644 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 240.840 ms, heap usage 637.025 MB -> 421.841 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (30188.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 249.257 ms, heap usage 742.673 MB -> 421.908 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (29940.902 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 203.730 ms, heap usage 760.930 MB -> 421.991 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (30274.413 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 255.470 ms, heap usage 699.724 MB -> 167.378 MB.\n====== als (apache-spark) [default], iteration 0 completed (22015.250 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 350.433 ms, heap usage 344.646 MB -> 192.150 MB.\n====== als (apache-spark) [default], iteration 1 completed (11444.600 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 316.353 ms, heap usage 707.581 MB -> 193.415 MB.\n====== als (apache-spark) [default], iteration 2 completed (10696.504 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 307.867 ms, heap usage 647.009 MB -> 194.023 MB.\n====== als (apache-spark) [default], iteration 3 completed (10216.778 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 267.954 ms, heap usage 683.784 MB -> 194.638 MB.\n====== als (apache-spark) [default], iteration 4 completed (9859.064 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 281.111 ms, heap usage 428.967 MB -> 194.996 MB.\n====== als (apache-spark) [default], iteration 5 completed (9616.145 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 297.340 ms, heap usage 369.268 MB -> 195.120 MB.\n====== als (apache-spark) [default], iteration 6 completed (9813.018 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 264.187 ms, heap usage 561.294 MB -> 196.222 MB.\n====== als (apache-spark) [default], iteration 7 completed (9917.177 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 302.104 ms, heap usage 692.182 MB -> 196.730 MB.\n====== als (apache-spark) [default], iteration 8 completed (9790.625 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 327.750 ms, heap usage 843.970 MB -> 197.512 MB.\n====== als (apache-spark) [default], iteration 9 completed (9239.064 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 261.342 ms, heap usage 334.900 MB -> 197.328 MB.\n====== als (apache-spark) [default], iteration 10 completed (9458.038 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 325.571 ms, heap usage 275.451 MB -> 197.311 MB.\n====== als (apache-spark) [default], iteration 11 completed (9574.332 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 301.606 ms, heap usage 743.440 MB -> 198.064 MB.\n====== als (apache-spark) [default], iteration 12 completed (9571.358 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 344.298 ms, heap usage 701.230 MB -> 198.205 MB.\n====== als (apache-spark) [default], iteration 13 completed (9288.113 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 285.187 ms, heap usage 275.595 MB -> 197.793 MB.\n====== als (apache-spark) [default], iteration 14 completed (9172.803 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 293.096 ms, heap usage 826.511 MB -> 178.953 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5562.022 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 271.376 ms, heap usage 349.017 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5303.620 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 251.125 ms, heap usage 312.552 MB -> 179.004 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (5220.150 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 336.890 ms, heap usage 324.760 MB -> 179.012 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (5286.316 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 264.682 ms, heap usage 310.802 MB -> 178.981 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (5890.750 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 308.278 ms, heap usage 309.802 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (5240.279 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 258.806 ms, heap usage 309.302 MB -> 178.998 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (5555.636 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 326.386 ms, heap usage 309.802 MB -> 178.993 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (5388.352 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 337.023 ms, heap usage 299.802 MB -> 178.978 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (6068.267 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 248.524 ms, heap usage 316.179 MB -> 178.983 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4606.540 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 256.606 ms, heap usage 312.478 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4824.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 320.290 ms, heap usage 317.302 MB -> 178.993 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (5334.941 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 248.608 ms, heap usage 382.537 MB -> 178.998 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (5360.162 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 257.061 ms, heap usage 302.802 MB -> 178.982 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (5565.972 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 279.204 ms, heap usage 309.302 MB -> 178.997 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (5500.409 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 404.952 ms, heap usage 351.931 MB -> 201.232 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (528.915 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 314.014 ms, heap usage 230.732 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (192.925 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 283.646 ms, heap usage 231.267 MB -> 201.280 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (208.607 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 264.196 ms, heap usage 231.272 MB -> 201.264 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (201.168 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 275.380 ms, heap usage 231.267 MB -> 201.265 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (195.448 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 276.700 ms, heap usage 231.265 MB -> 201.267 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (193.883 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 270.527 ms, heap usage 231.265 MB -> 201.267 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (192.752 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 298.673 ms, heap usage 231.265 MB -> 201.285 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (190.588 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 276.502 ms, heap usage 231.265 MB -> 201.280 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (196.294 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 282.001 ms, heap usage 231.265 MB -> 201.265 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (187.710 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 274.661 ms, heap usage 231.265 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (205.994 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 324.576 ms, heap usage 231.273 MB -> 201.285 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (196.845 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 330.213 ms, heap usage 231.265 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (185.100 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 318.153 ms, heap usage 231.265 MB -> 201.281 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (205.909 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 270.804 ms, heap usage 231.273 MB -> 201.269 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (206.182 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 314.737 ms, heap usage 232.766 MB -> 180.295 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1378.007 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 261.201 ms, heap usage 506.267 MB -> 180.191 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (575.902 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 254.781 ms, heap usage 480.688 MB -> 180.185 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (556.882 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 266.955 ms, heap usage 494.185 MB -> 180.186 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (431.271 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 327.384 ms, heap usage 488.686 MB -> 180.186 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (504.430 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 298.076 ms, heap usage 490.686 MB -> 180.206 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (449.552 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 285.466 ms, heap usage 489.186 MB -> 180.196 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (447.054 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 264.792 ms, heap usage 492.186 MB -> 180.209 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (445.125 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 339.222 ms, heap usage 493.686 MB -> 180.189 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (501.871 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 263.772 ms, heap usage 494.686 MB -> 180.207 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (456.366 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 310.936 ms, heap usage 493.186 MB -> 180.186 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (433.011 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 265.608 ms, heap usage 488.686 MB -> 180.204 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (465.629 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 282.134 ms, heap usage 494.186 MB -> 180.189 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (400.286 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 319.203 ms, heap usage 490.694 MB -> 180.187 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (416.982 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 259.433 ms, heap usage 488.187 MB -> 180.202 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (396.622 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 343.495 ms, heap usage 400.529 MB -> 192.068 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (13384.279 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 370.814 ms, heap usage 801.557 MB -> 272.923 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (3039.923 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 434.335 ms, heap usage 674.149 MB -> 272.987 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (2590.404 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 275.204 ms, heap usage 782.439 MB -> 273.857 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (2328.598 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 281.930 ms, heap usage 804.824 MB -> 274.283 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (2043.440 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 299.552 ms, heap usage 785.726 MB -> 274.330 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (2118.994 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 266.508 ms, heap usage 781.159 MB -> 274.639 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (2038.933 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 301.837 ms, heap usage 773.248 MB -> 274.788 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1947.981 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 301.024 ms, heap usage 790.752 MB -> 276.192 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (2036.573 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 270.570 ms, heap usage 781.218 MB -> 275.263 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (2029.457 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 322.206 ms, heap usage 771.255 MB -> 275.344 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1965.379 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 275.481 ms, heap usage 787.081 MB -> 276.111 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (2138.410 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 359.685 ms, heap usage 773.508 MB -> 275.667 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (2000.336 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 339.421 ms, heap usage 786.372 MB -> 276.665 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1811.999 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 325.664 ms, heap usage 784.908 MB -> 276.140 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (2180.194 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 400.231 ms, heap usage 629.663 MB -> 209.060 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (28647.863 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 318.437 ms, heap usage 707.267 MB -> 216.073 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (19851.827 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 438.073 ms, heap usage 807.430 MB -> 215.824 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (18800.787 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 414.999 ms, heap usage 436.901 MB -> 217.054 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (18872.396 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 316.131 ms, heap usage 821.956 MB -> 218.136 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (17041.003 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 305.158 ms, heap usage 387.475 MB -> 217.699 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (17747.673 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 346.532 ms, heap usage 710.963 MB -> 218.025 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (17422.806 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 335.379 ms, heap usage 254.501 MB -> 217.794 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (17271.624 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 354.728 ms, heap usage 297.155 MB -> 218.075 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (15950.833 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 357.761 ms, heap usage 480.461 MB -> 217.970 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (16296.144 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 345.888 ms, heap usage 549.889 MB -> 217.898 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (16968.823 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 335.766 ms, heap usage 308.680 MB -> 218.011 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (15657.866 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 350.688 ms, heap usage 743.584 MB -> 217.995 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (16581.067 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 313.803 ms, heap usage 718.157 MB -> 218.154 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (16176.639 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 366.079 ms, heap usage 446.719 MB -> 217.979 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (15460.779 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 364.412 ms, heap usage 754.713 MB -> 210.353 MB.\n====== mnemonics (functional) [default], iteration 0 completed (5825.169 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 359.652 ms, heap usage 342.941 MB -> 210.220 MB.\n====== mnemonics (functional) [default], iteration 1 completed (5175.165 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 352.444 ms, heap usage 350.232 MB -> 210.219 MB.\n====== mnemonics (functional) [default], iteration 2 completed (6273.445 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 305.881 ms, heap usage 339.744 MB -> 210.219 MB.\n====== mnemonics (functional) [default], iteration 3 completed (5964.075 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 305.517 ms, heap usage 339.738 MB -> 210.219 MB.\n====== mnemonics (functional) [default], iteration 4 completed (6267.783 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 292.735 ms, heap usage 339.303 MB -> 210.219 MB.\n====== mnemonics (functional) [default], iteration 5 completed (5136.938 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 358.445 ms, heap usage 346.219 MB -> 210.219 MB.\n====== mnemonics (functional) [default], iteration 6 completed (6401.145 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 403.217 ms, heap usage 327.303 MB -> 210.219 MB.\n====== mnemonics (functional) [default], iteration 7 completed (6174.827 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 383.431 ms, heap usage 339.601 MB -> 210.222 MB.\n====== mnemonics (functional) [default], iteration 8 completed (6389.615 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 346.580 ms, heap usage 330.803 MB -> 210.237 MB.\n====== mnemonics (functional) [default], iteration 9 completed (6011.971 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 299.140 ms, heap usage 339.303 MB -> 210.220 MB.\n====== mnemonics (functional) [default], iteration 10 completed (5366.309 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 363.796 ms, heap usage 339.268 MB -> 210.240 MB.\n====== mnemonics (functional) [default], iteration 11 completed (5020.085 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 306.326 ms, heap usage 354.220 MB -> 210.220 MB.\n====== mnemonics (functional) [default], iteration 12 completed (4772.518 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 320.193 ms, heap usage 351.720 MB -> 210.222 MB.\n====== mnemonics (functional) [default], iteration 13 completed (4677.720 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 287.906 ms, heap usage 487.220 MB -> 210.225 MB.\n====== mnemonics (functional) [default], iteration 14 completed (4875.555 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 367.094 ms, heap usage 347.384 MB -> 212.865 MB.\n====== dotty (scala) [default], iteration 0 completed (20725.749 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 398.105 ms, heap usage 261.882 MB -> 229.423 MB.\n====== dotty (scala) [default], iteration 1 completed (9536.417 ms) ======\n====== dotty (scala) [default], iteration 2 started ======\nGC before operation: completed in 322.449 ms, heap usage 464.943 MB -> 229.424 MB.\n====== dotty (scala) [default], iteration 2 completed (6715.154 ms) ======\n====== dotty (scala) [default], iteration 3 started ======\nGC before operation: completed in 388.806 ms, heap usage 459.956 MB -> 229.457 MB.\n====== dotty (scala) [default], iteration 3 completed (5660.249 ms) ======\n====== dotty (scala) [default], iteration 4 started ======\nGC before operation: completed in 309.513 ms, heap usage 455.947 MB -> 229.460 MB.\n====== dotty (scala) [default], iteration 4 completed (4396.689 ms) ======\n====== dotty (scala) [default], iteration 5 started ======\nGC before operation: completed in 400.750 ms, heap usage 452.972 MB -> 229.481 MB.\n====== dotty (scala) [default], iteration 5 completed (4488.655 ms) ======\n====== dotty (scala) [default], iteration 6 started ======\nGC before operation: completed in 325.244 ms, heap usage 451.984 MB -> 229.465 MB.\n====== dotty (scala) [default], iteration 6 completed (3760.947 ms) ======\n====== dotty (scala) [default], iteration 7 started ======\nGC before operation: completed in 348.642 ms, heap usage 450.486 MB -> 229.471 MB.\n====== dotty (scala) [default], iteration 7 completed (3894.004 ms) ======\n====== dotty (scala) [default], iteration 8 started ======\nGC before operation: completed in 357.453 ms, heap usage 449.496 MB -> 229.481 MB.\n====== dotty (scala) [default], iteration 8 completed (3648.241 ms) ======\n====== dotty (scala) [default], iteration 9 started ======\nGC before operation: completed in 349.208 ms, heap usage 448.479 MB -> 229.506 MB.\n====== dotty (scala) [default], iteration 9 completed (3527.757 ms) ======\n====== dotty (scala) [default], iteration 10 started ======\nGC before operation: completed in 353.690 ms, heap usage 446.487 MB -> 229.509 MB.\n====== dotty (scala) [default], iteration 10 completed (2676.249 ms) ======\n====== dotty (scala) [default], iteration 11 started ======\nGC before operation: completed in 369.666 ms, heap usage 445.510 MB -> 229.510 MB.\n====== dotty (scala) [default], iteration 11 completed (3230.421 ms) ======\n====== dotty (scala) [default], iteration 12 started ======\nGC before operation: completed in 314.783 ms, heap usage 445.013 MB -> 229.497 MB.\n====== dotty (scala) [default], iteration 12 completed (2239.803 ms) ======\n====== dotty (scala) [default], iteration 13 started ======\nGC before operation: completed in 336.566 ms, heap usage 444.015 MB -> 229.507 MB.\n====== dotty (scala) [default], iteration 13 completed (2639.643 ms) ======\n====== dotty (scala) [default], iteration 14 started ======\nGC before operation: completed in 312.937 ms, heap usage 444.032 MB -> 229.519 MB.\n====== dotty (scala) [default], iteration 14 completed (2730.758 ms) ======\n"
    },
    "finagle-chirper": {
        "times": [
            17970.035,
            8226.478,
            5465.834,
            4566.979,
            4451.892,
            4162.543,
            4163.397,
            4019.26,
            4210.32,
            3901.8,
            3826.268,
            4087.217,
            3706.975,
            4041.747,
            3784.59
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 120.020 ms, heap usage 112.974 MB -> 76.031 MB.\n====== scrabble (functional) [default], iteration 0 completed (2306.459 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.936 ms, heap usage 242.791 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (1028.068 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.330 ms, heap usage 253.132 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (1006.944 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 113.280 ms, heap usage 289.937 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (953.794 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 117.423 ms, heap usage 372.171 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (1030.314 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 103.841 ms, heap usage 173.531 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (1012.217 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 112.399 ms, heap usage 271.427 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (1028.217 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 106.120 ms, heap usage 153.241 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (936.585 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 109.285 ms, heap usage 364.883 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (983.397 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 106.482 ms, heap usage 257.155 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (969.148 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 102.858 ms, heap usage 352.647 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (1033.684 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 142.040 ms, heap usage 230.979 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (944.193 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 108.555 ms, heap usage 139.051 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (929.235 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 114.700 ms, heap usage 284.631 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (791.202 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 108.458 ms, heap usage 215.909 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (917.428 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.708 ms, heap usage 630.500 MB -> 29.693 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (27726.818 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 240.288 ms, heap usage 623.455 MB -> 148.974 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (15353.982 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 218.529 ms, heap usage 521.200 MB -> 149.157 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (15286.034 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 198.729 ms, heap usage 591.453 MB -> 149.300 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (15236.332 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 200.947 ms, heap usage 495.139 MB -> 149.403 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (15068.187 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 213.809 ms, heap usage 629.165 MB -> 149.523 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (15282.258 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 201.878 ms, heap usage 577.953 MB -> 149.616 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (15639.015 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 213.307 ms, heap usage 684.953 MB -> 149.731 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (15291.659 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.363 ms, heap usage 663.520 MB -> 149.830 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (15056.496 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 215.453 ms, heap usage 636.279 MB -> 149.942 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (14788.047 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 217.300 ms, heap usage 648.821 MB -> 150.011 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (15180.324 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 259.107 ms, heap usage 668.929 MB -> 150.129 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (14800.224 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 312.079 ms, heap usage 519.453 MB -> 150.250 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (14516.951 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 208.285 ms, heap usage 648.453 MB -> 150.327 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (15652.035 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 216.623 ms, heap usage 638.453 MB -> 149.160 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (14781.544 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 91.545 ms, heap usage 458.073 MB -> 32.833 MB.\n====== future-genetic (functional) [default], iteration 0 completed (22732.183 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 66.695 ms, heap usage 35.888 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 1 completed (17407.456 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 69.531 ms, heap usage 47.565 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 2 completed (16360.806 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 58.072 ms, heap usage 88.989 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 3 completed (16233.812 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 67.439 ms, heap usage 119.480 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 4 completed (16584.843 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 54.795 ms, heap usage 137.612 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 5 completed (16385.306 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 52.465 ms, heap usage 87.118 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 6 completed (16425.919 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 60.463 ms, heap usage 55.109 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 7 completed (16483.767 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 74.064 ms, heap usage 73.051 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 8 completed (16213.950 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.224 ms, heap usage 180.584 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 9 completed (16408.201 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 80.899 ms, heap usage 177.488 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 10 completed (16392.967 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 46.421 ms, heap usage 156.525 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 11 completed (16685.561 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 48.783 ms, heap usage 166.060 MB -> 33.763 MB.\n====== future-genetic (functional) [default], iteration 12 completed (16146.399 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 44.316 ms, heap usage 64.102 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 13 completed (16260.536 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 51.173 ms, heap usage 90.492 MB -> 33.762 MB.\n====== future-genetic (functional) [default], iteration 14 completed (16065.023 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 75.660 ms, heap usage 102.063 MB -> 34.601 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (27042.236 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 463.181 ms, heap usage 760.900 MB -> 156.108 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (20379.400 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 441.782 ms, heap usage 675.809 MB -> 124.082 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (19818.763 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 404.581 ms, heap usage 479.773 MB -> 137.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (19883.386 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 529.359 ms, heap usage 703.416 MB -> 161.596 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (20183.924 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 396.686 ms, heap usage 637.489 MB -> 145.220 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (20348.568 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 532.681 ms, heap usage 471.423 MB -> 138.817 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (19820.094 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 406.964 ms, heap usage 757.773 MB -> 124.614 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (18447.698 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 381.429 ms, heap usage 461.068 MB -> 135.471 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (18273.870 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 368.361 ms, heap usage 356.184 MB -> 145.788 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (19461.369 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 393.025 ms, heap usage 743.897 MB -> 145.578 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (19399.492 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 439.500 ms, heap usage 558.948 MB -> 140.443 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (19815.156 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 461.223 ms, heap usage 609.044 MB -> 140.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (18925.149 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 508.918 ms, heap usage 711.226 MB -> 155.616 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (18929.155 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 498.595 ms, heap usage 732.948 MB -> 151.941 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (19510.671 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.602 ms, heap usage 223.732 MB -> 85.320 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (30866.431 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.520 ms, heap usage 437.928 MB -> 98.963 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (19029.449 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.045 ms, heap usage 197.504 MB -> 97.169 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (19017.931 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 262.694 ms, heap usage 451.551 MB -> 101.495 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (18361.993 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 135.038 ms, heap usage 364.564 MB -> 98.456 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (17858.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 133.311 ms, heap usage 358.203 MB -> 98.403 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (16862.193 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 128.766 ms, heap usage 159.020 MB -> 98.388 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (16217.271 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.406 ms, heap usage 257.262 MB -> 98.542 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (15960.495 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 164.515 ms, heap usage 256.422 MB -> 98.802 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (16290.168 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 179.430 ms, heap usage 184.850 MB -> 98.369 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (15660.478 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 181.107 ms, heap usage 171.237 MB -> 98.665 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (15744.812 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 159.748 ms, heap usage 160.880 MB -> 98.316 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (15266.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 160.996 ms, heap usage 207.161 MB -> 98.693 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (15536.797 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.623 ms, heap usage 171.893 MB -> 98.688 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (15674.517 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 141.378 ms, heap usage 230.476 MB -> 98.569 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (15544.907 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 117.269 ms, heap usage 187.085 MB -> 58.738 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3775.422 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.569 ms, heap usage 102.895 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2924.179 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 94.335 ms, heap usage 135.998 MB -> 57.998 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2632.036 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 81.600 ms, heap usage 129.498 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2468.844 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 75.055 ms, heap usage 124.999 MB -> 57.999 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2074.712 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.658 ms, heap usage 124.999 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2124.093 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 78.179 ms, heap usage 122.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2062.298 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 77.478 ms, heap usage 121.500 MB -> 58.000 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1914.382 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 83.014 ms, heap usage 121.000 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2124.273 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 120.538 ms, heap usage 121.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2032.641 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 74.119 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1969.366 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 88.569 ms, heap usage 121.001 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1950.449 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 74.479 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2060.221 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 96.005 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2065.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 78.112 ms, heap usage 120.501 MB -> 58.001 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1991.117 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 106.929 ms, heap usage 190.171 MB -> 63.200 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (6187.539 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.565 ms, heap usage 496.809 MB -> 209.299 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1694.868 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 206.398 ms, heap usage 463.177 MB -> 209.398 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (2003.305 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 212.302 ms, heap usage 459.524 MB -> 209.445 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1621.726 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 223.150 ms, heap usage 335.714 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1269.328 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 263.102 ms, heap usage 387.379 MB -> 209.584 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1332.628 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 345.063 ms, heap usage 301.217 MB -> 209.640 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1334.895 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 238.282 ms, heap usage 362.215 MB -> 209.684 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (1301.701 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 225.459 ms, heap usage 382.839 MB -> 209.728 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (1124.225 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 213.168 ms, heap usage 659.827 MB -> 209.777 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (1152.077 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 234.392 ms, heap usage 214.753 MB -> 209.803 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (1177.639 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 246.759 ms, heap usage 382.873 MB -> 209.860 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (1111.159 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 227.666 ms, heap usage 245.014 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (1324.366 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 288.359 ms, heap usage 381.212 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (1081.180 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 334.356 ms, heap usage 245.026 MB -> 209.966 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (1126.707 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 282.368 ms, heap usage 648.690 MB -> 146.565 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (10803.413 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 190.381 ms, heap usage 271.593 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10179.670 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 179.607 ms, heap usage 282.591 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (10419.647 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 174.562 ms, heap usage 532.921 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (10493.156 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 231.739 ms, heap usage 237.340 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (10700.524 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 196.441 ms, heap usage 175.972 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (10559.377 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 201.348 ms, heap usage 321.023 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (10551.392 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 159.797 ms, heap usage 285.547 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (10599.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 184.309 ms, heap usage 379.528 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (10405.099 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 206.129 ms, heap usage 236.996 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (10605.687 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 270.183 ms, heap usage 468.914 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (10370.300 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 180.779 ms, heap usage 271.478 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (10409.936 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 198.113 ms, heap usage 433.421 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (10936.851 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 184.181 ms, heap usage 320.384 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (10691.898 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 184.864 ms, heap usage 267.224 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (10469.996 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 330.267 ms, heap usage 463.183 MB -> 97.773 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (757.078 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 171.930 ms, heap usage 250.324 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (300.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 166.858 ms, heap usage 239.025 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (289.747 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 157.624 ms, heap usage 240.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (263.808 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 155.569 ms, heap usage 239.024 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (237.639 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 151.505 ms, heap usage 240.407 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (153.299 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 163.224 ms, heap usage 240.296 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (111.494 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 169.931 ms, heap usage 240.860 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (174.875 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 164.186 ms, heap usage 240.402 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (129.886 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 182.958 ms, heap usage 240.314 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (139.095 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 135.178 ms, heap usage 240.838 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (126.878 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 160.496 ms, heap usage 240.372 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (176.428 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 153.128 ms, heap usage 240.406 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (129.888 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 157.830 ms, heap usage 240.359 MB -> 98.024 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (137.771 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 134.312 ms, heap usage 240.381 MB -> 98.025 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (131.295 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 146.262 ms, heap usage 208.123 MB -> 100.661 MB.\n====== db-shootout (database) [default], iteration 0 completed (12404.390 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 178.241 ms, heap usage 254.860 MB -> 167.482 MB.\n====== db-shootout (database) [default], iteration 1 completed (10993.683 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 166.816 ms, heap usage 333.565 MB -> 167.194 MB.\n====== db-shootout (database) [default], iteration 2 completed (10563.322 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 209.258 ms, heap usage 262.956 MB -> 180.567 MB.\n====== db-shootout (database) [default], iteration 3 completed (11630.058 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 178.763 ms, heap usage 202.895 MB -> 177.576 MB.\n====== db-shootout (database) [default], iteration 4 completed (11345.410 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 200.120 ms, heap usage 253.326 MB -> 180.580 MB.\n====== db-shootout (database) [default], iteration 5 completed (11007.588 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 212.320 ms, heap usage 322.388 MB -> 181.162 MB.\n====== db-shootout (database) [default], iteration 6 completed (10530.413 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 153.414 ms, heap usage 259.750 MB -> 181.761 MB.\n====== db-shootout (database) [default], iteration 7 completed (10296.728 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 165.861 ms, heap usage 335.430 MB -> 180.416 MB.\n====== db-shootout (database) [default], iteration 8 completed (11729.260 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 155.114 ms, heap usage 217.493 MB -> 181.582 MB.\n====== db-shootout (database) [default], iteration 9 completed (10253.674 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 256.185 ms, heap usage 382.092 MB -> 181.428 MB.\n====== db-shootout (database) [default], iteration 10 completed (10081.116 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 228.461 ms, heap usage 364.449 MB -> 179.328 MB.\n====== db-shootout (database) [default], iteration 11 completed (10607.645 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 160.768 ms, heap usage 217.618 MB -> 178.374 MB.\n====== db-shootout (database) [default], iteration 12 completed (11800.789 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 162.350 ms, heap usage 327.085 MB -> 176.518 MB.\n====== db-shootout (database) [default], iteration 13 completed (11021.268 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 164.609 ms, heap usage 345.493 MB -> 179.401 MB.\n====== db-shootout (database) [default], iteration 14 completed (10453.547 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39417 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 171.054 ms, heap usage 764.680 MB -> 111.950 MB.\n====== finagle-http (web) [default], iteration 0 completed (23082.922 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 175.625 ms, heap usage 257.530 MB -> 113.944 MB.\n====== finagle-http (web) [default], iteration 1 completed (10425.413 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 192.360 ms, heap usage 142.930 MB -> 114.648 MB.\n====== finagle-http (web) [default], iteration 2 completed (5413.474 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 168.536 ms, heap usage 136.804 MB -> 114.675 MB.\n====== finagle-http (web) [default], iteration 3 completed (4292.558 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 161.104 ms, heap usage 135.231 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 4 completed (4982.604 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 187.983 ms, heap usage 137.549 MB -> 114.682 MB.\n====== finagle-http (web) [default], iteration 5 completed (4510.982 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 160.069 ms, heap usage 135.336 MB -> 114.684 MB.\n====== finagle-http (web) [default], iteration 6 completed (4583.460 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 155.528 ms, heap usage 134.320 MB -> 114.694 MB.\n====== finagle-http (web) [default], iteration 7 completed (4231.741 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 151.912 ms, heap usage 134.424 MB -> 114.757 MB.\n====== finagle-http (web) [default], iteration 8 completed (4629.532 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 135.249 MB -> 114.771 MB.\n====== finagle-http (web) [default], iteration 9 completed (4479.436 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 133.597 ms, heap usage 134.857 MB -> 114.734 MB.\n====== finagle-http (web) [default], iteration 10 completed (4595.146 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 153.866 ms, heap usage 134.205 MB -> 114.789 MB.\n====== finagle-http (web) [default], iteration 11 completed (4513.085 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 139.530 ms, heap usage 133.233 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 12 completed (4421.906 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 151.855 ms, heap usage 136.255 MB -> 114.772 MB.\n====== finagle-http (web) [default], iteration 13 completed (4772.345 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 148.653 ms, heap usage 134.209 MB -> 114.759 MB.\n====== finagle-http (web) [default], iteration 14 completed (4171.305 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 171.810 ms, heap usage 149.802 MB -> 115.854 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (20016.203 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 135.623 ms, heap usage 194.455 MB -> 117.112 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (15243.671 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 145.689 ms, heap usage 684.918 MB -> 116.540 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (15173.108 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 197.548 ms, heap usage 691.507 MB -> 116.560 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (14846.662 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 198.578 ms, heap usage 198.756 MB -> 114.731 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (14947.932 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 173.402 ms, heap usage 744.176 MB -> 114.712 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (15877.645 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 219.679 ms, heap usage 158.389 MB -> 113.375 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (15040.873 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 198.390 ms, heap usage 668.182 MB -> 113.378 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (15305.246 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 153.299 ms, heap usage 584.491 MB -> 113.393 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (14977.348 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 146.991 ms, heap usage 750.095 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (15036.507 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 159.673 ms, heap usage 685.262 MB -> 113.386 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (15067.960 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 213.581 ms, heap usage 705.178 MB -> 113.406 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14742.743 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 181.711 ms, heap usage 605.347 MB -> 113.381 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (14916.835 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.081 ms, heap usage 172.060 MB -> 113.404 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (14721.440 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 174.697 ms, heap usage 589.634 MB -> 113.388 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (16424.038 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 186.372 ms, heap usage 735.762 MB -> 126.275 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (14991.979 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 290.688 ms, heap usage 254.907 MB -> 157.853 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3089.060 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 204.835 ms, heap usage 333.769 MB -> 185.965 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2681.550 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 182.933 ms, heap usage 200.364 MB -> 157.821 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (2591.133 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 179.529 ms, heap usage 277.762 MB -> 158.670 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (2299.103 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 200.098 ms, heap usage 210.632 MB -> 158.097 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (2445.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 190.419 ms, heap usage 276.460 MB -> 159.088 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (2371.474 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 174.626 ms, heap usage 222.237 MB -> 186.538 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (2473.615 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 214.512 ms, heap usage 439.245 MB -> 159.900 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (2064.900 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 168.698 ms, heap usage 446.054 MB -> 159.541 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (2257.468 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 237.408 ms, heap usage 234.506 MB -> 186.995 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (2170.313 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 209.799 ms, heap usage 418.506 MB -> 159.781 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (2191.906 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 229.458 ms, heap usage 480.459 MB -> 159.936 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (2138.269 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 211.897 ms, heap usage 466.689 MB -> 160.720 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (2049.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 189.352 ms, heap usage 354.044 MB -> 160.155 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (2040.082 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 194.700 ms, heap usage 295.642 MB -> 143.293 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 56\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 24\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 703\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 11\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 14\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 24\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 12\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 47.51 op/s (47.51 op/s including failed)\nElapsed time: 0.84 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3547.921 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 248.165 ms, heap usage 503.852 MB -> 141.700 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 679\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 703\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 14\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 24\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 12\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 108.11 op/s (108.11 op/s including failed)\nElapsed time: 0.74 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2410.653 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 181.277 ms, heap usage 391.576 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 666\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 703\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 11\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 14\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 24\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 12\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 169.01 op/s (169.01 op/s including failed)\nElapsed time: 0.71 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (2066.546 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 220.955 ms, heap usage 494.149 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 703\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 703\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 14\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 24\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 12\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 222.22 op/s (222.22 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1829.661 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 205.050 ms, heap usage 422.764 MB -> 141.687 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 703\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 11\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 14\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 24\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 12\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 333.33 op/s (333.33 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1893.863 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 201.343 ms, heap usage 494.218 MB -> 141.688 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 633\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 703\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 24\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 12\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 363.09 op/s (363.09 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1895.940 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 182.860 ms, heap usage 493.209 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 580\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 703\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 11\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 14\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 24\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 12\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 459.02 op/s (459.02 op/s including failed)\nElapsed time: 0.61 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1952.977 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 305.641 ms, heap usage 493.221 MB -> 141.685 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 541\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 703\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 11\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 14\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 24\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 12\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 576.58 op/s (576.58 op/s including failed)\nElapsed time: 0.56 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1795.886 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 194.826 ms, heap usage 365.744 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 18\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 730\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 11\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 14\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 24\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 12\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 473.68 op/s (473.68 op/s including failed)\nElapsed time: 0.76 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1976.848 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 197.099 ms, heap usage 498.182 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 730\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 11\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 14\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 24\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 12\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 613.50 op/s (613.50 op/s including failed)\nElapsed time: 0.65 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1874.670 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 220.616 ms, heap usage 412.582 MB -> 141.691 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 576\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 730\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 11\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 14\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 24\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 12\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 739.50 op/s (739.50 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1809.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 229.427 ms, heap usage 493.244 MB -> 141.698 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 579\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 730\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 11\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 24\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 12\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 797.34 op/s (797.34 op/s including failed)\nElapsed time: 0.60 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (2027.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 233.061 ms, heap usage 493.236 MB -> 141.686 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 619\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 730\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 11\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 14\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 24\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 12\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 791.48 op/s (791.48 op/s including failed)\nElapsed time: 0.66 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1977.936 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 260.927 ms, heap usage 493.244 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 730\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 730\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 11\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 14\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 24\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 12\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 750.67 op/s (750.67 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (2141.642 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 267.832 ms, heap usage 407.307 MB -> 141.703 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 601\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 730\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 11\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 14\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 24\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 12\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 966.18 op/s (966.18 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1865.933 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 196.610 ms, heap usage 166.694 MB -> 152.381 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (58120.386 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 314.055 ms, heap usage 442.788 MB -> 428.544 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (32227.208 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 272.478 ms, heap usage 439.699 MB -> 428.679 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (32368.500 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 367.651 ms, heap usage 531.599 MB -> 428.772 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (31930.918 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 299.299 ms, heap usage 447.937 MB -> 429.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (31541.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 287.549 ms, heap usage 447.896 MB -> 429.397 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (32105.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 277.492 ms, heap usage 446.758 MB -> 426.946 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (30103.488 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 252.894 ms, heap usage 642.931 MB -> 426.553 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (30495.558 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 240.060 ms, heap usage 452.457 MB -> 424.504 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (30590.481 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 248.503 ms, heap usage 435.730 MB -> 424.249 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (30206.652 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 249.386 ms, heap usage 525.208 MB -> 422.576 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (28775.738 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 303.313 ms, heap usage 742.561 MB -> 421.722 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (29893.644 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 240.840 ms, heap usage 637.025 MB -> 421.841 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (30188.336 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 249.257 ms, heap usage 742.673 MB -> 421.908 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (29940.902 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 203.730 ms, heap usage 760.930 MB -> 421.991 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (30274.413 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 255.470 ms, heap usage 699.724 MB -> 167.378 MB.\n====== als (apache-spark) [default], iteration 0 completed (22015.250 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 350.433 ms, heap usage 344.646 MB -> 192.150 MB.\n====== als (apache-spark) [default], iteration 1 completed (11444.600 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 316.353 ms, heap usage 707.581 MB -> 193.415 MB.\n====== als (apache-spark) [default], iteration 2 completed (10696.504 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 307.867 ms, heap usage 647.009 MB -> 194.023 MB.\n====== als (apache-spark) [default], iteration 3 completed (10216.778 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 267.954 ms, heap usage 683.784 MB -> 194.638 MB.\n====== als (apache-spark) [default], iteration 4 completed (9859.064 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 281.111 ms, heap usage 428.967 MB -> 194.996 MB.\n====== als (apache-spark) [default], iteration 5 completed (9616.145 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 297.340 ms, heap usage 369.268 MB -> 195.120 MB.\n====== als (apache-spark) [default], iteration 6 completed (9813.018 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 264.187 ms, heap usage 561.294 MB -> 196.222 MB.\n====== als (apache-spark) [default], iteration 7 completed (9917.177 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 302.104 ms, heap usage 692.182 MB -> 196.730 MB.\n====== als (apache-spark) [default], iteration 8 completed (9790.625 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 327.750 ms, heap usage 843.970 MB -> 197.512 MB.\n====== als (apache-spark) [default], iteration 9 completed (9239.064 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 261.342 ms, heap usage 334.900 MB -> 197.328 MB.\n====== als (apache-spark) [default], iteration 10 completed (9458.038 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 325.571 ms, heap usage 275.451 MB -> 197.311 MB.\n====== als (apache-spark) [default], iteration 11 completed (9574.332 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 301.606 ms, heap usage 743.440 MB -> 198.064 MB.\n====== als (apache-spark) [default], iteration 12 completed (9571.358 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 344.298 ms, heap usage 701.230 MB -> 198.205 MB.\n====== als (apache-spark) [default], iteration 13 completed (9288.113 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 285.187 ms, heap usage 275.595 MB -> 197.793 MB.\n====== als (apache-spark) [default], iteration 14 completed (9172.803 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 293.096 ms, heap usage 826.511 MB -> 178.953 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5562.022 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 271.376 ms, heap usage 349.017 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5303.620 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 251.125 ms, heap usage 312.552 MB -> 179.004 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (5220.150 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 336.890 ms, heap usage 324.760 MB -> 179.012 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (5286.316 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 264.682 ms, heap usage 310.802 MB -> 178.981 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (5890.750 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 308.278 ms, heap usage 309.802 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (5240.279 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 258.806 ms, heap usage 309.302 MB -> 178.998 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (5555.636 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 326.386 ms, heap usage 309.802 MB -> 178.993 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (5388.352 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 337.023 ms, heap usage 299.802 MB -> 178.978 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (6068.267 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 248.524 ms, heap usage 316.179 MB -> 178.983 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4606.540 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 256.606 ms, heap usage 312.478 MB -> 178.980 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4824.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 320.290 ms, heap usage 317.302 MB -> 178.993 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (5334.941 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 248.608 ms, heap usage 382.537 MB -> 178.998 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (5360.162 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 257.061 ms, heap usage 302.802 MB -> 178.982 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (5565.972 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 279.204 ms, heap usage 309.302 MB -> 178.997 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (5500.409 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 404.952 ms, heap usage 351.931 MB -> 201.232 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (528.915 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 314.014 ms, heap usage 230.732 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (192.925 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 283.646 ms, heap usage 231.267 MB -> 201.280 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (208.607 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 264.196 ms, heap usage 231.272 MB -> 201.264 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (201.168 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 275.380 ms, heap usage 231.267 MB -> 201.265 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (195.448 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 276.700 ms, heap usage 231.265 MB -> 201.267 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (193.883 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 270.527 ms, heap usage 231.265 MB -> 201.267 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (192.752 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 298.673 ms, heap usage 231.265 MB -> 201.285 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (190.588 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 276.502 ms, heap usage 231.265 MB -> 201.280 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (196.294 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 282.001 ms, heap usage 231.265 MB -> 201.265 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (187.710 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 274.661 ms, heap usage 231.265 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (205.994 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 324.576 ms, heap usage 231.273 MB -> 201.285 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (196.845 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 330.213 ms, heap usage 231.265 MB -> 201.268 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (185.100 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 318.153 ms, heap usage 231.265 MB -> 201.281 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (205.909 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 270.804 ms, heap usage 231.273 MB -> 201.269 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (206.182 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 314.737 ms, heap usage 232.766 MB -> 180.295 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1378.007 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 261.201 ms, heap usage 506.267 MB -> 180.191 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (575.902 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 254.781 ms, heap usage 480.688 MB -> 180.185 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (556.882 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 266.955 ms, heap usage 494.185 MB -> 180.186 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (431.271 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 327.384 ms, heap usage 488.686 MB -> 180.186 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (504.430 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 298.076 ms, heap usage 490.686 MB -> 180.206 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (449.552 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 285.466 ms, heap usage 489.186 MB -> 180.196 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (447.054 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 264.792 ms, heap usage 492.186 MB -> 180.209 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (445.125 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 339.222 ms, heap usage 493.686 MB -> 180.189 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (501.871 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 263.772 ms, heap usage 494.686 MB -> 180.207 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (456.366 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 310.936 ms, heap usage 493.186 MB -> 180.186 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (433.011 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 265.608 ms, heap usage 488.686 MB -> 180.204 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (465.629 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 282.134 ms, heap usage 494.186 MB -> 180.189 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (400.286 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 319.203 ms, heap usage 490.694 MB -> 180.187 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (416.982 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 259.433 ms, heap usage 488.187 MB -> 180.202 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (396.622 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 343.495 ms, heap usage 400.529 MB -> 192.068 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (13384.279 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 370.814 ms, heap usage 801.557 MB -> 272.923 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (3039.923 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 434.335 ms, heap usage 674.149 MB -> 272.987 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (2590.404 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 275.204 ms, heap usage 782.439 MB -> 273.857 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (2328.598 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 281.930 ms, heap usage 804.824 MB -> 274.283 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (2043.440 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 299.552 ms, heap usage 785.726 MB -> 274.330 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (2118.994 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 266.508 ms, heap usage 781.159 MB -> 274.639 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (2038.933 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 301.837 ms, heap usage 773.248 MB -> 274.788 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1947.981 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 301.024 ms, heap usage 790.752 MB -> 276.192 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (2036.573 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 270.570 ms, heap usage 781.218 MB -> 275.263 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (2029.457 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 322.206 ms, heap usage 771.255 MB -> 275.344 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1965.379 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 275.481 ms, heap usage 787.081 MB -> 276.111 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (2138.410 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 359.685 ms, heap usage 773.508 MB -> 275.667 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (2000.336 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 339.421 ms, heap usage 786.372 MB -> 276.665 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1811.999 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 325.664 ms, heap usage 784.908 MB -> 276.140 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (2180.194 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 400.231 ms, heap usage 629.663 MB -> 209.060 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (28647.863 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 318.437 ms, heap usage 707.267 MB -> 216.073 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (19851.827 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 438.073 ms, heap usage 807.430 MB -> 215.824 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (18800.787 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 414.999 ms, heap usage 436.901 MB -> 217.054 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (18872.396 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 316.131 ms, heap usage 821.956 MB -> 218.136 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (17041.003 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 305.158 ms, heap usage 387.475 MB -> 217.699 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (17747.673 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 346.532 ms, heap usage 710.963 MB -> 218.025 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (17422.806 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 335.379 ms, heap usage 254.501 MB -> 217.794 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (17271.624 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 354.728 ms, heap usage 297.155 MB -> 218.075 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (15950.833 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 357.761 ms, heap usage 480.461 MB -> 217.970 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (16296.144 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 345.888 ms, heap usage 549.889 MB -> 217.898 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (16968.823 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 335.766 ms, heap usage 308.680 MB -> 218.011 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (15657.866 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 350.688 ms, heap usage 743.584 MB -> 217.995 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (16581.067 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 313.803 ms, heap usage 718.157 MB -> 218.154 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (16176.639 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 366.079 ms, heap usage 446.719 MB -> 217.979 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (15460.779 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 364.412 ms, heap usage 754.713 MB -> 210.353 MB.\n====== mnemonics (functional) [default], iteration 0 completed (5825.169 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 359.652 ms, heap usage 342.941 MB -> 210.220 MB.\n====== mnemonics (functional) [default], iteration 1 completed (5175.165 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 352.444 ms, heap usage 350.232 MB -> 210.219 MB.\n====== mnemonics (functional) [default], iteration 2 completed (6273.445 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 305.881 ms, heap usage 339.744 MB -> 210.219 MB.\n====== mnemonics (functional) [default], iteration 3 completed (5964.075 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 305.517 ms, heap usage 339.738 MB -> 210.219 MB.\n====== mnemonics (functional) [default], iteration 4 completed (6267.783 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 292.735 ms, heap usage 339.303 MB -> 210.219 MB.\n====== mnemonics (functional) [default], iteration 5 completed (5136.938 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 358.445 ms, heap usage 346.219 MB -> 210.219 MB.\n====== mnemonics (functional) [default], iteration 6 completed (6401.145 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 403.217 ms, heap usage 327.303 MB -> 210.219 MB.\n====== mnemonics (functional) [default], iteration 7 completed (6174.827 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 383.431 ms, heap usage 339.601 MB -> 210.222 MB.\n====== mnemonics (functional) [default], iteration 8 completed (6389.615 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 346.580 ms, heap usage 330.803 MB -> 210.237 MB.\n====== mnemonics (functional) [default], iteration 9 completed (6011.971 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 299.140 ms, heap usage 339.303 MB -> 210.220 MB.\n====== mnemonics (functional) [default], iteration 10 completed (5366.309 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 363.796 ms, heap usage 339.268 MB -> 210.240 MB.\n====== mnemonics (functional) [default], iteration 11 completed (5020.085 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 306.326 ms, heap usage 354.220 MB -> 210.220 MB.\n====== mnemonics (functional) [default], iteration 12 completed (4772.518 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 320.193 ms, heap usage 351.720 MB -> 210.222 MB.\n====== mnemonics (functional) [default], iteration 13 completed (4677.720 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 287.906 ms, heap usage 487.220 MB -> 210.225 MB.\n====== mnemonics (functional) [default], iteration 14 completed (4875.555 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 367.094 ms, heap usage 347.384 MB -> 212.865 MB.\n====== dotty (scala) [default], iteration 0 completed (20725.749 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 398.105 ms, heap usage 261.882 MB -> 229.423 MB.\n====== dotty (scala) [default], iteration 1 completed (9536.417 ms) ======\n====== dotty (scala) [default], iteration 2 started ======\nGC before operation: completed in 322.449 ms, heap usage 464.943 MB -> 229.424 MB.\n====== dotty (scala) [default], iteration 2 completed (6715.154 ms) ======\n====== dotty (scala) [default], iteration 3 started ======\nGC before operation: completed in 388.806 ms, heap usage 459.956 MB -> 229.457 MB.\n====== dotty (scala) [default], iteration 3 completed (5660.249 ms) ======\n====== dotty (scala) [default], iteration 4 started ======\nGC before operation: completed in 309.513 ms, heap usage 455.947 MB -> 229.460 MB.\n====== dotty (scala) [default], iteration 4 completed (4396.689 ms) ======\n====== dotty (scala) [default], iteration 5 started ======\nGC before operation: completed in 400.750 ms, heap usage 452.972 MB -> 229.481 MB.\n====== dotty (scala) [default], iteration 5 completed (4488.655 ms) ======\n====== dotty (scala) [default], iteration 6 started ======\nGC before operation: completed in 325.244 ms, heap usage 451.984 MB -> 229.465 MB.\n====== dotty (scala) [default], iteration 6 completed (3760.947 ms) ======\n====== dotty (scala) [default], iteration 7 started ======\nGC before operation: completed in 348.642 ms, heap usage 450.486 MB -> 229.471 MB.\n====== dotty (scala) [default], iteration 7 completed (3894.004 ms) ======\n====== dotty (scala) [default], iteration 8 started ======\nGC before operation: completed in 357.453 ms, heap usage 449.496 MB -> 229.481 MB.\n====== dotty (scala) [default], iteration 8 completed (3648.241 ms) ======\n====== dotty (scala) [default], iteration 9 started ======\nGC before operation: completed in 349.208 ms, heap usage 448.479 MB -> 229.506 MB.\n====== dotty (scala) [default], iteration 9 completed (3527.757 ms) ======\n====== dotty (scala) [default], iteration 10 started ======\nGC before operation: completed in 353.690 ms, heap usage 446.487 MB -> 229.509 MB.\n====== dotty (scala) [default], iteration 10 completed (2676.249 ms) ======\n====== dotty (scala) [default], iteration 11 started ======\nGC before operation: completed in 369.666 ms, heap usage 445.510 MB -> 229.510 MB.\n====== dotty (scala) [default], iteration 11 completed (3230.421 ms) ======\n====== dotty (scala) [default], iteration 12 started ======\nGC before operation: completed in 314.783 ms, heap usage 445.013 MB -> 229.497 MB.\n====== dotty (scala) [default], iteration 12 completed (2239.803 ms) ======\n====== dotty (scala) [default], iteration 13 started ======\nGC before operation: completed in 336.566 ms, heap usage 444.015 MB -> 229.507 MB.\n====== dotty (scala) [default], iteration 13 completed (2639.643 ms) ======\n====== dotty (scala) [default], iteration 14 started ======\nGC before operation: completed in 312.937 ms, heap usage 444.032 MB -> 229.519 MB.\n====== dotty (scala) [default], iteration 14 completed (2730.758 ms) ======\nMaster port: 41451\nCache ports: 38873, 36017\n====== finagle-chirper (web) [default], iteration 0 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 476.012 ms, heap usage 311.506 MB -> 222.562 MB.\n====== finagle-chirper (web) [default], iteration 0 completed (17970.035 ms) ======\n====== finagle-chirper (web) [default], iteration 1 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 537.793 ms, heap usage 491.789 MB -> 223.482 MB.\n====== finagle-chirper (web) [default], iteration 1 completed (8226.478 ms) ======\n====== finagle-chirper (web) [default], iteration 2 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 296.906 ms, heap usage 403.256 MB -> 223.548 MB.\n====== finagle-chirper (web) [default], iteration 2 completed (5465.834 ms) ======\n====== finagle-chirper (web) [default], iteration 3 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 313.226 ms, heap usage 618.298 MB -> 223.533 MB.\n====== finagle-chirper (web) [default], iteration 3 completed (4566.979 ms) ======\n====== finagle-chirper (web) [default], iteration 4 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 345.081 ms, heap usage 570.483 MB -> 223.687 MB.\n====== finagle-chirper (web) [default], iteration 4 completed (4451.892 ms) ======\n====== finagle-chirper (web) [default], iteration 5 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 383.791 ms, heap usage 535.503 MB -> 223.702 MB.\n====== finagle-chirper (web) [default], iteration 5 completed (4162.543 ms) ======\n====== finagle-chirper (web) [default], iteration 6 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 388.428 ms, heap usage 529.055 MB -> 223.697 MB.\n====== finagle-chirper (web) [default], iteration 6 completed (4163.397 ms) ======\n====== finagle-chirper (web) [default], iteration 7 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 317.191 ms, heap usage 531.494 MB -> 223.746 MB.\n====== finagle-chirper (web) [default], iteration 7 completed (4019.260 ms) ======\n====== finagle-chirper (web) [default], iteration 8 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 309.196 ms, heap usage 504.001 MB -> 223.705 MB.\n====== finagle-chirper (web) [default], iteration 8 completed (4210.320 ms) ======\n====== finagle-chirper (web) [default], iteration 9 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 350.505 ms, heap usage 506.518 MB -> 223.710 MB.\n====== finagle-chirper (web) [default], iteration 9 completed (3901.800 ms) ======\n====== finagle-chirper (web) [default], iteration 10 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 269.043 ms, heap usage 503.503 MB -> 224.241 MB.\n====== finagle-chirper (web) [default], iteration 10 completed (3826.268 ms) ======\n====== finagle-chirper (web) [default], iteration 11 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 283.578 ms, heap usage 506.660 MB -> 223.715 MB.\n====== finagle-chirper (web) [default], iteration 11 completed (4087.217 ms) ======\n====== finagle-chirper (web) [default], iteration 12 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 302.348 ms, heap usage 501.624 MB -> 223.741 MB.\n====== finagle-chirper (web) [default], iteration 12 completed (3706.975 ms) ======\n====== finagle-chirper (web) [default], iteration 13 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 334.217 ms, heap usage 505.022 MB -> 223.699 MB.\n====== finagle-chirper (web) [default], iteration 13 completed (4041.747 ms) ======\n====== finagle-chirper (web) [default], iteration 14 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 278.988 ms, heap usage 505.025 MB -> 223.720 MB.\n====== finagle-chirper (web) [default], iteration 14 completed (3784.590 ms) ======\n"
    },
    "times": [
        380398.669,
        226034.574,
        211629.48,
        206165.671,
        202668.776,
        201057.01499999998,
        197568.968,
        194957.891,
        195362.372,
        191581.959,
        189620.164,
        190842.257,
        190767.533,
        190755.503,
        190075.898
    ]
}