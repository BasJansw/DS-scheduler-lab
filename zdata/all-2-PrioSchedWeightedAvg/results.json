{
    "scrabble": {
        "times": [
            3320.664,
            2103.873
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\n"
    },
    "page-rank": {
        "times": [
            40267.905,
            14597.977
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n"
    },
    "future-genetic": {
        "times": [
            18314.015,
            13739.354
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n"
    },
    "akka-uct": {
        "times": [
            24761.088,
            17621.286
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\n"
    },
    "movie-lens": {
        "times": [
            27239.598,
            17521.75
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n"
    },
    "scala-doku": {
        "times": [
            3762.77,
            2715.598
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\n"
    },
    "chi-square": {
        "times": [
            5193.561,
            1677.523
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.072 ms, heap usage 339.845 MB -> 62.565 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5193.561 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 236.851 ms, heap usage 238.148 MB -> 208.751 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1677.523 ms) ======\n"
    },
    "fj-kmeans": {
        "times": [
            11500.227,
            11406.304
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.072 ms, heap usage 339.845 MB -> 62.565 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5193.561 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 236.851 ms, heap usage 238.148 MB -> 208.751 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1677.523 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 238.587 ms, heap usage 377.767 MB -> 150.725 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11500.227 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 185.442 ms, heap usage 279.045 MB -> 145.364 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (11406.304 ms) ======\n"
    },
    "rx-scrabble": {
        "times": [
            629.794,
            400.662
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.072 ms, heap usage 339.845 MB -> 62.565 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5193.561 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 236.851 ms, heap usage 238.148 MB -> 208.751 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1677.523 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 238.587 ms, heap usage 377.767 MB -> 150.725 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11500.227 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 185.442 ms, heap usage 279.045 MB -> 145.364 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (11406.304 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 140.227 ms, heap usage 177.120 MB -> 95.503 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (629.794 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 173.257 ms, heap usage 248.503 MB -> 96.136 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (400.662 ms) ======\n"
    },
    "db-shootout": {
        "times": [
            10662.339,
            10336.827
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.072 ms, heap usage 339.845 MB -> 62.565 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5193.561 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 236.851 ms, heap usage 238.148 MB -> 208.751 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1677.523 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 238.587 ms, heap usage 377.767 MB -> 150.725 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11500.227 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 185.442 ms, heap usage 279.045 MB -> 145.364 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (11406.304 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 140.227 ms, heap usage 177.120 MB -> 95.503 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (629.794 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 173.257 ms, heap usage 248.503 MB -> 96.136 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (400.662 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 151.544 ms, heap usage 149.490 MB -> 98.412 MB.\n====== db-shootout (database) [default], iteration 0 completed (10662.339 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 154.496 ms, heap usage 180.297 MB -> 153.530 MB.\n====== db-shootout (database) [default], iteration 1 completed (10336.827 ms) ======\n"
    },
    "finagle-http": {
        "times": [
            19358.728,
            8116.033
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.072 ms, heap usage 339.845 MB -> 62.565 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5193.561 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 236.851 ms, heap usage 238.148 MB -> 208.751 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1677.523 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 238.587 ms, heap usage 377.767 MB -> 150.725 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11500.227 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 185.442 ms, heap usage 279.045 MB -> 145.364 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (11406.304 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 140.227 ms, heap usage 177.120 MB -> 95.503 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (629.794 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 173.257 ms, heap usage 248.503 MB -> 96.136 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (400.662 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 151.544 ms, heap usage 149.490 MB -> 98.412 MB.\n====== db-shootout (database) [default], iteration 0 completed (10662.339 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 154.496 ms, heap usage 180.297 MB -> 153.530 MB.\n====== db-shootout (database) [default], iteration 1 completed (10336.827 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35641 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 145.662 ms, heap usage 758.636 MB -> 110.207 MB.\n====== finagle-http (web) [default], iteration 0 completed (19358.728 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 159.837 ms, heap usage 285.325 MB -> 113.132 MB.\n====== finagle-http (web) [default], iteration 1 completed (8116.033 ms) ======\n"
    },
    "reactors": {
        "times": [
            17103.189,
            14147.131
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.072 ms, heap usage 339.845 MB -> 62.565 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5193.561 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 236.851 ms, heap usage 238.148 MB -> 208.751 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1677.523 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 238.587 ms, heap usage 377.767 MB -> 150.725 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11500.227 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 185.442 ms, heap usage 279.045 MB -> 145.364 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (11406.304 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 140.227 ms, heap usage 177.120 MB -> 95.503 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (629.794 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 173.257 ms, heap usage 248.503 MB -> 96.136 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (400.662 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 151.544 ms, heap usage 149.490 MB -> 98.412 MB.\n====== db-shootout (database) [default], iteration 0 completed (10662.339 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 154.496 ms, heap usage 180.297 MB -> 153.530 MB.\n====== db-shootout (database) [default], iteration 1 completed (10336.827 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35641 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 145.662 ms, heap usage 758.636 MB -> 110.207 MB.\n====== finagle-http (web) [default], iteration 0 completed (19358.728 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 159.837 ms, heap usage 285.325 MB -> 113.132 MB.\n====== finagle-http (web) [default], iteration 1 completed (8116.033 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 178.106 ms, heap usage 136.948 MB -> 114.650 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17103.189 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.344 ms, heap usage 741.206 MB -> 115.480 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (14147.131 ms) ======\n"
    },
    "dec-tree": {
        "times": [
            12379.379,
            3222.253
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.072 ms, heap usage 339.845 MB -> 62.565 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5193.561 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 236.851 ms, heap usage 238.148 MB -> 208.751 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1677.523 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 238.587 ms, heap usage 377.767 MB -> 150.725 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11500.227 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 185.442 ms, heap usage 279.045 MB -> 145.364 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (11406.304 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 140.227 ms, heap usage 177.120 MB -> 95.503 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (629.794 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 173.257 ms, heap usage 248.503 MB -> 96.136 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (400.662 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 151.544 ms, heap usage 149.490 MB -> 98.412 MB.\n====== db-shootout (database) [default], iteration 0 completed (10662.339 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 154.496 ms, heap usage 180.297 MB -> 153.530 MB.\n====== db-shootout (database) [default], iteration 1 completed (10336.827 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35641 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 145.662 ms, heap usage 758.636 MB -> 110.207 MB.\n====== finagle-http (web) [default], iteration 0 completed (19358.728 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 159.837 ms, heap usage 285.325 MB -> 113.132 MB.\n====== finagle-http (web) [default], iteration 1 completed (8116.033 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 178.106 ms, heap usage 136.948 MB -> 114.650 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17103.189 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.344 ms, heap usage 741.206 MB -> 115.480 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (14147.131 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.334 ms, heap usage 252.049 MB -> 124.730 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12379.379 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 210.154 ms, heap usage 288.328 MB -> 156.731 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3222.253 ms) ======\n"
    },
    "scala-stm-bench7": {
        "times": [
            3048.058,
            2214.539
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.072 ms, heap usage 339.845 MB -> 62.565 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5193.561 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 236.851 ms, heap usage 238.148 MB -> 208.751 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1677.523 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 238.587 ms, heap usage 377.767 MB -> 150.725 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11500.227 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 185.442 ms, heap usage 279.045 MB -> 145.364 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (11406.304 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 140.227 ms, heap usage 177.120 MB -> 95.503 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (629.794 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 173.257 ms, heap usage 248.503 MB -> 96.136 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (400.662 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 151.544 ms, heap usage 149.490 MB -> 98.412 MB.\n====== db-shootout (database) [default], iteration 0 completed (10662.339 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 154.496 ms, heap usage 180.297 MB -> 153.530 MB.\n====== db-shootout (database) [default], iteration 1 completed (10336.827 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35641 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 145.662 ms, heap usage 758.636 MB -> 110.207 MB.\n====== finagle-http (web) [default], iteration 0 completed (19358.728 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 159.837 ms, heap usage 285.325 MB -> 113.132 MB.\n====== finagle-http (web) [default], iteration 1 completed (8116.033 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 178.106 ms, heap usage 136.948 MB -> 114.650 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17103.189 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.344 ms, heap usage 741.206 MB -> 115.480 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (14147.131 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.334 ms, heap usage 252.049 MB -> 124.730 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12379.379 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 210.154 ms, heap usage 288.328 MB -> 156.731 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3222.253 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 172.536 ms, heap usage 373.139 MB -> 139.158 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 591\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 591\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 22\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 20\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 10\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 55.25 op/s (55.25 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3048.058 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 149.722 ms, heap usage 511.583 MB -> 139.480 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 520\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 591\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 22\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 20\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 144.40 op/s (144.40 op/s including failed)\nElapsed time: 0.55 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2214.539 ms) ======\n"
    },
    "naive-bayes": {
        "times": [
            49678.519,
            27745.144
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.072 ms, heap usage 339.845 MB -> 62.565 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5193.561 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 236.851 ms, heap usage 238.148 MB -> 208.751 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1677.523 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 238.587 ms, heap usage 377.767 MB -> 150.725 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11500.227 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 185.442 ms, heap usage 279.045 MB -> 145.364 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (11406.304 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 140.227 ms, heap usage 177.120 MB -> 95.503 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (629.794 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 173.257 ms, heap usage 248.503 MB -> 96.136 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (400.662 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 151.544 ms, heap usage 149.490 MB -> 98.412 MB.\n====== db-shootout (database) [default], iteration 0 completed (10662.339 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 154.496 ms, heap usage 180.297 MB -> 153.530 MB.\n====== db-shootout (database) [default], iteration 1 completed (10336.827 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35641 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 145.662 ms, heap usage 758.636 MB -> 110.207 MB.\n====== finagle-http (web) [default], iteration 0 completed (19358.728 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 159.837 ms, heap usage 285.325 MB -> 113.132 MB.\n====== finagle-http (web) [default], iteration 1 completed (8116.033 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 178.106 ms, heap usage 136.948 MB -> 114.650 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17103.189 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.344 ms, heap usage 741.206 MB -> 115.480 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (14147.131 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.334 ms, heap usage 252.049 MB -> 124.730 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12379.379 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 210.154 ms, heap usage 288.328 MB -> 156.731 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3222.253 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 172.536 ms, heap usage 373.139 MB -> 139.158 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 591\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 591\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 22\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 20\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 10\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 55.25 op/s (55.25 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3048.058 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 149.722 ms, heap usage 511.583 MB -> 139.480 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 520\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 591\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 22\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 20\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 144.40 op/s (144.40 op/s including failed)\nElapsed time: 0.55 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2214.539 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 195.368 ms, heap usage 291.245 MB -> 150.245 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (49678.519 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 320.299 ms, heap usage 467.789 MB -> 426.418 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (27745.144 ms) ======\n"
    },
    "als": {
        "times": [
            20665.131,
            10289.689
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.072 ms, heap usage 339.845 MB -> 62.565 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5193.561 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 236.851 ms, heap usage 238.148 MB -> 208.751 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1677.523 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 238.587 ms, heap usage 377.767 MB -> 150.725 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11500.227 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 185.442 ms, heap usage 279.045 MB -> 145.364 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (11406.304 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 140.227 ms, heap usage 177.120 MB -> 95.503 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (629.794 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 173.257 ms, heap usage 248.503 MB -> 96.136 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (400.662 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 151.544 ms, heap usage 149.490 MB -> 98.412 MB.\n====== db-shootout (database) [default], iteration 0 completed (10662.339 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 154.496 ms, heap usage 180.297 MB -> 153.530 MB.\n====== db-shootout (database) [default], iteration 1 completed (10336.827 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35641 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 145.662 ms, heap usage 758.636 MB -> 110.207 MB.\n====== finagle-http (web) [default], iteration 0 completed (19358.728 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 159.837 ms, heap usage 285.325 MB -> 113.132 MB.\n====== finagle-http (web) [default], iteration 1 completed (8116.033 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 178.106 ms, heap usage 136.948 MB -> 114.650 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17103.189 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.344 ms, heap usage 741.206 MB -> 115.480 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (14147.131 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.334 ms, heap usage 252.049 MB -> 124.730 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12379.379 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 210.154 ms, heap usage 288.328 MB -> 156.731 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3222.253 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 172.536 ms, heap usage 373.139 MB -> 139.158 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 591\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 591\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 22\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 20\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 10\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 55.25 op/s (55.25 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3048.058 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 149.722 ms, heap usage 511.583 MB -> 139.480 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 520\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 591\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 22\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 20\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 144.40 op/s (144.40 op/s including failed)\nElapsed time: 0.55 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2214.539 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 195.368 ms, heap usage 291.245 MB -> 150.245 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (49678.519 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 320.299 ms, heap usage 467.789 MB -> 426.418 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (27745.144 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 262.065 ms, heap usage 468.198 MB -> 172.056 MB.\n====== als (apache-spark) [default], iteration 0 completed (20665.131 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 390.442 ms, heap usage 622.403 MB -> 196.712 MB.\n====== als (apache-spark) [default], iteration 1 completed (10289.689 ms) ======\n"
    },
    "par-mnemonics": {
        "times": [
            5797.672,
            5145.702
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.072 ms, heap usage 339.845 MB -> 62.565 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5193.561 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 236.851 ms, heap usage 238.148 MB -> 208.751 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1677.523 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 238.587 ms, heap usage 377.767 MB -> 150.725 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11500.227 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 185.442 ms, heap usage 279.045 MB -> 145.364 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (11406.304 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 140.227 ms, heap usage 177.120 MB -> 95.503 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (629.794 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 173.257 ms, heap usage 248.503 MB -> 96.136 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (400.662 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 151.544 ms, heap usage 149.490 MB -> 98.412 MB.\n====== db-shootout (database) [default], iteration 0 completed (10662.339 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 154.496 ms, heap usage 180.297 MB -> 153.530 MB.\n====== db-shootout (database) [default], iteration 1 completed (10336.827 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35641 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 145.662 ms, heap usage 758.636 MB -> 110.207 MB.\n====== finagle-http (web) [default], iteration 0 completed (19358.728 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 159.837 ms, heap usage 285.325 MB -> 113.132 MB.\n====== finagle-http (web) [default], iteration 1 completed (8116.033 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 178.106 ms, heap usage 136.948 MB -> 114.650 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17103.189 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.344 ms, heap usage 741.206 MB -> 115.480 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (14147.131 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.334 ms, heap usage 252.049 MB -> 124.730 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12379.379 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 210.154 ms, heap usage 288.328 MB -> 156.731 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3222.253 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 172.536 ms, heap usage 373.139 MB -> 139.158 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 591\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 591\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 22\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 20\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 10\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 55.25 op/s (55.25 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3048.058 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 149.722 ms, heap usage 511.583 MB -> 139.480 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 520\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 591\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 22\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 20\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 144.40 op/s (144.40 op/s including failed)\nElapsed time: 0.55 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2214.539 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 195.368 ms, heap usage 291.245 MB -> 150.245 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (49678.519 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 320.299 ms, heap usage 467.789 MB -> 426.418 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (27745.144 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 262.065 ms, heap usage 468.198 MB -> 172.056 MB.\n====== als (apache-spark) [default], iteration 0 completed (20665.131 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 390.442 ms, heap usage 622.403 MB -> 196.712 MB.\n====== als (apache-spark) [default], iteration 1 completed (10289.689 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 234.576 ms, heap usage 417.316 MB -> 184.845 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5797.672 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 235.370 ms, heap usage 305.620 MB -> 183.219 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5145.702 ms) ======\n"
    },
    "scala-kmeans": {
        "times": [
            480.463,
            442.009
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.072 ms, heap usage 339.845 MB -> 62.565 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5193.561 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 236.851 ms, heap usage 238.148 MB -> 208.751 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1677.523 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 238.587 ms, heap usage 377.767 MB -> 150.725 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11500.227 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 185.442 ms, heap usage 279.045 MB -> 145.364 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (11406.304 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 140.227 ms, heap usage 177.120 MB -> 95.503 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (629.794 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 173.257 ms, heap usage 248.503 MB -> 96.136 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (400.662 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 151.544 ms, heap usage 149.490 MB -> 98.412 MB.\n====== db-shootout (database) [default], iteration 0 completed (10662.339 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 154.496 ms, heap usage 180.297 MB -> 153.530 MB.\n====== db-shootout (database) [default], iteration 1 completed (10336.827 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35641 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 145.662 ms, heap usage 758.636 MB -> 110.207 MB.\n====== finagle-http (web) [default], iteration 0 completed (19358.728 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 159.837 ms, heap usage 285.325 MB -> 113.132 MB.\n====== finagle-http (web) [default], iteration 1 completed (8116.033 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 178.106 ms, heap usage 136.948 MB -> 114.650 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17103.189 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.344 ms, heap usage 741.206 MB -> 115.480 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (14147.131 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.334 ms, heap usage 252.049 MB -> 124.730 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12379.379 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 210.154 ms, heap usage 288.328 MB -> 156.731 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3222.253 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 172.536 ms, heap usage 373.139 MB -> 139.158 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 591\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 591\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 22\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 20\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 10\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 55.25 op/s (55.25 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3048.058 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 149.722 ms, heap usage 511.583 MB -> 139.480 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 520\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 591\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 22\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 20\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 144.40 op/s (144.40 op/s including failed)\nElapsed time: 0.55 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2214.539 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 195.368 ms, heap usage 291.245 MB -> 150.245 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (49678.519 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 320.299 ms, heap usage 467.789 MB -> 426.418 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (27745.144 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 262.065 ms, heap usage 468.198 MB -> 172.056 MB.\n====== als (apache-spark) [default], iteration 0 completed (20665.131 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 390.442 ms, heap usage 622.403 MB -> 196.712 MB.\n====== als (apache-spark) [default], iteration 1 completed (10289.689 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 234.576 ms, heap usage 417.316 MB -> 184.845 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5797.672 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 235.370 ms, heap usage 305.620 MB -> 183.219 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5145.702 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 293.564 ms, heap usage 357.800 MB -> 205.455 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (480.463 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 263.575 ms, heap usage 266.955 MB -> 205.487 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (442.009 ms) ======\n"
    },
    "philosophers": {
        "times": [
            1328.429,
            441.507
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.072 ms, heap usage 339.845 MB -> 62.565 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5193.561 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 236.851 ms, heap usage 238.148 MB -> 208.751 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1677.523 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 238.587 ms, heap usage 377.767 MB -> 150.725 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11500.227 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 185.442 ms, heap usage 279.045 MB -> 145.364 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (11406.304 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 140.227 ms, heap usage 177.120 MB -> 95.503 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (629.794 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 173.257 ms, heap usage 248.503 MB -> 96.136 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (400.662 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 151.544 ms, heap usage 149.490 MB -> 98.412 MB.\n====== db-shootout (database) [default], iteration 0 completed (10662.339 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 154.496 ms, heap usage 180.297 MB -> 153.530 MB.\n====== db-shootout (database) [default], iteration 1 completed (10336.827 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35641 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 145.662 ms, heap usage 758.636 MB -> 110.207 MB.\n====== finagle-http (web) [default], iteration 0 completed (19358.728 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 159.837 ms, heap usage 285.325 MB -> 113.132 MB.\n====== finagle-http (web) [default], iteration 1 completed (8116.033 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 178.106 ms, heap usage 136.948 MB -> 114.650 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17103.189 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.344 ms, heap usage 741.206 MB -> 115.480 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (14147.131 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.334 ms, heap usage 252.049 MB -> 124.730 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12379.379 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 210.154 ms, heap usage 288.328 MB -> 156.731 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3222.253 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 172.536 ms, heap usage 373.139 MB -> 139.158 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 591\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 591\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 22\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 20\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 10\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 55.25 op/s (55.25 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3048.058 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 149.722 ms, heap usage 511.583 MB -> 139.480 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 520\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 591\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 22\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 20\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 144.40 op/s (144.40 op/s including failed)\nElapsed time: 0.55 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2214.539 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 195.368 ms, heap usage 291.245 MB -> 150.245 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (49678.519 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 320.299 ms, heap usage 467.789 MB -> 426.418 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (27745.144 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 262.065 ms, heap usage 468.198 MB -> 172.056 MB.\n====== als (apache-spark) [default], iteration 0 completed (20665.131 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 390.442 ms, heap usage 622.403 MB -> 196.712 MB.\n====== als (apache-spark) [default], iteration 1 completed (10289.689 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 234.576 ms, heap usage 417.316 MB -> 184.845 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5797.672 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 235.370 ms, heap usage 305.620 MB -> 183.219 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5145.702 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 293.564 ms, heap usage 357.800 MB -> 205.455 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (480.463 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 263.575 ms, heap usage 266.955 MB -> 205.487 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (442.009 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 261.872 ms, heap usage 327.987 MB -> 184.488 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1328.429 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 215.858 ms, heap usage 510.988 MB -> 184.411 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (441.507 ms) ======\n"
    },
    "log-regression": {
        "times": [
            10904.423,
            2996.167
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.072 ms, heap usage 339.845 MB -> 62.565 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5193.561 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 236.851 ms, heap usage 238.148 MB -> 208.751 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1677.523 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 238.587 ms, heap usage 377.767 MB -> 150.725 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11500.227 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 185.442 ms, heap usage 279.045 MB -> 145.364 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (11406.304 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 140.227 ms, heap usage 177.120 MB -> 95.503 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (629.794 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 173.257 ms, heap usage 248.503 MB -> 96.136 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (400.662 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 151.544 ms, heap usage 149.490 MB -> 98.412 MB.\n====== db-shootout (database) [default], iteration 0 completed (10662.339 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 154.496 ms, heap usage 180.297 MB -> 153.530 MB.\n====== db-shootout (database) [default], iteration 1 completed (10336.827 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35641 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 145.662 ms, heap usage 758.636 MB -> 110.207 MB.\n====== finagle-http (web) [default], iteration 0 completed (19358.728 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 159.837 ms, heap usage 285.325 MB -> 113.132 MB.\n====== finagle-http (web) [default], iteration 1 completed (8116.033 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 178.106 ms, heap usage 136.948 MB -> 114.650 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17103.189 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.344 ms, heap usage 741.206 MB -> 115.480 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (14147.131 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.334 ms, heap usage 252.049 MB -> 124.730 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12379.379 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 210.154 ms, heap usage 288.328 MB -> 156.731 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3222.253 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 172.536 ms, heap usage 373.139 MB -> 139.158 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 591\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 591\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 22\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 20\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 10\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 55.25 op/s (55.25 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3048.058 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 149.722 ms, heap usage 511.583 MB -> 139.480 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 520\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 591\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 22\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 20\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 144.40 op/s (144.40 op/s including failed)\nElapsed time: 0.55 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2214.539 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 195.368 ms, heap usage 291.245 MB -> 150.245 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (49678.519 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 320.299 ms, heap usage 467.789 MB -> 426.418 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (27745.144 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 262.065 ms, heap usage 468.198 MB -> 172.056 MB.\n====== als (apache-spark) [default], iteration 0 completed (20665.131 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 390.442 ms, heap usage 622.403 MB -> 196.712 MB.\n====== als (apache-spark) [default], iteration 1 completed (10289.689 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 234.576 ms, heap usage 417.316 MB -> 184.845 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5797.672 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 235.370 ms, heap usage 305.620 MB -> 183.219 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5145.702 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 293.564 ms, heap usage 357.800 MB -> 205.455 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (480.463 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 263.575 ms, heap usage 266.955 MB -> 205.487 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (442.009 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 261.872 ms, heap usage 327.987 MB -> 184.488 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1328.429 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 215.858 ms, heap usage 510.988 MB -> 184.411 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (441.507 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 237.129 ms, heap usage 401.411 MB -> 196.277 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (10904.423 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 324.831 ms, heap usage 327.020 MB -> 275.560 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2996.167 ms) ======\n"
    },
    "gauss-mix": {
        "times": [
            38425.939,
            29681.031
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.072 ms, heap usage 339.845 MB -> 62.565 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5193.561 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 236.851 ms, heap usage 238.148 MB -> 208.751 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1677.523 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 238.587 ms, heap usage 377.767 MB -> 150.725 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11500.227 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 185.442 ms, heap usage 279.045 MB -> 145.364 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (11406.304 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 140.227 ms, heap usage 177.120 MB -> 95.503 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (629.794 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 173.257 ms, heap usage 248.503 MB -> 96.136 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (400.662 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 151.544 ms, heap usage 149.490 MB -> 98.412 MB.\n====== db-shootout (database) [default], iteration 0 completed (10662.339 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 154.496 ms, heap usage 180.297 MB -> 153.530 MB.\n====== db-shootout (database) [default], iteration 1 completed (10336.827 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35641 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 145.662 ms, heap usage 758.636 MB -> 110.207 MB.\n====== finagle-http (web) [default], iteration 0 completed (19358.728 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 159.837 ms, heap usage 285.325 MB -> 113.132 MB.\n====== finagle-http (web) [default], iteration 1 completed (8116.033 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 178.106 ms, heap usage 136.948 MB -> 114.650 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17103.189 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.344 ms, heap usage 741.206 MB -> 115.480 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (14147.131 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.334 ms, heap usage 252.049 MB -> 124.730 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12379.379 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 210.154 ms, heap usage 288.328 MB -> 156.731 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3222.253 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 172.536 ms, heap usage 373.139 MB -> 139.158 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 591\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 591\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 22\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 20\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 10\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 55.25 op/s (55.25 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3048.058 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 149.722 ms, heap usage 511.583 MB -> 139.480 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 520\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 591\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 22\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 20\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 144.40 op/s (144.40 op/s including failed)\nElapsed time: 0.55 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2214.539 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 195.368 ms, heap usage 291.245 MB -> 150.245 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (49678.519 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 320.299 ms, heap usage 467.789 MB -> 426.418 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (27745.144 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 262.065 ms, heap usage 468.198 MB -> 172.056 MB.\n====== als (apache-spark) [default], iteration 0 completed (20665.131 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 390.442 ms, heap usage 622.403 MB -> 196.712 MB.\n====== als (apache-spark) [default], iteration 1 completed (10289.689 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 234.576 ms, heap usage 417.316 MB -> 184.845 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5797.672 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 235.370 ms, heap usage 305.620 MB -> 183.219 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5145.702 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 293.564 ms, heap usage 357.800 MB -> 205.455 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (480.463 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 263.575 ms, heap usage 266.955 MB -> 205.487 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (442.009 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 261.872 ms, heap usage 327.987 MB -> 184.488 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1328.429 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 215.858 ms, heap usage 510.988 MB -> 184.411 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (441.507 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 237.129 ms, heap usage 401.411 MB -> 196.277 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (10904.423 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 324.831 ms, heap usage 327.020 MB -> 275.560 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2996.167 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 328.103 ms, heap usage 840.939 MB -> 215.723 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (38425.939 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 259.617 ms, heap usage 488.730 MB -> 222.274 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (29681.031 ms) ======\n"
    },
    "mnemonics": {
        "times": [
            5198.869,
            5098.379
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.072 ms, heap usage 339.845 MB -> 62.565 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5193.561 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 236.851 ms, heap usage 238.148 MB -> 208.751 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1677.523 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 238.587 ms, heap usage 377.767 MB -> 150.725 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11500.227 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 185.442 ms, heap usage 279.045 MB -> 145.364 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (11406.304 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 140.227 ms, heap usage 177.120 MB -> 95.503 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (629.794 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 173.257 ms, heap usage 248.503 MB -> 96.136 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (400.662 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 151.544 ms, heap usage 149.490 MB -> 98.412 MB.\n====== db-shootout (database) [default], iteration 0 completed (10662.339 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 154.496 ms, heap usage 180.297 MB -> 153.530 MB.\n====== db-shootout (database) [default], iteration 1 completed (10336.827 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35641 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 145.662 ms, heap usage 758.636 MB -> 110.207 MB.\n====== finagle-http (web) [default], iteration 0 completed (19358.728 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 159.837 ms, heap usage 285.325 MB -> 113.132 MB.\n====== finagle-http (web) [default], iteration 1 completed (8116.033 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 178.106 ms, heap usage 136.948 MB -> 114.650 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17103.189 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.344 ms, heap usage 741.206 MB -> 115.480 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (14147.131 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.334 ms, heap usage 252.049 MB -> 124.730 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12379.379 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 210.154 ms, heap usage 288.328 MB -> 156.731 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3222.253 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 172.536 ms, heap usage 373.139 MB -> 139.158 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 591\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 591\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 22\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 20\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 10\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 55.25 op/s (55.25 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3048.058 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 149.722 ms, heap usage 511.583 MB -> 139.480 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 520\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 591\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 22\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 20\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 144.40 op/s (144.40 op/s including failed)\nElapsed time: 0.55 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2214.539 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 195.368 ms, heap usage 291.245 MB -> 150.245 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (49678.519 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 320.299 ms, heap usage 467.789 MB -> 426.418 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (27745.144 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 262.065 ms, heap usage 468.198 MB -> 172.056 MB.\n====== als (apache-spark) [default], iteration 0 completed (20665.131 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 390.442 ms, heap usage 622.403 MB -> 196.712 MB.\n====== als (apache-spark) [default], iteration 1 completed (10289.689 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 234.576 ms, heap usage 417.316 MB -> 184.845 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5797.672 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 235.370 ms, heap usage 305.620 MB -> 183.219 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5145.702 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 293.564 ms, heap usage 357.800 MB -> 205.455 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (480.463 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 263.575 ms, heap usage 266.955 MB -> 205.487 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (442.009 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 261.872 ms, heap usage 327.987 MB -> 184.488 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1328.429 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 215.858 ms, heap usage 510.988 MB -> 184.411 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (441.507 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 237.129 ms, heap usage 401.411 MB -> 196.277 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (10904.423 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 324.831 ms, heap usage 327.020 MB -> 275.560 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2996.167 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 328.103 ms, heap usage 840.939 MB -> 215.723 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (38425.939 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 259.617 ms, heap usage 488.730 MB -> 222.274 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (29681.031 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 268.428 ms, heap usage 244.234 MB -> 218.331 MB.\n====== mnemonics (functional) [default], iteration 0 completed (5198.869 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 252.369 ms, heap usage 538.831 MB -> 218.247 MB.\n====== mnemonics (functional) [default], iteration 1 completed (5098.379 ms) ======\n"
    },
    "dotty": {
        "times": [
            18229.147,
            7011.984
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.072 ms, heap usage 339.845 MB -> 62.565 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5193.561 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 236.851 ms, heap usage 238.148 MB -> 208.751 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1677.523 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 238.587 ms, heap usage 377.767 MB -> 150.725 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11500.227 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 185.442 ms, heap usage 279.045 MB -> 145.364 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (11406.304 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 140.227 ms, heap usage 177.120 MB -> 95.503 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (629.794 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 173.257 ms, heap usage 248.503 MB -> 96.136 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (400.662 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 151.544 ms, heap usage 149.490 MB -> 98.412 MB.\n====== db-shootout (database) [default], iteration 0 completed (10662.339 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 154.496 ms, heap usage 180.297 MB -> 153.530 MB.\n====== db-shootout (database) [default], iteration 1 completed (10336.827 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35641 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 145.662 ms, heap usage 758.636 MB -> 110.207 MB.\n====== finagle-http (web) [default], iteration 0 completed (19358.728 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 159.837 ms, heap usage 285.325 MB -> 113.132 MB.\n====== finagle-http (web) [default], iteration 1 completed (8116.033 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 178.106 ms, heap usage 136.948 MB -> 114.650 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17103.189 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.344 ms, heap usage 741.206 MB -> 115.480 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (14147.131 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.334 ms, heap usage 252.049 MB -> 124.730 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12379.379 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 210.154 ms, heap usage 288.328 MB -> 156.731 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3222.253 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 172.536 ms, heap usage 373.139 MB -> 139.158 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 591\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 591\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 22\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 20\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 10\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 55.25 op/s (55.25 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3048.058 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 149.722 ms, heap usage 511.583 MB -> 139.480 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 520\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 591\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 22\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 20\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 144.40 op/s (144.40 op/s including failed)\nElapsed time: 0.55 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2214.539 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 195.368 ms, heap usage 291.245 MB -> 150.245 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (49678.519 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 320.299 ms, heap usage 467.789 MB -> 426.418 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (27745.144 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 262.065 ms, heap usage 468.198 MB -> 172.056 MB.\n====== als (apache-spark) [default], iteration 0 completed (20665.131 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 390.442 ms, heap usage 622.403 MB -> 196.712 MB.\n====== als (apache-spark) [default], iteration 1 completed (10289.689 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 234.576 ms, heap usage 417.316 MB -> 184.845 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5797.672 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 235.370 ms, heap usage 305.620 MB -> 183.219 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5145.702 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 293.564 ms, heap usage 357.800 MB -> 205.455 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (480.463 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 263.575 ms, heap usage 266.955 MB -> 205.487 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (442.009 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 261.872 ms, heap usage 327.987 MB -> 184.488 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1328.429 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 215.858 ms, heap usage 510.988 MB -> 184.411 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (441.507 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 237.129 ms, heap usage 401.411 MB -> 196.277 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (10904.423 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 324.831 ms, heap usage 327.020 MB -> 275.560 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2996.167 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 328.103 ms, heap usage 840.939 MB -> 215.723 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (38425.939 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 259.617 ms, heap usage 488.730 MB -> 222.274 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (29681.031 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 268.428 ms, heap usage 244.234 MB -> 218.331 MB.\n====== mnemonics (functional) [default], iteration 0 completed (5198.869 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 252.369 ms, heap usage 538.831 MB -> 218.247 MB.\n====== mnemonics (functional) [default], iteration 1 completed (5098.379 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 316.091 ms, heap usage 355.747 MB -> 220.861 MB.\n====== dotty (scala) [default], iteration 0 completed (18229.147 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 394.716 ms, heap usage 429.358 MB -> 237.579 MB.\n====== dotty (scala) [default], iteration 1 completed (7011.984 ms) ======\n"
    },
    "finagle-chirper": {
        "times": [
            15265.961,
            9790.614
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 164.550 ms, heap usage 90.329 MB -> 75.969 MB.\n====== scrabble (functional) [default], iteration 0 completed (3320.664 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 259.410 ms, heap usage 300.760 MB -> 76.048 MB.\n====== scrabble (functional) [default], iteration 1 completed (2103.873 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 121.013 ms, heap usage 627.500 MB -> 29.583 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40267.905 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 245.738 ms, heap usage 350.135 MB -> 149.085 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14597.977 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 63.800 ms, heap usage 339.748 MB -> 33.589 MB.\n====== future-genetic (functional) [default], iteration 0 completed (18314.015 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 107.126 ms, heap usage 177.243 MB -> 34.388 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13739.354 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 65.638 ms, heap usage 200.665 MB -> 35.217 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (24761.088 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 465.163 ms, heap usage 520.574 MB -> 156.604 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17621.286 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 165.485 ms, heap usage 142.562 MB -> 84.627 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27239.598 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.081 ms, heap usage 416.826 MB -> 96.911 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (17521.750 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 96.285 ms, heap usage 247.594 MB -> 57.209 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3762.770 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 133.493 ms, heap usage 106.209 MB -> 57.349 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2715.598 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.072 ms, heap usage 339.845 MB -> 62.565 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5193.561 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 236.851 ms, heap usage 238.148 MB -> 208.751 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1677.523 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 238.587 ms, heap usage 377.767 MB -> 150.725 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11500.227 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 185.442 ms, heap usage 279.045 MB -> 145.364 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (11406.304 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 140.227 ms, heap usage 177.120 MB -> 95.503 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (629.794 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 173.257 ms, heap usage 248.503 MB -> 96.136 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (400.662 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 151.544 ms, heap usage 149.490 MB -> 98.412 MB.\n====== db-shootout (database) [default], iteration 0 completed (10662.339 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 154.496 ms, heap usage 180.297 MB -> 153.530 MB.\n====== db-shootout (database) [default], iteration 1 completed (10336.827 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35641 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 145.662 ms, heap usage 758.636 MB -> 110.207 MB.\n====== finagle-http (web) [default], iteration 0 completed (19358.728 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 159.837 ms, heap usage 285.325 MB -> 113.132 MB.\n====== finagle-http (web) [default], iteration 1 completed (8116.033 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 178.106 ms, heap usage 136.948 MB -> 114.650 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17103.189 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.344 ms, heap usage 741.206 MB -> 115.480 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (14147.131 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.334 ms, heap usage 252.049 MB -> 124.730 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12379.379 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 210.154 ms, heap usage 288.328 MB -> 156.731 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3222.253 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 172.536 ms, heap usage 373.139 MB -> 139.158 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 591\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 43\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 591\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 22\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 20\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 10\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 55.25 op/s (55.25 op/s including failed)\nElapsed time: 0.72 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (3048.058 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 149.722 ms, heap usage 511.583 MB -> 139.480 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 520\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 591\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 22\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 20\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 144.40 op/s (144.40 op/s including failed)\nElapsed time: 0.55 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2214.539 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 195.368 ms, heap usage 291.245 MB -> 150.245 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (49678.519 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 320.299 ms, heap usage 467.789 MB -> 426.418 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (27745.144 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 262.065 ms, heap usage 468.198 MB -> 172.056 MB.\n====== als (apache-spark) [default], iteration 0 completed (20665.131 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 390.442 ms, heap usage 622.403 MB -> 196.712 MB.\n====== als (apache-spark) [default], iteration 1 completed (10289.689 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 234.576 ms, heap usage 417.316 MB -> 184.845 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5797.672 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 235.370 ms, heap usage 305.620 MB -> 183.219 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5145.702 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 293.564 ms, heap usage 357.800 MB -> 205.455 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (480.463 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 263.575 ms, heap usage 266.955 MB -> 205.487 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (442.009 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 261.872 ms, heap usage 327.987 MB -> 184.488 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1328.429 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 215.858 ms, heap usage 510.988 MB -> 184.411 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (441.507 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 237.129 ms, heap usage 401.411 MB -> 196.277 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (10904.423 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 324.831 ms, heap usage 327.020 MB -> 275.560 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2996.167 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 328.103 ms, heap usage 840.939 MB -> 215.723 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (38425.939 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 259.617 ms, heap usage 488.730 MB -> 222.274 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (29681.031 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 268.428 ms, heap usage 244.234 MB -> 218.331 MB.\n====== mnemonics (functional) [default], iteration 0 completed (5198.869 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 252.369 ms, heap usage 538.831 MB -> 218.247 MB.\n====== mnemonics (functional) [default], iteration 1 completed (5098.379 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 316.091 ms, heap usage 355.747 MB -> 220.861 MB.\n====== dotty (scala) [default], iteration 0 completed (18229.147 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 394.716 ms, heap usage 429.358 MB -> 237.579 MB.\n====== dotty (scala) [default], iteration 1 completed (7011.984 ms) ======\nMaster port: 43463\nCache ports: 37727, 33857\n====== finagle-chirper (web) [default], iteration 0 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 448.751 ms, heap usage 597.559 MB -> 230.585 MB.\n====== finagle-chirper (web) [default], iteration 0 completed (15265.961 ms) ======\n====== finagle-chirper (web) [default], iteration 1 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 410.678 ms, heap usage 291.585 MB -> 231.489 MB.\n====== finagle-chirper (web) [default], iteration 1 completed (9790.614 ms) ======\n"
    },
    "times": [
        363515.868,
        218463.336
    ]
}