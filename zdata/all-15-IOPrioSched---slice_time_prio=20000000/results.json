{
    "scrabble": {
        "times": [
            1256.709,
            610.638,
            532.168,
            521.4,
            580.095,
            530.457,
            500.472,
            509.236,
            504.096,
            476.451,
            485.693,
            604.25,
            470.886,
            493.373,
            452.162
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\n"
    },
    "page-rank": {
        "times": [
            19149.522,
            10606.771,
            10735.718,
            10417.032,
            11053.404,
            10408.846,
            10395.887,
            10573.528,
            10424.467,
            11500.139,
            10534.404,
            10356.524,
            10157.271,
            11356.579,
            10681.23
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n"
    },
    "future-genetic": {
        "times": [
            2931.16,
            2167.41,
            2172.52,
            2132.488,
            2174.33,
            2130.556,
            2124.907,
            2124.124,
            2124.653,
            2131.541,
            2023.909,
            1993.631,
            2028.063,
            1996.41,
            2027.432
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n"
    },
    "akka-uct": {
        "times": [
            17440.893,
            14250.195,
            13569.008,
            12880.854,
            13407.097,
            12613.792,
            13206.299,
            13412.219,
            15705.366,
            13572.252,
            14895.858,
            13147.22,
            14359.429,
            15233.136,
            13662.774
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\n"
    },
    "movie-lens": {
        "times": [
            21462.837,
            16281.709,
            14534.203,
            13754.629,
            15150.312,
            14314.557,
            14349.236,
            13836.241,
            12489.907,
            12299.757,
            12428.118,
            13293.548,
            14552.88,
            13664.642,
            12737.711
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n"
    },
    "scala-doku": {
        "times": [
            5019.675,
            3168.279,
            3119.922,
            2856.356,
            2719.66,
            2790.389,
            3012.073,
            2639.788,
            2867.468,
            2729.114,
            2909.024,
            3088.673,
            2749.353,
            2602.809,
            2505.622
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\n"
    },
    "chi-square": {
        "times": [
            3770.117,
            1428.102,
            974.435,
            866.938,
            924.911,
            873.242,
            854.311,
            917.803,
            851.91,
            910.849,
            786.117,
            829.834,
            724.093,
            861.012,
            819.373
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 66.112 ms, heap usage 219.232 MB -> 63.892 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3770.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 131.923 ms, heap usage 270.271 MB -> 209.915 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1428.102 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.832 ms, heap usage 333.076 MB -> 209.987 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (974.435 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 135.288 ms, heap usage 420.309 MB -> 210.037 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.938 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 130.097 ms, heap usage 369.311 MB -> 210.085 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (924.911 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.548 ms, heap usage 303.927 MB -> 210.133 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (873.242 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.416 ms, heap usage 251.362 MB -> 210.180 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (854.311 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 124.763 ms, heap usage 278.475 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (917.803 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.433 ms, heap usage 444.121 MB -> 210.278 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (851.910 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 176.366 ms, heap usage 307.933 MB -> 210.326 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (910.849 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 125.593 ms, heap usage 217.555 MB -> 210.350 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.254 ms, heap usage 347.053 MB -> 210.451 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (829.834 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.518 ms, heap usage 443.548 MB -> 210.488 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (724.093 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 115.243 ms, heap usage 451.575 MB -> 210.526 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (861.012 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 118.164 ms, heap usage 350.072 MB -> 210.557 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (819.373 ms) ======\n"
    },
    "fj-kmeans": {
        "times": [
            5528.186,
            5389.745,
            5437.396,
            5360.958,
            5816.636,
            6508.546,
            6503.038,
            6483.786,
            5966.197,
            5483.775,
            5507.539,
            5327.19,
            5557.026,
            5562.068,
            6050.139
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 66.112 ms, heap usage 219.232 MB -> 63.892 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3770.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 131.923 ms, heap usage 270.271 MB -> 209.915 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1428.102 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.832 ms, heap usage 333.076 MB -> 209.987 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (974.435 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 135.288 ms, heap usage 420.309 MB -> 210.037 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.938 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 130.097 ms, heap usage 369.311 MB -> 210.085 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (924.911 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.548 ms, heap usage 303.927 MB -> 210.133 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (873.242 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.416 ms, heap usage 251.362 MB -> 210.180 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (854.311 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 124.763 ms, heap usage 278.475 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (917.803 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.433 ms, heap usage 444.121 MB -> 210.278 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (851.910 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 176.366 ms, heap usage 307.933 MB -> 210.326 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (910.849 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 125.593 ms, heap usage 217.555 MB -> 210.350 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.254 ms, heap usage 347.053 MB -> 210.451 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (829.834 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.518 ms, heap usage 443.548 MB -> 210.488 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (724.093 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 115.243 ms, heap usage 451.575 MB -> 210.526 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (861.012 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 118.164 ms, heap usage 350.072 MB -> 210.557 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (819.373 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 113.838 ms, heap usage 338.041 MB -> 147.047 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5528.186 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 137.408 ms, heap usage 278.418 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5389.745 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 114.700 ms, heap usage 200.458 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5437.396 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 139.571 ms, heap usage 475.410 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5360.958 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 132.303 ms, heap usage 263.798 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5816.636 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 109.987 ms, heap usage 370.392 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6508.546 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 151.519 ms, heap usage 454.843 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (6503.038 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 161.985 ms, heap usage 225.150 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (6483.786 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 155.104 ms, heap usage 211.658 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5966.197 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 114.941 ms, heap usage 491.451 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5483.775 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 111.799 ms, heap usage 348.157 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5507.539 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 108.341 ms, heap usage 370.245 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5327.190 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 113.063 ms, heap usage 388.257 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5557.026 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 110.199 ms, heap usage 417.705 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5562.068 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 126.001 ms, heap usage 351.790 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6050.139 ms) ======\n"
    },
    "rx-scrabble": {
        "times": [
            849.676,
            293.931,
            226.956,
            191.729,
            218.258,
            144.15,
            210.382,
            186.636,
            151.402,
            141.084,
            154.671,
            160.571,
            144.086,
            164.946,
            156.703
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 66.112 ms, heap usage 219.232 MB -> 63.892 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3770.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 131.923 ms, heap usage 270.271 MB -> 209.915 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1428.102 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.832 ms, heap usage 333.076 MB -> 209.987 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (974.435 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 135.288 ms, heap usage 420.309 MB -> 210.037 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.938 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 130.097 ms, heap usage 369.311 MB -> 210.085 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (924.911 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.548 ms, heap usage 303.927 MB -> 210.133 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (873.242 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.416 ms, heap usage 251.362 MB -> 210.180 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (854.311 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 124.763 ms, heap usage 278.475 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (917.803 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.433 ms, heap usage 444.121 MB -> 210.278 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (851.910 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 176.366 ms, heap usage 307.933 MB -> 210.326 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (910.849 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 125.593 ms, heap usage 217.555 MB -> 210.350 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.254 ms, heap usage 347.053 MB -> 210.451 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (829.834 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.518 ms, heap usage 443.548 MB -> 210.488 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (724.093 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 115.243 ms, heap usage 451.575 MB -> 210.526 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (861.012 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 118.164 ms, heap usage 350.072 MB -> 210.557 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (819.373 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 113.838 ms, heap usage 338.041 MB -> 147.047 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5528.186 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 137.408 ms, heap usage 278.418 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5389.745 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 114.700 ms, heap usage 200.458 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5437.396 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 139.571 ms, heap usage 475.410 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5360.958 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 132.303 ms, heap usage 263.798 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5816.636 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 109.987 ms, heap usage 370.392 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6508.546 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 151.519 ms, heap usage 454.843 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (6503.038 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 161.985 ms, heap usage 225.150 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (6483.786 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 155.104 ms, heap usage 211.658 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5966.197 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 114.941 ms, heap usage 491.451 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5483.775 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 111.799 ms, heap usage 348.157 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5507.539 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 108.341 ms, heap usage 370.245 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5327.190 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 113.063 ms, heap usage 388.257 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5557.026 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 110.199 ms, heap usage 417.705 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5562.068 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 126.001 ms, heap usage 351.790 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6050.139 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.904 ms, heap usage 386.999 MB -> 98.211 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (849.676 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 92.825 ms, heap usage 251.209 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (293.931 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 81.249 ms, heap usage 241.124 MB -> 98.578 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (226.956 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 91.506 ms, heap usage 241.078 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (191.729 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 78.792 ms, heap usage 241.079 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (218.258 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 74.230 ms, heap usage 242.048 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (144.150 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.946 ms, heap usage 241.906 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (210.382 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 71.898 ms, heap usage 242.050 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (186.636 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 69.225 ms, heap usage 242.269 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (151.402 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.216 ms, heap usage 242.392 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (141.084 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.568 ms, heap usage 241.853 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (154.671 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 69.023 ms, heap usage 241.879 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (160.571 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 69.450 ms, heap usage 241.961 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (144.086 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.026 ms, heap usage 242.454 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (164.946 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 82.038 ms, heap usage 241.950 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (156.703 ms) ======\n"
    },
    "db-shootout": {
        "times": [
            8279.994,
            6864.949,
            8133.764,
            7257.953,
            8069.649,
            7054.228,
            7215.014,
            7645.298,
            7159.599,
            8102.269,
            8201.659,
            8928.872,
            9484.912,
            9352.132,
            7825.94
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 66.112 ms, heap usage 219.232 MB -> 63.892 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3770.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 131.923 ms, heap usage 270.271 MB -> 209.915 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1428.102 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.832 ms, heap usage 333.076 MB -> 209.987 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (974.435 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 135.288 ms, heap usage 420.309 MB -> 210.037 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.938 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 130.097 ms, heap usage 369.311 MB -> 210.085 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (924.911 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.548 ms, heap usage 303.927 MB -> 210.133 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (873.242 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.416 ms, heap usage 251.362 MB -> 210.180 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (854.311 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 124.763 ms, heap usage 278.475 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (917.803 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.433 ms, heap usage 444.121 MB -> 210.278 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (851.910 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 176.366 ms, heap usage 307.933 MB -> 210.326 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (910.849 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 125.593 ms, heap usage 217.555 MB -> 210.350 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.254 ms, heap usage 347.053 MB -> 210.451 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (829.834 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.518 ms, heap usage 443.548 MB -> 210.488 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (724.093 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 115.243 ms, heap usage 451.575 MB -> 210.526 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (861.012 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 118.164 ms, heap usage 350.072 MB -> 210.557 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (819.373 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 113.838 ms, heap usage 338.041 MB -> 147.047 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5528.186 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 137.408 ms, heap usage 278.418 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5389.745 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 114.700 ms, heap usage 200.458 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5437.396 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 139.571 ms, heap usage 475.410 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5360.958 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 132.303 ms, heap usage 263.798 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5816.636 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 109.987 ms, heap usage 370.392 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6508.546 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 151.519 ms, heap usage 454.843 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (6503.038 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 161.985 ms, heap usage 225.150 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (6483.786 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 155.104 ms, heap usage 211.658 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5966.197 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 114.941 ms, heap usage 491.451 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5483.775 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 111.799 ms, heap usage 348.157 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5507.539 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 108.341 ms, heap usage 370.245 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5327.190 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 113.063 ms, heap usage 388.257 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5557.026 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 110.199 ms, heap usage 417.705 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5562.068 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 126.001 ms, heap usage 351.790 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6050.139 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.904 ms, heap usage 386.999 MB -> 98.211 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (849.676 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 92.825 ms, heap usage 251.209 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (293.931 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 81.249 ms, heap usage 241.124 MB -> 98.578 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (226.956 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 91.506 ms, heap usage 241.078 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (191.729 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 78.792 ms, heap usage 241.079 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (218.258 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 74.230 ms, heap usage 242.048 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (144.150 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.946 ms, heap usage 241.906 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (210.382 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 71.898 ms, heap usage 242.050 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (186.636 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 69.225 ms, heap usage 242.269 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (151.402 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.216 ms, heap usage 242.392 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (141.084 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.568 ms, heap usage 241.853 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (154.671 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 69.023 ms, heap usage 241.879 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (160.571 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 69.450 ms, heap usage 241.961 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (144.086 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.026 ms, heap usage 242.454 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (164.946 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 82.038 ms, heap usage 241.950 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (156.703 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 165.245 ms, heap usage 123.756 MB -> 100.768 MB.\n====== db-shootout (database) [default], iteration 0 completed (8279.994 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.136 ms, heap usage 156.590 MB -> 107.747 MB.\n====== db-shootout (database) [default], iteration 1 completed (6864.949 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 75.858 ms, heap usage 407.555 MB -> 110.498 MB.\n====== db-shootout (database) [default], iteration 2 completed (8133.764 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 104.697 ms, heap usage 482.135 MB -> 111.678 MB.\n====== db-shootout (database) [default], iteration 3 completed (7257.953 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 83.316 ms, heap usage 481.700 MB -> 109.188 MB.\n====== db-shootout (database) [default], iteration 4 completed (8069.649 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.265 ms, heap usage 294.603 MB -> 109.495 MB.\n====== db-shootout (database) [default], iteration 5 completed (7054.228 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 68.851 ms, heap usage 202.466 MB -> 108.491 MB.\n====== db-shootout (database) [default], iteration 6 completed (7215.014 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 70.301 ms, heap usage 185.356 MB -> 112.420 MB.\n====== db-shootout (database) [default], iteration 7 completed (7645.298 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 96.708 ms, heap usage 408.179 MB -> 112.395 MB.\n====== db-shootout (database) [default], iteration 8 completed (7159.599 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 72.654 ms, heap usage 260.488 MB -> 111.217 MB.\n====== db-shootout (database) [default], iteration 9 completed (8102.269 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 93.215 ms, heap usage 247.067 MB -> 111.793 MB.\n====== db-shootout (database) [default], iteration 10 completed (8201.659 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 88.084 ms, heap usage 196.019 MB -> 108.876 MB.\n====== db-shootout (database) [default], iteration 11 completed (8928.872 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 89.395 ms, heap usage 148.929 MB -> 108.561 MB.\n====== db-shootout (database) [default], iteration 12 completed (9484.912 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 76.072 ms, heap usage 175.761 MB -> 108.269 MB.\n====== db-shootout (database) [default], iteration 13 completed (9352.132 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 82.217 ms, heap usage 204.503 MB -> 108.293 MB.\n====== db-shootout (database) [default], iteration 14 completed (7825.940 ms) ======\n"
    },
    "finagle-http": {
        "times": [
            20069.884,
            16009.48,
            13975.211,
            11999.34,
            8709.573,
            7600.006,
            7535.088,
            6782.047,
            6265.913,
            4642.991,
            4145.819,
            3694.216,
            3721.92,
            3767.458,
            3686.511
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 66.112 ms, heap usage 219.232 MB -> 63.892 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3770.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 131.923 ms, heap usage 270.271 MB -> 209.915 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1428.102 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.832 ms, heap usage 333.076 MB -> 209.987 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (974.435 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 135.288 ms, heap usage 420.309 MB -> 210.037 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.938 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 130.097 ms, heap usage 369.311 MB -> 210.085 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (924.911 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.548 ms, heap usage 303.927 MB -> 210.133 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (873.242 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.416 ms, heap usage 251.362 MB -> 210.180 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (854.311 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 124.763 ms, heap usage 278.475 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (917.803 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.433 ms, heap usage 444.121 MB -> 210.278 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (851.910 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 176.366 ms, heap usage 307.933 MB -> 210.326 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (910.849 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 125.593 ms, heap usage 217.555 MB -> 210.350 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.254 ms, heap usage 347.053 MB -> 210.451 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (829.834 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.518 ms, heap usage 443.548 MB -> 210.488 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (724.093 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 115.243 ms, heap usage 451.575 MB -> 210.526 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (861.012 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 118.164 ms, heap usage 350.072 MB -> 210.557 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (819.373 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 113.838 ms, heap usage 338.041 MB -> 147.047 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5528.186 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 137.408 ms, heap usage 278.418 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5389.745 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 114.700 ms, heap usage 200.458 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5437.396 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 139.571 ms, heap usage 475.410 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5360.958 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 132.303 ms, heap usage 263.798 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5816.636 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 109.987 ms, heap usage 370.392 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6508.546 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 151.519 ms, heap usage 454.843 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (6503.038 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 161.985 ms, heap usage 225.150 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (6483.786 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 155.104 ms, heap usage 211.658 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5966.197 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 114.941 ms, heap usage 491.451 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5483.775 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 111.799 ms, heap usage 348.157 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5507.539 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 108.341 ms, heap usage 370.245 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5327.190 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 113.063 ms, heap usage 388.257 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5557.026 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 110.199 ms, heap usage 417.705 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5562.068 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 126.001 ms, heap usage 351.790 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6050.139 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.904 ms, heap usage 386.999 MB -> 98.211 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (849.676 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 92.825 ms, heap usage 251.209 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (293.931 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 81.249 ms, heap usage 241.124 MB -> 98.578 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (226.956 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 91.506 ms, heap usage 241.078 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (191.729 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 78.792 ms, heap usage 241.079 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (218.258 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 74.230 ms, heap usage 242.048 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (144.150 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.946 ms, heap usage 241.906 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (210.382 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 71.898 ms, heap usage 242.050 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (186.636 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 69.225 ms, heap usage 242.269 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (151.402 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.216 ms, heap usage 242.392 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (141.084 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.568 ms, heap usage 241.853 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (154.671 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 69.023 ms, heap usage 241.879 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (160.571 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 69.450 ms, heap usage 241.961 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (144.086 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.026 ms, heap usage 242.454 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (164.946 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 82.038 ms, heap usage 241.950 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (156.703 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 165.245 ms, heap usage 123.756 MB -> 100.768 MB.\n====== db-shootout (database) [default], iteration 0 completed (8279.994 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.136 ms, heap usage 156.590 MB -> 107.747 MB.\n====== db-shootout (database) [default], iteration 1 completed (6864.949 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 75.858 ms, heap usage 407.555 MB -> 110.498 MB.\n====== db-shootout (database) [default], iteration 2 completed (8133.764 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 104.697 ms, heap usage 482.135 MB -> 111.678 MB.\n====== db-shootout (database) [default], iteration 3 completed (7257.953 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 83.316 ms, heap usage 481.700 MB -> 109.188 MB.\n====== db-shootout (database) [default], iteration 4 completed (8069.649 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.265 ms, heap usage 294.603 MB -> 109.495 MB.\n====== db-shootout (database) [default], iteration 5 completed (7054.228 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 68.851 ms, heap usage 202.466 MB -> 108.491 MB.\n====== db-shootout (database) [default], iteration 6 completed (7215.014 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 70.301 ms, heap usage 185.356 MB -> 112.420 MB.\n====== db-shootout (database) [default], iteration 7 completed (7645.298 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 96.708 ms, heap usage 408.179 MB -> 112.395 MB.\n====== db-shootout (database) [default], iteration 8 completed (7159.599 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 72.654 ms, heap usage 260.488 MB -> 111.217 MB.\n====== db-shootout (database) [default], iteration 9 completed (8102.269 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 93.215 ms, heap usage 247.067 MB -> 111.793 MB.\n====== db-shootout (database) [default], iteration 10 completed (8201.659 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 88.084 ms, heap usage 196.019 MB -> 108.876 MB.\n====== db-shootout (database) [default], iteration 11 completed (8928.872 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 89.395 ms, heap usage 148.929 MB -> 108.561 MB.\n====== db-shootout (database) [default], iteration 12 completed (9484.912 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 76.072 ms, heap usage 175.761 MB -> 108.269 MB.\n====== db-shootout (database) [default], iteration 13 completed (9352.132 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 82.217 ms, heap usage 204.503 MB -> 108.293 MB.\n====== db-shootout (database) [default], iteration 14 completed (7825.940 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35547 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 104.455 ms, heap usage 320.432 MB -> 112.082 MB.\n====== finagle-http (web) [default], iteration 0 completed (20069.884 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 121.654 ms, heap usage 326.481 MB -> 115.826 MB.\n====== finagle-http (web) [default], iteration 1 completed (16009.480 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 90.148 ms, heap usage 243.494 MB -> 115.849 MB.\n====== finagle-http (web) [default], iteration 2 completed (13975.211 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 107.935 ms, heap usage 232.462 MB -> 115.898 MB.\n====== finagle-http (web) [default], iteration 3 completed (11999.340 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 112.360 ms, heap usage 219.221 MB -> 115.906 MB.\n====== finagle-http (web) [default], iteration 4 completed (8709.573 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 80.389 ms, heap usage 209.710 MB -> 115.897 MB.\n====== finagle-http (web) [default], iteration 5 completed (7600.006 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 90.046 ms, heap usage 204.281 MB -> 117.849 MB.\n====== finagle-http (web) [default], iteration 6 completed (7535.088 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 127.775 ms, heap usage 194.577 MB -> 115.979 MB.\n====== finagle-http (web) [default], iteration 7 completed (6782.047 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 90.278 ms, heap usage 187.280 MB -> 115.910 MB.\n====== finagle-http (web) [default], iteration 8 completed (6265.913 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 70.116 ms, heap usage 178.110 MB -> 115.973 MB.\n====== finagle-http (web) [default], iteration 9 completed (4642.991 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 80.779 ms, heap usage 323.567 MB -> 115.970 MB.\n====== finagle-http (web) [default], iteration 10 completed (4145.819 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 86.020 ms, heap usage 307.268 MB -> 116.255 MB.\n====== finagle-http (web) [default], iteration 11 completed (3694.216 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 84.455 ms, heap usage 302.078 MB -> 115.982 MB.\n====== finagle-http (web) [default], iteration 12 completed (3721.920 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 75.293 ms, heap usage 297.157 MB -> 115.974 MB.\n====== finagle-http (web) [default], iteration 13 completed (3767.458 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 79.429 ms, heap usage 296.561 MB -> 115.986 MB.\n====== finagle-http (web) [default], iteration 14 completed (3686.511 ms) ======\n"
    },
    "reactors": {
        "times": [
            14567.734,
            11914.09,
            12046.703,
            12159.038,
            11806.913,
            12119.651,
            12011.323,
            12029.477,
            11818.715,
            12661.824,
            12445.619,
            11921.951,
            11610.642,
            11968.551,
            12458.43
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 66.112 ms, heap usage 219.232 MB -> 63.892 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3770.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 131.923 ms, heap usage 270.271 MB -> 209.915 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1428.102 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.832 ms, heap usage 333.076 MB -> 209.987 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (974.435 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 135.288 ms, heap usage 420.309 MB -> 210.037 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.938 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 130.097 ms, heap usage 369.311 MB -> 210.085 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (924.911 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.548 ms, heap usage 303.927 MB -> 210.133 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (873.242 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.416 ms, heap usage 251.362 MB -> 210.180 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (854.311 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 124.763 ms, heap usage 278.475 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (917.803 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.433 ms, heap usage 444.121 MB -> 210.278 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (851.910 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 176.366 ms, heap usage 307.933 MB -> 210.326 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (910.849 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 125.593 ms, heap usage 217.555 MB -> 210.350 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.254 ms, heap usage 347.053 MB -> 210.451 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (829.834 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.518 ms, heap usage 443.548 MB -> 210.488 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (724.093 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 115.243 ms, heap usage 451.575 MB -> 210.526 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (861.012 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 118.164 ms, heap usage 350.072 MB -> 210.557 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (819.373 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 113.838 ms, heap usage 338.041 MB -> 147.047 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5528.186 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 137.408 ms, heap usage 278.418 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5389.745 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 114.700 ms, heap usage 200.458 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5437.396 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 139.571 ms, heap usage 475.410 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5360.958 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 132.303 ms, heap usage 263.798 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5816.636 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 109.987 ms, heap usage 370.392 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6508.546 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 151.519 ms, heap usage 454.843 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (6503.038 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 161.985 ms, heap usage 225.150 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (6483.786 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 155.104 ms, heap usage 211.658 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5966.197 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 114.941 ms, heap usage 491.451 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5483.775 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 111.799 ms, heap usage 348.157 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5507.539 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 108.341 ms, heap usage 370.245 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5327.190 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 113.063 ms, heap usage 388.257 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5557.026 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 110.199 ms, heap usage 417.705 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5562.068 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 126.001 ms, heap usage 351.790 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6050.139 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.904 ms, heap usage 386.999 MB -> 98.211 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (849.676 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 92.825 ms, heap usage 251.209 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (293.931 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 81.249 ms, heap usage 241.124 MB -> 98.578 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (226.956 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 91.506 ms, heap usage 241.078 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (191.729 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 78.792 ms, heap usage 241.079 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (218.258 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 74.230 ms, heap usage 242.048 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (144.150 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.946 ms, heap usage 241.906 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (210.382 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 71.898 ms, heap usage 242.050 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (186.636 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 69.225 ms, heap usage 242.269 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (151.402 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.216 ms, heap usage 242.392 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (141.084 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.568 ms, heap usage 241.853 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (154.671 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 69.023 ms, heap usage 241.879 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (160.571 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 69.450 ms, heap usage 241.961 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (144.086 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.026 ms, heap usage 242.454 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (164.946 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 82.038 ms, heap usage 241.950 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (156.703 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 165.245 ms, heap usage 123.756 MB -> 100.768 MB.\n====== db-shootout (database) [default], iteration 0 completed (8279.994 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.136 ms, heap usage 156.590 MB -> 107.747 MB.\n====== db-shootout (database) [default], iteration 1 completed (6864.949 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 75.858 ms, heap usage 407.555 MB -> 110.498 MB.\n====== db-shootout (database) [default], iteration 2 completed (8133.764 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 104.697 ms, heap usage 482.135 MB -> 111.678 MB.\n====== db-shootout (database) [default], iteration 3 completed (7257.953 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 83.316 ms, heap usage 481.700 MB -> 109.188 MB.\n====== db-shootout (database) [default], iteration 4 completed (8069.649 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.265 ms, heap usage 294.603 MB -> 109.495 MB.\n====== db-shootout (database) [default], iteration 5 completed (7054.228 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 68.851 ms, heap usage 202.466 MB -> 108.491 MB.\n====== db-shootout (database) [default], iteration 6 completed (7215.014 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 70.301 ms, heap usage 185.356 MB -> 112.420 MB.\n====== db-shootout (database) [default], iteration 7 completed (7645.298 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 96.708 ms, heap usage 408.179 MB -> 112.395 MB.\n====== db-shootout (database) [default], iteration 8 completed (7159.599 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 72.654 ms, heap usage 260.488 MB -> 111.217 MB.\n====== db-shootout (database) [default], iteration 9 completed (8102.269 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 93.215 ms, heap usage 247.067 MB -> 111.793 MB.\n====== db-shootout (database) [default], iteration 10 completed (8201.659 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 88.084 ms, heap usage 196.019 MB -> 108.876 MB.\n====== db-shootout (database) [default], iteration 11 completed (8928.872 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 89.395 ms, heap usage 148.929 MB -> 108.561 MB.\n====== db-shootout (database) [default], iteration 12 completed (9484.912 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 76.072 ms, heap usage 175.761 MB -> 108.269 MB.\n====== db-shootout (database) [default], iteration 13 completed (9352.132 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 82.217 ms, heap usage 204.503 MB -> 108.293 MB.\n====== db-shootout (database) [default], iteration 14 completed (7825.940 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35547 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 104.455 ms, heap usage 320.432 MB -> 112.082 MB.\n====== finagle-http (web) [default], iteration 0 completed (20069.884 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 121.654 ms, heap usage 326.481 MB -> 115.826 MB.\n====== finagle-http (web) [default], iteration 1 completed (16009.480 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 90.148 ms, heap usage 243.494 MB -> 115.849 MB.\n====== finagle-http (web) [default], iteration 2 completed (13975.211 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 107.935 ms, heap usage 232.462 MB -> 115.898 MB.\n====== finagle-http (web) [default], iteration 3 completed (11999.340 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 112.360 ms, heap usage 219.221 MB -> 115.906 MB.\n====== finagle-http (web) [default], iteration 4 completed (8709.573 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 80.389 ms, heap usage 209.710 MB -> 115.897 MB.\n====== finagle-http (web) [default], iteration 5 completed (7600.006 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 90.046 ms, heap usage 204.281 MB -> 117.849 MB.\n====== finagle-http (web) [default], iteration 6 completed (7535.088 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 127.775 ms, heap usage 194.577 MB -> 115.979 MB.\n====== finagle-http (web) [default], iteration 7 completed (6782.047 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 90.278 ms, heap usage 187.280 MB -> 115.910 MB.\n====== finagle-http (web) [default], iteration 8 completed (6265.913 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 70.116 ms, heap usage 178.110 MB -> 115.973 MB.\n====== finagle-http (web) [default], iteration 9 completed (4642.991 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 80.779 ms, heap usage 323.567 MB -> 115.970 MB.\n====== finagle-http (web) [default], iteration 10 completed (4145.819 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 86.020 ms, heap usage 307.268 MB -> 116.255 MB.\n====== finagle-http (web) [default], iteration 11 completed (3694.216 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 84.455 ms, heap usage 302.078 MB -> 115.982 MB.\n====== finagle-http (web) [default], iteration 12 completed (3721.920 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 75.293 ms, heap usage 297.157 MB -> 115.974 MB.\n====== finagle-http (web) [default], iteration 13 completed (3767.458 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 79.429 ms, heap usage 296.561 MB -> 115.986 MB.\n====== finagle-http (web) [default], iteration 14 completed (3686.511 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.883 ms, heap usage 311.874 MB -> 117.016 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14567.734 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 91.924 ms, heap usage 748.162 MB -> 117.250 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (11914.090 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 92.956 ms, heap usage 617.357 MB -> 113.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12046.703 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 87.006 ms, heap usage 625.175 MB -> 113.546 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12159.038 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.203 ms, heap usage 653.120 MB -> 113.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (11806.913 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 76.041 ms, heap usage 659.988 MB -> 113.544 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12119.651 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 86.933 ms, heap usage 630.908 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12011.323 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 76.199 ms, heap usage 641.149 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12029.477 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 87.864 ms, heap usage 643.745 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11818.715 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 72.649 ms, heap usage 644.929 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12661.824 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 71.217 ms, heap usage 707.143 MB -> 113.559 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12445.619 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 90.163 ms, heap usage 614.914 MB -> 113.567 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11921.951 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 91.365 ms, heap usage 628.943 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11610.642 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 86.133 ms, heap usage 641.617 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11968.551 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 89.380 ms, heap usage 631.059 MB -> 113.569 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12458.430 ms) ======\n"
    },
    "dec-tree": {
        "times": [
            8456.478,
            1975.817,
            1490.638,
            1466.459,
            1370.44,
            1330.634,
            1346.798,
            1440.812,
            1327.374,
            1294.957,
            1323.161,
            1316.463,
            1251.563,
            1258.373,
            1197.805
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 66.112 ms, heap usage 219.232 MB -> 63.892 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3770.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 131.923 ms, heap usage 270.271 MB -> 209.915 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1428.102 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.832 ms, heap usage 333.076 MB -> 209.987 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (974.435 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 135.288 ms, heap usage 420.309 MB -> 210.037 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.938 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 130.097 ms, heap usage 369.311 MB -> 210.085 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (924.911 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.548 ms, heap usage 303.927 MB -> 210.133 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (873.242 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.416 ms, heap usage 251.362 MB -> 210.180 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (854.311 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 124.763 ms, heap usage 278.475 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (917.803 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.433 ms, heap usage 444.121 MB -> 210.278 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (851.910 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 176.366 ms, heap usage 307.933 MB -> 210.326 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (910.849 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 125.593 ms, heap usage 217.555 MB -> 210.350 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.254 ms, heap usage 347.053 MB -> 210.451 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (829.834 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.518 ms, heap usage 443.548 MB -> 210.488 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (724.093 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 115.243 ms, heap usage 451.575 MB -> 210.526 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (861.012 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 118.164 ms, heap usage 350.072 MB -> 210.557 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (819.373 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 113.838 ms, heap usage 338.041 MB -> 147.047 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5528.186 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 137.408 ms, heap usage 278.418 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5389.745 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 114.700 ms, heap usage 200.458 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5437.396 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 139.571 ms, heap usage 475.410 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5360.958 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 132.303 ms, heap usage 263.798 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5816.636 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 109.987 ms, heap usage 370.392 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6508.546 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 151.519 ms, heap usage 454.843 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (6503.038 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 161.985 ms, heap usage 225.150 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (6483.786 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 155.104 ms, heap usage 211.658 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5966.197 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 114.941 ms, heap usage 491.451 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5483.775 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 111.799 ms, heap usage 348.157 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5507.539 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 108.341 ms, heap usage 370.245 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5327.190 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 113.063 ms, heap usage 388.257 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5557.026 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 110.199 ms, heap usage 417.705 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5562.068 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 126.001 ms, heap usage 351.790 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6050.139 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.904 ms, heap usage 386.999 MB -> 98.211 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (849.676 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 92.825 ms, heap usage 251.209 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (293.931 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 81.249 ms, heap usage 241.124 MB -> 98.578 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (226.956 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 91.506 ms, heap usage 241.078 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (191.729 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 78.792 ms, heap usage 241.079 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (218.258 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 74.230 ms, heap usage 242.048 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (144.150 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.946 ms, heap usage 241.906 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (210.382 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 71.898 ms, heap usage 242.050 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (186.636 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 69.225 ms, heap usage 242.269 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (151.402 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.216 ms, heap usage 242.392 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (141.084 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.568 ms, heap usage 241.853 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (154.671 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 69.023 ms, heap usage 241.879 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (160.571 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 69.450 ms, heap usage 241.961 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (144.086 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.026 ms, heap usage 242.454 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (164.946 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 82.038 ms, heap usage 241.950 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (156.703 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 165.245 ms, heap usage 123.756 MB -> 100.768 MB.\n====== db-shootout (database) [default], iteration 0 completed (8279.994 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.136 ms, heap usage 156.590 MB -> 107.747 MB.\n====== db-shootout (database) [default], iteration 1 completed (6864.949 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 75.858 ms, heap usage 407.555 MB -> 110.498 MB.\n====== db-shootout (database) [default], iteration 2 completed (8133.764 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 104.697 ms, heap usage 482.135 MB -> 111.678 MB.\n====== db-shootout (database) [default], iteration 3 completed (7257.953 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 83.316 ms, heap usage 481.700 MB -> 109.188 MB.\n====== db-shootout (database) [default], iteration 4 completed (8069.649 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.265 ms, heap usage 294.603 MB -> 109.495 MB.\n====== db-shootout (database) [default], iteration 5 completed (7054.228 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 68.851 ms, heap usage 202.466 MB -> 108.491 MB.\n====== db-shootout (database) [default], iteration 6 completed (7215.014 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 70.301 ms, heap usage 185.356 MB -> 112.420 MB.\n====== db-shootout (database) [default], iteration 7 completed (7645.298 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 96.708 ms, heap usage 408.179 MB -> 112.395 MB.\n====== db-shootout (database) [default], iteration 8 completed (7159.599 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 72.654 ms, heap usage 260.488 MB -> 111.217 MB.\n====== db-shootout (database) [default], iteration 9 completed (8102.269 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 93.215 ms, heap usage 247.067 MB -> 111.793 MB.\n====== db-shootout (database) [default], iteration 10 completed (8201.659 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 88.084 ms, heap usage 196.019 MB -> 108.876 MB.\n====== db-shootout (database) [default], iteration 11 completed (8928.872 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 89.395 ms, heap usage 148.929 MB -> 108.561 MB.\n====== db-shootout (database) [default], iteration 12 completed (9484.912 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 76.072 ms, heap usage 175.761 MB -> 108.269 MB.\n====== db-shootout (database) [default], iteration 13 completed (9352.132 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 82.217 ms, heap usage 204.503 MB -> 108.293 MB.\n====== db-shootout (database) [default], iteration 14 completed (7825.940 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35547 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 104.455 ms, heap usage 320.432 MB -> 112.082 MB.\n====== finagle-http (web) [default], iteration 0 completed (20069.884 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 121.654 ms, heap usage 326.481 MB -> 115.826 MB.\n====== finagle-http (web) [default], iteration 1 completed (16009.480 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 90.148 ms, heap usage 243.494 MB -> 115.849 MB.\n====== finagle-http (web) [default], iteration 2 completed (13975.211 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 107.935 ms, heap usage 232.462 MB -> 115.898 MB.\n====== finagle-http (web) [default], iteration 3 completed (11999.340 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 112.360 ms, heap usage 219.221 MB -> 115.906 MB.\n====== finagle-http (web) [default], iteration 4 completed (8709.573 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 80.389 ms, heap usage 209.710 MB -> 115.897 MB.\n====== finagle-http (web) [default], iteration 5 completed (7600.006 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 90.046 ms, heap usage 204.281 MB -> 117.849 MB.\n====== finagle-http (web) [default], iteration 6 completed (7535.088 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 127.775 ms, heap usage 194.577 MB -> 115.979 MB.\n====== finagle-http (web) [default], iteration 7 completed (6782.047 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 90.278 ms, heap usage 187.280 MB -> 115.910 MB.\n====== finagle-http (web) [default], iteration 8 completed (6265.913 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 70.116 ms, heap usage 178.110 MB -> 115.973 MB.\n====== finagle-http (web) [default], iteration 9 completed (4642.991 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 80.779 ms, heap usage 323.567 MB -> 115.970 MB.\n====== finagle-http (web) [default], iteration 10 completed (4145.819 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 86.020 ms, heap usage 307.268 MB -> 116.255 MB.\n====== finagle-http (web) [default], iteration 11 completed (3694.216 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 84.455 ms, heap usage 302.078 MB -> 115.982 MB.\n====== finagle-http (web) [default], iteration 12 completed (3721.920 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 75.293 ms, heap usage 297.157 MB -> 115.974 MB.\n====== finagle-http (web) [default], iteration 13 completed (3767.458 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 79.429 ms, heap usage 296.561 MB -> 115.986 MB.\n====== finagle-http (web) [default], iteration 14 completed (3686.511 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.883 ms, heap usage 311.874 MB -> 117.016 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14567.734 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 91.924 ms, heap usage 748.162 MB -> 117.250 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (11914.090 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 92.956 ms, heap usage 617.357 MB -> 113.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12046.703 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 87.006 ms, heap usage 625.175 MB -> 113.546 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12159.038 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.203 ms, heap usage 653.120 MB -> 113.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (11806.913 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 76.041 ms, heap usage 659.988 MB -> 113.544 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12119.651 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 86.933 ms, heap usage 630.908 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12011.323 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 76.199 ms, heap usage 641.149 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12029.477 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 87.864 ms, heap usage 643.745 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11818.715 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 72.649 ms, heap usage 644.929 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12661.824 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 71.217 ms, heap usage 707.143 MB -> 113.559 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12445.619 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 90.163 ms, heap usage 614.914 MB -> 113.567 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11921.951 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 91.365 ms, heap usage 628.943 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11610.642 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 86.133 ms, heap usage 641.617 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11968.551 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 89.380 ms, heap usage 631.059 MB -> 113.569 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12458.430 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.062 ms, heap usage 219.995 MB -> 127.548 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8456.478 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.690 ms, heap usage 264.960 MB -> 160.178 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (1975.817 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 96.778 ms, heap usage 491.689 MB -> 177.170 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1490.638 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.246 ms, heap usage 505.994 MB -> 171.820 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1466.459 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.026 ms, heap usage 450.661 MB -> 161.068 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1370.440 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.097 ms, heap usage 468.970 MB -> 161.284 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1330.634 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.589 ms, heap usage 518.427 MB -> 161.493 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1346.798 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 96.884 ms, heap usage 523.910 MB -> 161.699 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1440.812 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 103.228 ms, heap usage 529.346 MB -> 161.851 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1327.374 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 105.044 ms, heap usage 469.720 MB -> 161.981 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1294.957 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 100.316 ms, heap usage 501.456 MB -> 162.111 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1323.161 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.972 ms, heap usage 449.606 MB -> 162.225 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1316.463 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.494 ms, heap usage 482.770 MB -> 162.347 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1251.563 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.167 ms, heap usage 481.748 MB -> 162.468 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1258.373 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 100.073 ms, heap usage 488.726 MB -> 162.584 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1197.805 ms) ======\n"
    },
    "scala-stm-bench7": {
        "times": [
            2316.659,
            1502.898,
            1269.766,
            1328.547,
            1305.632,
            1242.867,
            1258.665,
            1268.334,
            1237.745,
            1295.896,
            1307.247,
            1325.232,
            1394.19,
            1658.631,
            1491.065
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 66.112 ms, heap usage 219.232 MB -> 63.892 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3770.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 131.923 ms, heap usage 270.271 MB -> 209.915 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1428.102 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.832 ms, heap usage 333.076 MB -> 209.987 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (974.435 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 135.288 ms, heap usage 420.309 MB -> 210.037 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.938 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 130.097 ms, heap usage 369.311 MB -> 210.085 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (924.911 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.548 ms, heap usage 303.927 MB -> 210.133 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (873.242 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.416 ms, heap usage 251.362 MB -> 210.180 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (854.311 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 124.763 ms, heap usage 278.475 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (917.803 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.433 ms, heap usage 444.121 MB -> 210.278 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (851.910 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 176.366 ms, heap usage 307.933 MB -> 210.326 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (910.849 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 125.593 ms, heap usage 217.555 MB -> 210.350 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.254 ms, heap usage 347.053 MB -> 210.451 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (829.834 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.518 ms, heap usage 443.548 MB -> 210.488 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (724.093 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 115.243 ms, heap usage 451.575 MB -> 210.526 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (861.012 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 118.164 ms, heap usage 350.072 MB -> 210.557 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (819.373 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 113.838 ms, heap usage 338.041 MB -> 147.047 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5528.186 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 137.408 ms, heap usage 278.418 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5389.745 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 114.700 ms, heap usage 200.458 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5437.396 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 139.571 ms, heap usage 475.410 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5360.958 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 132.303 ms, heap usage 263.798 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5816.636 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 109.987 ms, heap usage 370.392 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6508.546 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 151.519 ms, heap usage 454.843 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (6503.038 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 161.985 ms, heap usage 225.150 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (6483.786 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 155.104 ms, heap usage 211.658 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5966.197 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 114.941 ms, heap usage 491.451 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5483.775 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 111.799 ms, heap usage 348.157 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5507.539 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 108.341 ms, heap usage 370.245 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5327.190 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 113.063 ms, heap usage 388.257 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5557.026 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 110.199 ms, heap usage 417.705 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5562.068 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 126.001 ms, heap usage 351.790 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6050.139 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.904 ms, heap usage 386.999 MB -> 98.211 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (849.676 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 92.825 ms, heap usage 251.209 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (293.931 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 81.249 ms, heap usage 241.124 MB -> 98.578 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (226.956 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 91.506 ms, heap usage 241.078 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (191.729 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 78.792 ms, heap usage 241.079 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (218.258 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 74.230 ms, heap usage 242.048 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (144.150 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.946 ms, heap usage 241.906 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (210.382 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 71.898 ms, heap usage 242.050 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (186.636 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 69.225 ms, heap usage 242.269 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (151.402 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.216 ms, heap usage 242.392 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (141.084 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.568 ms, heap usage 241.853 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (154.671 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 69.023 ms, heap usage 241.879 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (160.571 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 69.450 ms, heap usage 241.961 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (144.086 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.026 ms, heap usage 242.454 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (164.946 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 82.038 ms, heap usage 241.950 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (156.703 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 165.245 ms, heap usage 123.756 MB -> 100.768 MB.\n====== db-shootout (database) [default], iteration 0 completed (8279.994 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.136 ms, heap usage 156.590 MB -> 107.747 MB.\n====== db-shootout (database) [default], iteration 1 completed (6864.949 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 75.858 ms, heap usage 407.555 MB -> 110.498 MB.\n====== db-shootout (database) [default], iteration 2 completed (8133.764 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 104.697 ms, heap usage 482.135 MB -> 111.678 MB.\n====== db-shootout (database) [default], iteration 3 completed (7257.953 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 83.316 ms, heap usage 481.700 MB -> 109.188 MB.\n====== db-shootout (database) [default], iteration 4 completed (8069.649 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.265 ms, heap usage 294.603 MB -> 109.495 MB.\n====== db-shootout (database) [default], iteration 5 completed (7054.228 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 68.851 ms, heap usage 202.466 MB -> 108.491 MB.\n====== db-shootout (database) [default], iteration 6 completed (7215.014 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 70.301 ms, heap usage 185.356 MB -> 112.420 MB.\n====== db-shootout (database) [default], iteration 7 completed (7645.298 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 96.708 ms, heap usage 408.179 MB -> 112.395 MB.\n====== db-shootout (database) [default], iteration 8 completed (7159.599 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 72.654 ms, heap usage 260.488 MB -> 111.217 MB.\n====== db-shootout (database) [default], iteration 9 completed (8102.269 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 93.215 ms, heap usage 247.067 MB -> 111.793 MB.\n====== db-shootout (database) [default], iteration 10 completed (8201.659 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 88.084 ms, heap usage 196.019 MB -> 108.876 MB.\n====== db-shootout (database) [default], iteration 11 completed (8928.872 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 89.395 ms, heap usage 148.929 MB -> 108.561 MB.\n====== db-shootout (database) [default], iteration 12 completed (9484.912 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 76.072 ms, heap usage 175.761 MB -> 108.269 MB.\n====== db-shootout (database) [default], iteration 13 completed (9352.132 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 82.217 ms, heap usage 204.503 MB -> 108.293 MB.\n====== db-shootout (database) [default], iteration 14 completed (7825.940 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35547 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 104.455 ms, heap usage 320.432 MB -> 112.082 MB.\n====== finagle-http (web) [default], iteration 0 completed (20069.884 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 121.654 ms, heap usage 326.481 MB -> 115.826 MB.\n====== finagle-http (web) [default], iteration 1 completed (16009.480 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 90.148 ms, heap usage 243.494 MB -> 115.849 MB.\n====== finagle-http (web) [default], iteration 2 completed (13975.211 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 107.935 ms, heap usage 232.462 MB -> 115.898 MB.\n====== finagle-http (web) [default], iteration 3 completed (11999.340 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 112.360 ms, heap usage 219.221 MB -> 115.906 MB.\n====== finagle-http (web) [default], iteration 4 completed (8709.573 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 80.389 ms, heap usage 209.710 MB -> 115.897 MB.\n====== finagle-http (web) [default], iteration 5 completed (7600.006 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 90.046 ms, heap usage 204.281 MB -> 117.849 MB.\n====== finagle-http (web) [default], iteration 6 completed (7535.088 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 127.775 ms, heap usage 194.577 MB -> 115.979 MB.\n====== finagle-http (web) [default], iteration 7 completed (6782.047 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 90.278 ms, heap usage 187.280 MB -> 115.910 MB.\n====== finagle-http (web) [default], iteration 8 completed (6265.913 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 70.116 ms, heap usage 178.110 MB -> 115.973 MB.\n====== finagle-http (web) [default], iteration 9 completed (4642.991 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 80.779 ms, heap usage 323.567 MB -> 115.970 MB.\n====== finagle-http (web) [default], iteration 10 completed (4145.819 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 86.020 ms, heap usage 307.268 MB -> 116.255 MB.\n====== finagle-http (web) [default], iteration 11 completed (3694.216 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 84.455 ms, heap usage 302.078 MB -> 115.982 MB.\n====== finagle-http (web) [default], iteration 12 completed (3721.920 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 75.293 ms, heap usage 297.157 MB -> 115.974 MB.\n====== finagle-http (web) [default], iteration 13 completed (3767.458 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 79.429 ms, heap usage 296.561 MB -> 115.986 MB.\n====== finagle-http (web) [default], iteration 14 completed (3686.511 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.883 ms, heap usage 311.874 MB -> 117.016 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14567.734 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 91.924 ms, heap usage 748.162 MB -> 117.250 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (11914.090 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 92.956 ms, heap usage 617.357 MB -> 113.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12046.703 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 87.006 ms, heap usage 625.175 MB -> 113.546 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12159.038 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.203 ms, heap usage 653.120 MB -> 113.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (11806.913 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 76.041 ms, heap usage 659.988 MB -> 113.544 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12119.651 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 86.933 ms, heap usage 630.908 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12011.323 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 76.199 ms, heap usage 641.149 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12029.477 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 87.864 ms, heap usage 643.745 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11818.715 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 72.649 ms, heap usage 644.929 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12661.824 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 71.217 ms, heap usage 707.143 MB -> 113.559 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12445.619 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 90.163 ms, heap usage 614.914 MB -> 113.567 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11921.951 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 91.365 ms, heap usage 628.943 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11610.642 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 86.133 ms, heap usage 641.617 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11968.551 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 89.380 ms, heap usage 631.059 MB -> 113.569 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12458.430 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.062 ms, heap usage 219.995 MB -> 127.548 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8456.478 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.690 ms, heap usage 264.960 MB -> 160.178 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (1975.817 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 96.778 ms, heap usage 491.689 MB -> 177.170 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1490.638 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.246 ms, heap usage 505.994 MB -> 171.820 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1466.459 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.026 ms, heap usage 450.661 MB -> 161.068 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1370.440 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.097 ms, heap usage 468.970 MB -> 161.284 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1330.634 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.589 ms, heap usage 518.427 MB -> 161.493 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1346.798 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 96.884 ms, heap usage 523.910 MB -> 161.699 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1440.812 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 103.228 ms, heap usage 529.346 MB -> 161.851 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1327.374 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 105.044 ms, heap usage 469.720 MB -> 161.981 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1294.957 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 100.316 ms, heap usage 501.456 MB -> 162.111 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1323.161 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.972 ms, heap usage 449.606 MB -> 162.225 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1316.463 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.494 ms, heap usage 482.770 MB -> 162.347 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1251.563 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.167 ms, heap usage 481.748 MB -> 162.468 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1258.373 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 100.073 ms, heap usage 488.726 MB -> 162.584 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1197.805 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 101.937 ms, heap usage 483.495 MB -> 142.934 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 578\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 46\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 578\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 16\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 21\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 118.34 op/s (118.34 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.659 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.171 ms, heap usage 432.717 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 40\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 578\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 21\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 10\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 326.53 op/s (326.53 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1502.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 119.563 ms, heap usage 432.268 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 444\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 578\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 15\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 21\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 10\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 512.82 op/s (512.82 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.766 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 109.500 ms, heap usage 435.750 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 385\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 578\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 17\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 43\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 10\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 806.05 op/s (806.05 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1328.547 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 97.208 ms, heap usage 451.265 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 578\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 17\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 43\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 10\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1023.02 op/s (1023.02 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1305.632 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 96.350 ms, heap usage 514.240 MB -> 143.197 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 578\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 15\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 17\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 43\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 10\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1242.867 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 101.166 ms, heap usage 508.976 MB -> 143.205 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 578\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 17\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 43\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 10\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1497.33 op/s (1497.33 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1258.665 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 99.032 ms, heap usage 512.234 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 364\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 578\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 17\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 43\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 10\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1697.61 op/s (1697.61 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1268.334 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 95.423 ms, heap usage 512.003 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 578\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 17\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 43\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 10\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1978.02 op/s (1978.02 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1237.745 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 103.146 ms, heap usage 509.925 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 578\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 17\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 43\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 11\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2150.54 op/s (2150.54 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.896 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 126.573 ms, heap usage 512.999 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 372\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 578\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 17\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 43\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 16\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2321.90 op/s (2321.90 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1307.247 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 98.357 ms, heap usage 512.777 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 431\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 578\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 15\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 17\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 43\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2181.82 op/s (2181.82 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1325.232 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 109.477 ms, heap usage 505.517 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 487\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 578\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 15\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 17\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 43\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2084.17 op/s (2084.17 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1394.190 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 139.535 ms, heap usage 506.758 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 34\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 578\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 15\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 17\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 43\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2901.55 op/s (2901.55 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1658.631 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 127.460 ms, heap usage 508.477 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 407\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 578\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 15\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 17\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 43\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2803.74 op/s (2803.74 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1491.065 ms) ======\n"
    },
    "naive-bayes": {
        "times": [
            27755.384,
            15259.872,
            15122.779,
            15373.306,
            15608.687,
            14679.61,
            14656.078,
            14951.115,
            14676.438,
            14790.642,
            15524.717,
            14859.821,
            14571.928,
            15308.674,
            15224.508
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 66.112 ms, heap usage 219.232 MB -> 63.892 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3770.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 131.923 ms, heap usage 270.271 MB -> 209.915 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1428.102 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.832 ms, heap usage 333.076 MB -> 209.987 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (974.435 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 135.288 ms, heap usage 420.309 MB -> 210.037 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.938 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 130.097 ms, heap usage 369.311 MB -> 210.085 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (924.911 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.548 ms, heap usage 303.927 MB -> 210.133 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (873.242 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.416 ms, heap usage 251.362 MB -> 210.180 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (854.311 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 124.763 ms, heap usage 278.475 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (917.803 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.433 ms, heap usage 444.121 MB -> 210.278 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (851.910 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 176.366 ms, heap usage 307.933 MB -> 210.326 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (910.849 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 125.593 ms, heap usage 217.555 MB -> 210.350 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.254 ms, heap usage 347.053 MB -> 210.451 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (829.834 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.518 ms, heap usage 443.548 MB -> 210.488 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (724.093 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 115.243 ms, heap usage 451.575 MB -> 210.526 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (861.012 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 118.164 ms, heap usage 350.072 MB -> 210.557 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (819.373 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 113.838 ms, heap usage 338.041 MB -> 147.047 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5528.186 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 137.408 ms, heap usage 278.418 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5389.745 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 114.700 ms, heap usage 200.458 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5437.396 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 139.571 ms, heap usage 475.410 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5360.958 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 132.303 ms, heap usage 263.798 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5816.636 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 109.987 ms, heap usage 370.392 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6508.546 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 151.519 ms, heap usage 454.843 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (6503.038 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 161.985 ms, heap usage 225.150 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (6483.786 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 155.104 ms, heap usage 211.658 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5966.197 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 114.941 ms, heap usage 491.451 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5483.775 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 111.799 ms, heap usage 348.157 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5507.539 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 108.341 ms, heap usage 370.245 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5327.190 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 113.063 ms, heap usage 388.257 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5557.026 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 110.199 ms, heap usage 417.705 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5562.068 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 126.001 ms, heap usage 351.790 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6050.139 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.904 ms, heap usage 386.999 MB -> 98.211 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (849.676 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 92.825 ms, heap usage 251.209 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (293.931 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 81.249 ms, heap usage 241.124 MB -> 98.578 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (226.956 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 91.506 ms, heap usage 241.078 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (191.729 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 78.792 ms, heap usage 241.079 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (218.258 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 74.230 ms, heap usage 242.048 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (144.150 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.946 ms, heap usage 241.906 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (210.382 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 71.898 ms, heap usage 242.050 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (186.636 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 69.225 ms, heap usage 242.269 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (151.402 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.216 ms, heap usage 242.392 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (141.084 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.568 ms, heap usage 241.853 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (154.671 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 69.023 ms, heap usage 241.879 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (160.571 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 69.450 ms, heap usage 241.961 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (144.086 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.026 ms, heap usage 242.454 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (164.946 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 82.038 ms, heap usage 241.950 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (156.703 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 165.245 ms, heap usage 123.756 MB -> 100.768 MB.\n====== db-shootout (database) [default], iteration 0 completed (8279.994 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.136 ms, heap usage 156.590 MB -> 107.747 MB.\n====== db-shootout (database) [default], iteration 1 completed (6864.949 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 75.858 ms, heap usage 407.555 MB -> 110.498 MB.\n====== db-shootout (database) [default], iteration 2 completed (8133.764 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 104.697 ms, heap usage 482.135 MB -> 111.678 MB.\n====== db-shootout (database) [default], iteration 3 completed (7257.953 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 83.316 ms, heap usage 481.700 MB -> 109.188 MB.\n====== db-shootout (database) [default], iteration 4 completed (8069.649 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.265 ms, heap usage 294.603 MB -> 109.495 MB.\n====== db-shootout (database) [default], iteration 5 completed (7054.228 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 68.851 ms, heap usage 202.466 MB -> 108.491 MB.\n====== db-shootout (database) [default], iteration 6 completed (7215.014 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 70.301 ms, heap usage 185.356 MB -> 112.420 MB.\n====== db-shootout (database) [default], iteration 7 completed (7645.298 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 96.708 ms, heap usage 408.179 MB -> 112.395 MB.\n====== db-shootout (database) [default], iteration 8 completed (7159.599 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 72.654 ms, heap usage 260.488 MB -> 111.217 MB.\n====== db-shootout (database) [default], iteration 9 completed (8102.269 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 93.215 ms, heap usage 247.067 MB -> 111.793 MB.\n====== db-shootout (database) [default], iteration 10 completed (8201.659 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 88.084 ms, heap usage 196.019 MB -> 108.876 MB.\n====== db-shootout (database) [default], iteration 11 completed (8928.872 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 89.395 ms, heap usage 148.929 MB -> 108.561 MB.\n====== db-shootout (database) [default], iteration 12 completed (9484.912 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 76.072 ms, heap usage 175.761 MB -> 108.269 MB.\n====== db-shootout (database) [default], iteration 13 completed (9352.132 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 82.217 ms, heap usage 204.503 MB -> 108.293 MB.\n====== db-shootout (database) [default], iteration 14 completed (7825.940 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35547 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 104.455 ms, heap usage 320.432 MB -> 112.082 MB.\n====== finagle-http (web) [default], iteration 0 completed (20069.884 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 121.654 ms, heap usage 326.481 MB -> 115.826 MB.\n====== finagle-http (web) [default], iteration 1 completed (16009.480 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 90.148 ms, heap usage 243.494 MB -> 115.849 MB.\n====== finagle-http (web) [default], iteration 2 completed (13975.211 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 107.935 ms, heap usage 232.462 MB -> 115.898 MB.\n====== finagle-http (web) [default], iteration 3 completed (11999.340 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 112.360 ms, heap usage 219.221 MB -> 115.906 MB.\n====== finagle-http (web) [default], iteration 4 completed (8709.573 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 80.389 ms, heap usage 209.710 MB -> 115.897 MB.\n====== finagle-http (web) [default], iteration 5 completed (7600.006 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 90.046 ms, heap usage 204.281 MB -> 117.849 MB.\n====== finagle-http (web) [default], iteration 6 completed (7535.088 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 127.775 ms, heap usage 194.577 MB -> 115.979 MB.\n====== finagle-http (web) [default], iteration 7 completed (6782.047 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 90.278 ms, heap usage 187.280 MB -> 115.910 MB.\n====== finagle-http (web) [default], iteration 8 completed (6265.913 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 70.116 ms, heap usage 178.110 MB -> 115.973 MB.\n====== finagle-http (web) [default], iteration 9 completed (4642.991 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 80.779 ms, heap usage 323.567 MB -> 115.970 MB.\n====== finagle-http (web) [default], iteration 10 completed (4145.819 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 86.020 ms, heap usage 307.268 MB -> 116.255 MB.\n====== finagle-http (web) [default], iteration 11 completed (3694.216 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 84.455 ms, heap usage 302.078 MB -> 115.982 MB.\n====== finagle-http (web) [default], iteration 12 completed (3721.920 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 75.293 ms, heap usage 297.157 MB -> 115.974 MB.\n====== finagle-http (web) [default], iteration 13 completed (3767.458 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 79.429 ms, heap usage 296.561 MB -> 115.986 MB.\n====== finagle-http (web) [default], iteration 14 completed (3686.511 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.883 ms, heap usage 311.874 MB -> 117.016 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14567.734 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 91.924 ms, heap usage 748.162 MB -> 117.250 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (11914.090 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 92.956 ms, heap usage 617.357 MB -> 113.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12046.703 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 87.006 ms, heap usage 625.175 MB -> 113.546 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12159.038 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.203 ms, heap usage 653.120 MB -> 113.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (11806.913 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 76.041 ms, heap usage 659.988 MB -> 113.544 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12119.651 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 86.933 ms, heap usage 630.908 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12011.323 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 76.199 ms, heap usage 641.149 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12029.477 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 87.864 ms, heap usage 643.745 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11818.715 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 72.649 ms, heap usage 644.929 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12661.824 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 71.217 ms, heap usage 707.143 MB -> 113.559 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12445.619 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 90.163 ms, heap usage 614.914 MB -> 113.567 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11921.951 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 91.365 ms, heap usage 628.943 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11610.642 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 86.133 ms, heap usage 641.617 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11968.551 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 89.380 ms, heap usage 631.059 MB -> 113.569 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12458.430 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.062 ms, heap usage 219.995 MB -> 127.548 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8456.478 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.690 ms, heap usage 264.960 MB -> 160.178 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (1975.817 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 96.778 ms, heap usage 491.689 MB -> 177.170 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1490.638 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.246 ms, heap usage 505.994 MB -> 171.820 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1466.459 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.026 ms, heap usage 450.661 MB -> 161.068 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1370.440 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.097 ms, heap usage 468.970 MB -> 161.284 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1330.634 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.589 ms, heap usage 518.427 MB -> 161.493 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1346.798 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 96.884 ms, heap usage 523.910 MB -> 161.699 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1440.812 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 103.228 ms, heap usage 529.346 MB -> 161.851 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1327.374 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 105.044 ms, heap usage 469.720 MB -> 161.981 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1294.957 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 100.316 ms, heap usage 501.456 MB -> 162.111 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1323.161 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.972 ms, heap usage 449.606 MB -> 162.225 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1316.463 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.494 ms, heap usage 482.770 MB -> 162.347 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1251.563 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.167 ms, heap usage 481.748 MB -> 162.468 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1258.373 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 100.073 ms, heap usage 488.726 MB -> 162.584 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1197.805 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 101.937 ms, heap usage 483.495 MB -> 142.934 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 578\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 46\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 578\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 16\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 21\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 118.34 op/s (118.34 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.659 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.171 ms, heap usage 432.717 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 40\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 578\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 21\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 10\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 326.53 op/s (326.53 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1502.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 119.563 ms, heap usage 432.268 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 444\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 578\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 15\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 21\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 10\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 512.82 op/s (512.82 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.766 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 109.500 ms, heap usage 435.750 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 385\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 578\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 17\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 43\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 10\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 806.05 op/s (806.05 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1328.547 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 97.208 ms, heap usage 451.265 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 578\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 17\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 43\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 10\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1023.02 op/s (1023.02 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1305.632 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 96.350 ms, heap usage 514.240 MB -> 143.197 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 578\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 15\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 17\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 43\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 10\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1242.867 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 101.166 ms, heap usage 508.976 MB -> 143.205 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 578\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 17\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 43\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 10\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1497.33 op/s (1497.33 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1258.665 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 99.032 ms, heap usage 512.234 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 364\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 578\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 17\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 43\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 10\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1697.61 op/s (1697.61 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1268.334 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 95.423 ms, heap usage 512.003 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 578\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 17\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 43\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 10\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1978.02 op/s (1978.02 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1237.745 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 103.146 ms, heap usage 509.925 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 578\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 17\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 43\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 11\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2150.54 op/s (2150.54 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.896 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 126.573 ms, heap usage 512.999 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 372\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 578\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 17\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 43\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 16\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2321.90 op/s (2321.90 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1307.247 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 98.357 ms, heap usage 512.777 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 431\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 578\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 15\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 17\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 43\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2181.82 op/s (2181.82 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1325.232 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 109.477 ms, heap usage 505.517 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 487\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 578\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 15\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 17\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 43\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2084.17 op/s (2084.17 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1394.190 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 139.535 ms, heap usage 506.758 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 34\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 578\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 15\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 17\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 43\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2901.55 op/s (2901.55 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1658.631 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 127.460 ms, heap usage 508.477 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 407\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 578\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 15\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 17\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 43\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2803.74 op/s (2803.74 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1491.065 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.885 ms, heap usage 453.988 MB -> 154.499 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27755.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.554 ms, heap usage 547.458 MB -> 430.313 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15259.872 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 125.316 ms, heap usage 449.474 MB -> 430.526 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15122.779 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 141.624 ms, heap usage 708.754 MB -> 430.655 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15373.306 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 128.350 ms, heap usage 441.660 MB -> 430.713 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15608.687 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 139.383 ms, heap usage 449.578 MB -> 430.640 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14679.610 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.195 ms, heap usage 582.706 MB -> 427.603 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14656.078 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.738 ms, heap usage 748.016 MB -> 427.676 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14951.115 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 144.137 ms, heap usage 748.028 MB -> 427.027 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14676.438 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 119.460 ms, heap usage 445.210 MB -> 425.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14790.642 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.441 ms, heap usage 811.379 MB -> 422.557 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15524.717 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 112.350 ms, heap usage 743.074 MB -> 422.735 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14859.821 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.323 ms, heap usage 524.729 MB -> 422.794 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14571.928 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 121.464 ms, heap usage 743.304 MB -> 422.918 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15308.674 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 101.113 ms, heap usage 640.318 MB -> 423.450 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15224.508 ms) ======\n"
    },
    "als": {
        "times": [
            16795.053,
            8469.242,
            7810.714,
            7716.502,
            8456.56,
            7488.587,
            7384.134,
            7359.408,
            7508.314,
            7454.432,
            7211.595,
            7347.154,
            7182.671,
            7139.441,
            7258.492
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 66.112 ms, heap usage 219.232 MB -> 63.892 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3770.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 131.923 ms, heap usage 270.271 MB -> 209.915 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1428.102 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.832 ms, heap usage 333.076 MB -> 209.987 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (974.435 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 135.288 ms, heap usage 420.309 MB -> 210.037 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.938 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 130.097 ms, heap usage 369.311 MB -> 210.085 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (924.911 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.548 ms, heap usage 303.927 MB -> 210.133 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (873.242 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.416 ms, heap usage 251.362 MB -> 210.180 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (854.311 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 124.763 ms, heap usage 278.475 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (917.803 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.433 ms, heap usage 444.121 MB -> 210.278 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (851.910 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 176.366 ms, heap usage 307.933 MB -> 210.326 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (910.849 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 125.593 ms, heap usage 217.555 MB -> 210.350 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.254 ms, heap usage 347.053 MB -> 210.451 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (829.834 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.518 ms, heap usage 443.548 MB -> 210.488 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (724.093 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 115.243 ms, heap usage 451.575 MB -> 210.526 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (861.012 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 118.164 ms, heap usage 350.072 MB -> 210.557 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (819.373 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 113.838 ms, heap usage 338.041 MB -> 147.047 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5528.186 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 137.408 ms, heap usage 278.418 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5389.745 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 114.700 ms, heap usage 200.458 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5437.396 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 139.571 ms, heap usage 475.410 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5360.958 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 132.303 ms, heap usage 263.798 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5816.636 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 109.987 ms, heap usage 370.392 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6508.546 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 151.519 ms, heap usage 454.843 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (6503.038 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 161.985 ms, heap usage 225.150 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (6483.786 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 155.104 ms, heap usage 211.658 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5966.197 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 114.941 ms, heap usage 491.451 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5483.775 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 111.799 ms, heap usage 348.157 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5507.539 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 108.341 ms, heap usage 370.245 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5327.190 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 113.063 ms, heap usage 388.257 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5557.026 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 110.199 ms, heap usage 417.705 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5562.068 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 126.001 ms, heap usage 351.790 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6050.139 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.904 ms, heap usage 386.999 MB -> 98.211 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (849.676 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 92.825 ms, heap usage 251.209 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (293.931 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 81.249 ms, heap usage 241.124 MB -> 98.578 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (226.956 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 91.506 ms, heap usage 241.078 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (191.729 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 78.792 ms, heap usage 241.079 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (218.258 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 74.230 ms, heap usage 242.048 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (144.150 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.946 ms, heap usage 241.906 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (210.382 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 71.898 ms, heap usage 242.050 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (186.636 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 69.225 ms, heap usage 242.269 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (151.402 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.216 ms, heap usage 242.392 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (141.084 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.568 ms, heap usage 241.853 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (154.671 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 69.023 ms, heap usage 241.879 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (160.571 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 69.450 ms, heap usage 241.961 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (144.086 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.026 ms, heap usage 242.454 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (164.946 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 82.038 ms, heap usage 241.950 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (156.703 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 165.245 ms, heap usage 123.756 MB -> 100.768 MB.\n====== db-shootout (database) [default], iteration 0 completed (8279.994 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.136 ms, heap usage 156.590 MB -> 107.747 MB.\n====== db-shootout (database) [default], iteration 1 completed (6864.949 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 75.858 ms, heap usage 407.555 MB -> 110.498 MB.\n====== db-shootout (database) [default], iteration 2 completed (8133.764 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 104.697 ms, heap usage 482.135 MB -> 111.678 MB.\n====== db-shootout (database) [default], iteration 3 completed (7257.953 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 83.316 ms, heap usage 481.700 MB -> 109.188 MB.\n====== db-shootout (database) [default], iteration 4 completed (8069.649 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.265 ms, heap usage 294.603 MB -> 109.495 MB.\n====== db-shootout (database) [default], iteration 5 completed (7054.228 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 68.851 ms, heap usage 202.466 MB -> 108.491 MB.\n====== db-shootout (database) [default], iteration 6 completed (7215.014 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 70.301 ms, heap usage 185.356 MB -> 112.420 MB.\n====== db-shootout (database) [default], iteration 7 completed (7645.298 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 96.708 ms, heap usage 408.179 MB -> 112.395 MB.\n====== db-shootout (database) [default], iteration 8 completed (7159.599 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 72.654 ms, heap usage 260.488 MB -> 111.217 MB.\n====== db-shootout (database) [default], iteration 9 completed (8102.269 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 93.215 ms, heap usage 247.067 MB -> 111.793 MB.\n====== db-shootout (database) [default], iteration 10 completed (8201.659 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 88.084 ms, heap usage 196.019 MB -> 108.876 MB.\n====== db-shootout (database) [default], iteration 11 completed (8928.872 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 89.395 ms, heap usage 148.929 MB -> 108.561 MB.\n====== db-shootout (database) [default], iteration 12 completed (9484.912 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 76.072 ms, heap usage 175.761 MB -> 108.269 MB.\n====== db-shootout (database) [default], iteration 13 completed (9352.132 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 82.217 ms, heap usage 204.503 MB -> 108.293 MB.\n====== db-shootout (database) [default], iteration 14 completed (7825.940 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35547 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 104.455 ms, heap usage 320.432 MB -> 112.082 MB.\n====== finagle-http (web) [default], iteration 0 completed (20069.884 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 121.654 ms, heap usage 326.481 MB -> 115.826 MB.\n====== finagle-http (web) [default], iteration 1 completed (16009.480 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 90.148 ms, heap usage 243.494 MB -> 115.849 MB.\n====== finagle-http (web) [default], iteration 2 completed (13975.211 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 107.935 ms, heap usage 232.462 MB -> 115.898 MB.\n====== finagle-http (web) [default], iteration 3 completed (11999.340 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 112.360 ms, heap usage 219.221 MB -> 115.906 MB.\n====== finagle-http (web) [default], iteration 4 completed (8709.573 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 80.389 ms, heap usage 209.710 MB -> 115.897 MB.\n====== finagle-http (web) [default], iteration 5 completed (7600.006 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 90.046 ms, heap usage 204.281 MB -> 117.849 MB.\n====== finagle-http (web) [default], iteration 6 completed (7535.088 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 127.775 ms, heap usage 194.577 MB -> 115.979 MB.\n====== finagle-http (web) [default], iteration 7 completed (6782.047 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 90.278 ms, heap usage 187.280 MB -> 115.910 MB.\n====== finagle-http (web) [default], iteration 8 completed (6265.913 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 70.116 ms, heap usage 178.110 MB -> 115.973 MB.\n====== finagle-http (web) [default], iteration 9 completed (4642.991 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 80.779 ms, heap usage 323.567 MB -> 115.970 MB.\n====== finagle-http (web) [default], iteration 10 completed (4145.819 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 86.020 ms, heap usage 307.268 MB -> 116.255 MB.\n====== finagle-http (web) [default], iteration 11 completed (3694.216 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 84.455 ms, heap usage 302.078 MB -> 115.982 MB.\n====== finagle-http (web) [default], iteration 12 completed (3721.920 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 75.293 ms, heap usage 297.157 MB -> 115.974 MB.\n====== finagle-http (web) [default], iteration 13 completed (3767.458 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 79.429 ms, heap usage 296.561 MB -> 115.986 MB.\n====== finagle-http (web) [default], iteration 14 completed (3686.511 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.883 ms, heap usage 311.874 MB -> 117.016 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14567.734 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 91.924 ms, heap usage 748.162 MB -> 117.250 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (11914.090 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 92.956 ms, heap usage 617.357 MB -> 113.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12046.703 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 87.006 ms, heap usage 625.175 MB -> 113.546 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12159.038 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.203 ms, heap usage 653.120 MB -> 113.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (11806.913 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 76.041 ms, heap usage 659.988 MB -> 113.544 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12119.651 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 86.933 ms, heap usage 630.908 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12011.323 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 76.199 ms, heap usage 641.149 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12029.477 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 87.864 ms, heap usage 643.745 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11818.715 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 72.649 ms, heap usage 644.929 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12661.824 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 71.217 ms, heap usage 707.143 MB -> 113.559 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12445.619 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 90.163 ms, heap usage 614.914 MB -> 113.567 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11921.951 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 91.365 ms, heap usage 628.943 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11610.642 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 86.133 ms, heap usage 641.617 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11968.551 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 89.380 ms, heap usage 631.059 MB -> 113.569 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12458.430 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.062 ms, heap usage 219.995 MB -> 127.548 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8456.478 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.690 ms, heap usage 264.960 MB -> 160.178 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (1975.817 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 96.778 ms, heap usage 491.689 MB -> 177.170 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1490.638 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.246 ms, heap usage 505.994 MB -> 171.820 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1466.459 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.026 ms, heap usage 450.661 MB -> 161.068 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1370.440 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.097 ms, heap usage 468.970 MB -> 161.284 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1330.634 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.589 ms, heap usage 518.427 MB -> 161.493 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1346.798 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 96.884 ms, heap usage 523.910 MB -> 161.699 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1440.812 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 103.228 ms, heap usage 529.346 MB -> 161.851 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1327.374 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 105.044 ms, heap usage 469.720 MB -> 161.981 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1294.957 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 100.316 ms, heap usage 501.456 MB -> 162.111 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1323.161 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.972 ms, heap usage 449.606 MB -> 162.225 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1316.463 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.494 ms, heap usage 482.770 MB -> 162.347 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1251.563 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.167 ms, heap usage 481.748 MB -> 162.468 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1258.373 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 100.073 ms, heap usage 488.726 MB -> 162.584 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1197.805 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 101.937 ms, heap usage 483.495 MB -> 142.934 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 578\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 46\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 578\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 16\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 21\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 118.34 op/s (118.34 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.659 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.171 ms, heap usage 432.717 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 40\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 578\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 21\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 10\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 326.53 op/s (326.53 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1502.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 119.563 ms, heap usage 432.268 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 444\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 578\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 15\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 21\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 10\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 512.82 op/s (512.82 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.766 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 109.500 ms, heap usage 435.750 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 385\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 578\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 17\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 43\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 10\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 806.05 op/s (806.05 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1328.547 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 97.208 ms, heap usage 451.265 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 578\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 17\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 43\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 10\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1023.02 op/s (1023.02 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1305.632 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 96.350 ms, heap usage 514.240 MB -> 143.197 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 578\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 15\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 17\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 43\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 10\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1242.867 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 101.166 ms, heap usage 508.976 MB -> 143.205 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 578\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 17\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 43\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 10\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1497.33 op/s (1497.33 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1258.665 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 99.032 ms, heap usage 512.234 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 364\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 578\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 17\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 43\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 10\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1697.61 op/s (1697.61 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1268.334 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 95.423 ms, heap usage 512.003 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 578\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 17\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 43\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 10\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1978.02 op/s (1978.02 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1237.745 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 103.146 ms, heap usage 509.925 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 578\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 17\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 43\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 11\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2150.54 op/s (2150.54 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.896 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 126.573 ms, heap usage 512.999 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 372\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 578\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 17\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 43\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 16\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2321.90 op/s (2321.90 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1307.247 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 98.357 ms, heap usage 512.777 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 431\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 578\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 15\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 17\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 43\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2181.82 op/s (2181.82 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1325.232 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 109.477 ms, heap usage 505.517 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 487\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 578\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 15\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 17\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 43\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2084.17 op/s (2084.17 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1394.190 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 139.535 ms, heap usage 506.758 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 34\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 578\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 15\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 17\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 43\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2901.55 op/s (2901.55 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1658.631 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 127.460 ms, heap usage 508.477 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 407\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 578\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 15\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 17\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 43\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2803.74 op/s (2803.74 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1491.065 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.885 ms, heap usage 453.988 MB -> 154.499 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27755.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.554 ms, heap usage 547.458 MB -> 430.313 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15259.872 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 125.316 ms, heap usage 449.474 MB -> 430.526 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15122.779 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 141.624 ms, heap usage 708.754 MB -> 430.655 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15373.306 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 128.350 ms, heap usage 441.660 MB -> 430.713 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15608.687 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 139.383 ms, heap usage 449.578 MB -> 430.640 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14679.610 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.195 ms, heap usage 582.706 MB -> 427.603 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14656.078 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.738 ms, heap usage 748.016 MB -> 427.676 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14951.115 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 144.137 ms, heap usage 748.028 MB -> 427.027 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14676.438 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 119.460 ms, heap usage 445.210 MB -> 425.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14790.642 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.441 ms, heap usage 811.379 MB -> 422.557 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15524.717 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 112.350 ms, heap usage 743.074 MB -> 422.735 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14859.821 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.323 ms, heap usage 524.729 MB -> 422.794 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14571.928 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 121.464 ms, heap usage 743.304 MB -> 422.918 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15308.674 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 101.113 ms, heap usage 640.318 MB -> 423.450 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15224.508 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 115.256 ms, heap usage 367.239 MB -> 168.967 MB.\n====== als (apache-spark) [default], iteration 0 completed (16795.053 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.030 ms, heap usage 313.600 MB -> 193.526 MB.\n====== als (apache-spark) [default], iteration 1 completed (8469.242 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 160.654 ms, heap usage 567.578 MB -> 195.087 MB.\n====== als (apache-spark) [default], iteration 2 completed (7810.714 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 139.767 ms, heap usage 587.341 MB -> 195.721 MB.\n====== als (apache-spark) [default], iteration 3 completed (7716.502 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 148.107 ms, heap usage 575.934 MB -> 196.268 MB.\n====== als (apache-spark) [default], iteration 4 completed (8456.560 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 138.590 ms, heap usage 562.663 MB -> 196.773 MB.\n====== als (apache-spark) [default], iteration 5 completed (7488.587 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 171.344 ms, heap usage 597.601 MB -> 197.349 MB.\n====== als (apache-spark) [default], iteration 6 completed (7384.134 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 135.616 ms, heap usage 488.658 MB -> 197.755 MB.\n====== als (apache-spark) [default], iteration 7 completed (7359.408 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 152.746 ms, heap usage 489.183 MB -> 198.457 MB.\n====== als (apache-spark) [default], iteration 8 completed (7508.314 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.470 ms, heap usage 655.695 MB -> 199.178 MB.\n====== als (apache-spark) [default], iteration 9 completed (7454.432 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 145.375 ms, heap usage 711.895 MB -> 199.372 MB.\n====== als (apache-spark) [default], iteration 10 completed (7211.595 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 138.795 ms, heap usage 475.128 MB -> 199.477 MB.\n====== als (apache-spark) [default], iteration 11 completed (7347.154 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 147.556 ms, heap usage 660.950 MB -> 199.919 MB.\n====== als (apache-spark) [default], iteration 12 completed (7182.671 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 140.073 ms, heap usage 599.239 MB -> 200.165 MB.\n====== als (apache-spark) [default], iteration 13 completed (7139.441 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 149.022 ms, heap usage 616.610 MB -> 200.192 MB.\n====== als (apache-spark) [default], iteration 14 completed (7258.492 ms) ======\n"
    },
    "par-mnemonics": {
        "times": [
            4066.358,
            4148.655,
            3999.06,
            5593.874,
            4518.935,
            5035.73,
            4791.802,
            3792.22,
            3637.75,
            3495.283,
            4460.536,
            5249.319,
            6649.413,
            4989.394,
            4723.376
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 66.112 ms, heap usage 219.232 MB -> 63.892 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3770.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 131.923 ms, heap usage 270.271 MB -> 209.915 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1428.102 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.832 ms, heap usage 333.076 MB -> 209.987 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (974.435 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 135.288 ms, heap usage 420.309 MB -> 210.037 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.938 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 130.097 ms, heap usage 369.311 MB -> 210.085 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (924.911 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.548 ms, heap usage 303.927 MB -> 210.133 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (873.242 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.416 ms, heap usage 251.362 MB -> 210.180 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (854.311 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 124.763 ms, heap usage 278.475 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (917.803 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.433 ms, heap usage 444.121 MB -> 210.278 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (851.910 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 176.366 ms, heap usage 307.933 MB -> 210.326 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (910.849 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 125.593 ms, heap usage 217.555 MB -> 210.350 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.254 ms, heap usage 347.053 MB -> 210.451 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (829.834 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.518 ms, heap usage 443.548 MB -> 210.488 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (724.093 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 115.243 ms, heap usage 451.575 MB -> 210.526 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (861.012 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 118.164 ms, heap usage 350.072 MB -> 210.557 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (819.373 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 113.838 ms, heap usage 338.041 MB -> 147.047 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5528.186 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 137.408 ms, heap usage 278.418 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5389.745 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 114.700 ms, heap usage 200.458 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5437.396 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 139.571 ms, heap usage 475.410 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5360.958 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 132.303 ms, heap usage 263.798 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5816.636 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 109.987 ms, heap usage 370.392 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6508.546 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 151.519 ms, heap usage 454.843 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (6503.038 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 161.985 ms, heap usage 225.150 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (6483.786 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 155.104 ms, heap usage 211.658 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5966.197 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 114.941 ms, heap usage 491.451 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5483.775 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 111.799 ms, heap usage 348.157 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5507.539 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 108.341 ms, heap usage 370.245 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5327.190 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 113.063 ms, heap usage 388.257 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5557.026 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 110.199 ms, heap usage 417.705 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5562.068 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 126.001 ms, heap usage 351.790 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6050.139 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.904 ms, heap usage 386.999 MB -> 98.211 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (849.676 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 92.825 ms, heap usage 251.209 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (293.931 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 81.249 ms, heap usage 241.124 MB -> 98.578 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (226.956 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 91.506 ms, heap usage 241.078 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (191.729 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 78.792 ms, heap usage 241.079 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (218.258 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 74.230 ms, heap usage 242.048 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (144.150 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.946 ms, heap usage 241.906 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (210.382 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 71.898 ms, heap usage 242.050 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (186.636 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 69.225 ms, heap usage 242.269 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (151.402 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.216 ms, heap usage 242.392 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (141.084 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.568 ms, heap usage 241.853 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (154.671 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 69.023 ms, heap usage 241.879 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (160.571 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 69.450 ms, heap usage 241.961 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (144.086 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.026 ms, heap usage 242.454 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (164.946 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 82.038 ms, heap usage 241.950 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (156.703 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 165.245 ms, heap usage 123.756 MB -> 100.768 MB.\n====== db-shootout (database) [default], iteration 0 completed (8279.994 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.136 ms, heap usage 156.590 MB -> 107.747 MB.\n====== db-shootout (database) [default], iteration 1 completed (6864.949 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 75.858 ms, heap usage 407.555 MB -> 110.498 MB.\n====== db-shootout (database) [default], iteration 2 completed (8133.764 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 104.697 ms, heap usage 482.135 MB -> 111.678 MB.\n====== db-shootout (database) [default], iteration 3 completed (7257.953 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 83.316 ms, heap usage 481.700 MB -> 109.188 MB.\n====== db-shootout (database) [default], iteration 4 completed (8069.649 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.265 ms, heap usage 294.603 MB -> 109.495 MB.\n====== db-shootout (database) [default], iteration 5 completed (7054.228 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 68.851 ms, heap usage 202.466 MB -> 108.491 MB.\n====== db-shootout (database) [default], iteration 6 completed (7215.014 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 70.301 ms, heap usage 185.356 MB -> 112.420 MB.\n====== db-shootout (database) [default], iteration 7 completed (7645.298 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 96.708 ms, heap usage 408.179 MB -> 112.395 MB.\n====== db-shootout (database) [default], iteration 8 completed (7159.599 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 72.654 ms, heap usage 260.488 MB -> 111.217 MB.\n====== db-shootout (database) [default], iteration 9 completed (8102.269 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 93.215 ms, heap usage 247.067 MB -> 111.793 MB.\n====== db-shootout (database) [default], iteration 10 completed (8201.659 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 88.084 ms, heap usage 196.019 MB -> 108.876 MB.\n====== db-shootout (database) [default], iteration 11 completed (8928.872 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 89.395 ms, heap usage 148.929 MB -> 108.561 MB.\n====== db-shootout (database) [default], iteration 12 completed (9484.912 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 76.072 ms, heap usage 175.761 MB -> 108.269 MB.\n====== db-shootout (database) [default], iteration 13 completed (9352.132 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 82.217 ms, heap usage 204.503 MB -> 108.293 MB.\n====== db-shootout (database) [default], iteration 14 completed (7825.940 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35547 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 104.455 ms, heap usage 320.432 MB -> 112.082 MB.\n====== finagle-http (web) [default], iteration 0 completed (20069.884 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 121.654 ms, heap usage 326.481 MB -> 115.826 MB.\n====== finagle-http (web) [default], iteration 1 completed (16009.480 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 90.148 ms, heap usage 243.494 MB -> 115.849 MB.\n====== finagle-http (web) [default], iteration 2 completed (13975.211 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 107.935 ms, heap usage 232.462 MB -> 115.898 MB.\n====== finagle-http (web) [default], iteration 3 completed (11999.340 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 112.360 ms, heap usage 219.221 MB -> 115.906 MB.\n====== finagle-http (web) [default], iteration 4 completed (8709.573 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 80.389 ms, heap usage 209.710 MB -> 115.897 MB.\n====== finagle-http (web) [default], iteration 5 completed (7600.006 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 90.046 ms, heap usage 204.281 MB -> 117.849 MB.\n====== finagle-http (web) [default], iteration 6 completed (7535.088 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 127.775 ms, heap usage 194.577 MB -> 115.979 MB.\n====== finagle-http (web) [default], iteration 7 completed (6782.047 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 90.278 ms, heap usage 187.280 MB -> 115.910 MB.\n====== finagle-http (web) [default], iteration 8 completed (6265.913 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 70.116 ms, heap usage 178.110 MB -> 115.973 MB.\n====== finagle-http (web) [default], iteration 9 completed (4642.991 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 80.779 ms, heap usage 323.567 MB -> 115.970 MB.\n====== finagle-http (web) [default], iteration 10 completed (4145.819 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 86.020 ms, heap usage 307.268 MB -> 116.255 MB.\n====== finagle-http (web) [default], iteration 11 completed (3694.216 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 84.455 ms, heap usage 302.078 MB -> 115.982 MB.\n====== finagle-http (web) [default], iteration 12 completed (3721.920 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 75.293 ms, heap usage 297.157 MB -> 115.974 MB.\n====== finagle-http (web) [default], iteration 13 completed (3767.458 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 79.429 ms, heap usage 296.561 MB -> 115.986 MB.\n====== finagle-http (web) [default], iteration 14 completed (3686.511 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.883 ms, heap usage 311.874 MB -> 117.016 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14567.734 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 91.924 ms, heap usage 748.162 MB -> 117.250 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (11914.090 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 92.956 ms, heap usage 617.357 MB -> 113.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12046.703 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 87.006 ms, heap usage 625.175 MB -> 113.546 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12159.038 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.203 ms, heap usage 653.120 MB -> 113.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (11806.913 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 76.041 ms, heap usage 659.988 MB -> 113.544 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12119.651 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 86.933 ms, heap usage 630.908 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12011.323 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 76.199 ms, heap usage 641.149 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12029.477 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 87.864 ms, heap usage 643.745 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11818.715 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 72.649 ms, heap usage 644.929 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12661.824 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 71.217 ms, heap usage 707.143 MB -> 113.559 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12445.619 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 90.163 ms, heap usage 614.914 MB -> 113.567 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11921.951 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 91.365 ms, heap usage 628.943 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11610.642 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 86.133 ms, heap usage 641.617 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11968.551 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 89.380 ms, heap usage 631.059 MB -> 113.569 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12458.430 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.062 ms, heap usage 219.995 MB -> 127.548 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8456.478 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.690 ms, heap usage 264.960 MB -> 160.178 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (1975.817 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 96.778 ms, heap usage 491.689 MB -> 177.170 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1490.638 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.246 ms, heap usage 505.994 MB -> 171.820 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1466.459 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.026 ms, heap usage 450.661 MB -> 161.068 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1370.440 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.097 ms, heap usage 468.970 MB -> 161.284 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1330.634 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.589 ms, heap usage 518.427 MB -> 161.493 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1346.798 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 96.884 ms, heap usage 523.910 MB -> 161.699 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1440.812 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 103.228 ms, heap usage 529.346 MB -> 161.851 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1327.374 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 105.044 ms, heap usage 469.720 MB -> 161.981 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1294.957 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 100.316 ms, heap usage 501.456 MB -> 162.111 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1323.161 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.972 ms, heap usage 449.606 MB -> 162.225 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1316.463 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.494 ms, heap usage 482.770 MB -> 162.347 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1251.563 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.167 ms, heap usage 481.748 MB -> 162.468 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1258.373 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 100.073 ms, heap usage 488.726 MB -> 162.584 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1197.805 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 101.937 ms, heap usage 483.495 MB -> 142.934 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 578\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 46\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 578\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 16\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 21\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 118.34 op/s (118.34 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.659 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.171 ms, heap usage 432.717 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 40\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 578\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 21\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 10\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 326.53 op/s (326.53 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1502.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 119.563 ms, heap usage 432.268 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 444\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 578\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 15\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 21\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 10\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 512.82 op/s (512.82 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.766 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 109.500 ms, heap usage 435.750 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 385\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 578\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 17\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 43\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 10\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 806.05 op/s (806.05 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1328.547 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 97.208 ms, heap usage 451.265 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 578\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 17\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 43\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 10\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1023.02 op/s (1023.02 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1305.632 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 96.350 ms, heap usage 514.240 MB -> 143.197 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 578\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 15\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 17\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 43\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 10\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1242.867 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 101.166 ms, heap usage 508.976 MB -> 143.205 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 578\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 17\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 43\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 10\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1497.33 op/s (1497.33 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1258.665 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 99.032 ms, heap usage 512.234 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 364\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 578\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 17\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 43\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 10\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1697.61 op/s (1697.61 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1268.334 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 95.423 ms, heap usage 512.003 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 578\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 17\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 43\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 10\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1978.02 op/s (1978.02 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1237.745 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 103.146 ms, heap usage 509.925 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 578\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 17\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 43\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 11\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2150.54 op/s (2150.54 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.896 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 126.573 ms, heap usage 512.999 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 372\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 578\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 17\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 43\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 16\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2321.90 op/s (2321.90 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1307.247 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 98.357 ms, heap usage 512.777 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 431\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 578\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 15\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 17\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 43\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2181.82 op/s (2181.82 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1325.232 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 109.477 ms, heap usage 505.517 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 487\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 578\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 15\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 17\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 43\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2084.17 op/s (2084.17 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1394.190 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 139.535 ms, heap usage 506.758 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 34\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 578\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 15\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 17\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 43\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2901.55 op/s (2901.55 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1658.631 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 127.460 ms, heap usage 508.477 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 407\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 578\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 15\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 17\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 43\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2803.74 op/s (2803.74 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1491.065 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.885 ms, heap usage 453.988 MB -> 154.499 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27755.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.554 ms, heap usage 547.458 MB -> 430.313 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15259.872 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 125.316 ms, heap usage 449.474 MB -> 430.526 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15122.779 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 141.624 ms, heap usage 708.754 MB -> 430.655 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15373.306 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 128.350 ms, heap usage 441.660 MB -> 430.713 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15608.687 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 139.383 ms, heap usage 449.578 MB -> 430.640 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14679.610 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.195 ms, heap usage 582.706 MB -> 427.603 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14656.078 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.738 ms, heap usage 748.016 MB -> 427.676 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14951.115 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 144.137 ms, heap usage 748.028 MB -> 427.027 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14676.438 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 119.460 ms, heap usage 445.210 MB -> 425.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14790.642 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.441 ms, heap usage 811.379 MB -> 422.557 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15524.717 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 112.350 ms, heap usage 743.074 MB -> 422.735 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14859.821 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.323 ms, heap usage 524.729 MB -> 422.794 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14571.928 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 121.464 ms, heap usage 743.304 MB -> 422.918 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15308.674 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 101.113 ms, heap usage 640.318 MB -> 423.450 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15224.508 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 115.256 ms, heap usage 367.239 MB -> 168.967 MB.\n====== als (apache-spark) [default], iteration 0 completed (16795.053 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.030 ms, heap usage 313.600 MB -> 193.526 MB.\n====== als (apache-spark) [default], iteration 1 completed (8469.242 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 160.654 ms, heap usage 567.578 MB -> 195.087 MB.\n====== als (apache-spark) [default], iteration 2 completed (7810.714 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 139.767 ms, heap usage 587.341 MB -> 195.721 MB.\n====== als (apache-spark) [default], iteration 3 completed (7716.502 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 148.107 ms, heap usage 575.934 MB -> 196.268 MB.\n====== als (apache-spark) [default], iteration 4 completed (8456.560 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 138.590 ms, heap usage 562.663 MB -> 196.773 MB.\n====== als (apache-spark) [default], iteration 5 completed (7488.587 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 171.344 ms, heap usage 597.601 MB -> 197.349 MB.\n====== als (apache-spark) [default], iteration 6 completed (7384.134 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 135.616 ms, heap usage 488.658 MB -> 197.755 MB.\n====== als (apache-spark) [default], iteration 7 completed (7359.408 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 152.746 ms, heap usage 489.183 MB -> 198.457 MB.\n====== als (apache-spark) [default], iteration 8 completed (7508.314 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.470 ms, heap usage 655.695 MB -> 199.178 MB.\n====== als (apache-spark) [default], iteration 9 completed (7454.432 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 145.375 ms, heap usage 711.895 MB -> 199.372 MB.\n====== als (apache-spark) [default], iteration 10 completed (7211.595 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 138.795 ms, heap usage 475.128 MB -> 199.477 MB.\n====== als (apache-spark) [default], iteration 11 completed (7347.154 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 147.556 ms, heap usage 660.950 MB -> 199.919 MB.\n====== als (apache-spark) [default], iteration 12 completed (7182.671 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 140.073 ms, heap usage 599.239 MB -> 200.165 MB.\n====== als (apache-spark) [default], iteration 13 completed (7139.441 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 149.022 ms, heap usage 616.610 MB -> 200.192 MB.\n====== als (apache-spark) [default], iteration 14 completed (7258.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 136.682 ms, heap usage 688.044 MB -> 180.638 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4066.358 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.610 ms, heap usage 316.927 MB -> 180.452 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4148.655 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 136.795 ms, heap usage 315.954 MB -> 180.450 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (3999.060 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 159.271 ms, heap usage 385.700 MB -> 180.450 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (5593.874 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 148.535 ms, heap usage 310.950 MB -> 180.448 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4518.935 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 129.875 ms, heap usage 317.387 MB -> 180.447 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (5035.730 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 217.570 ms, heap usage 333.574 MB -> 180.442 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (4791.802 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 120.895 ms, heap usage 333.967 MB -> 180.445 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3792.220 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 122.742 ms, heap usage 351.572 MB -> 180.445 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3637.750 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 124.435 ms, heap usage 349.070 MB -> 180.443 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3495.283 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.278 ms, heap usage 323.566 MB -> 180.441 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4460.536 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 152.037 ms, heap usage 311.938 MB -> 180.444 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (5249.319 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 187.858 ms, heap usage 392.440 MB -> 180.439 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (6649.413 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 180.105 ms, heap usage 309.003 MB -> 180.437 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (4989.394 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 135.383 ms, heap usage 310.937 MB -> 180.439 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (4723.376 ms) ======\n"
    },
    "scala-kmeans": {
        "times": [
            490.324,
            234.447,
            238.741,
            220.271,
            213.975,
            192.883,
            210.763,
            202.398,
            248.195,
            231.78,
            209.958,
            216.474,
            216.346,
            208.956,
            288.06
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 66.112 ms, heap usage 219.232 MB -> 63.892 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3770.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 131.923 ms, heap usage 270.271 MB -> 209.915 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1428.102 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.832 ms, heap usage 333.076 MB -> 209.987 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (974.435 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 135.288 ms, heap usage 420.309 MB -> 210.037 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.938 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 130.097 ms, heap usage 369.311 MB -> 210.085 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (924.911 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.548 ms, heap usage 303.927 MB -> 210.133 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (873.242 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.416 ms, heap usage 251.362 MB -> 210.180 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (854.311 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 124.763 ms, heap usage 278.475 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (917.803 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.433 ms, heap usage 444.121 MB -> 210.278 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (851.910 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 176.366 ms, heap usage 307.933 MB -> 210.326 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (910.849 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 125.593 ms, heap usage 217.555 MB -> 210.350 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.254 ms, heap usage 347.053 MB -> 210.451 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (829.834 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.518 ms, heap usage 443.548 MB -> 210.488 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (724.093 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 115.243 ms, heap usage 451.575 MB -> 210.526 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (861.012 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 118.164 ms, heap usage 350.072 MB -> 210.557 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (819.373 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 113.838 ms, heap usage 338.041 MB -> 147.047 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5528.186 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 137.408 ms, heap usage 278.418 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5389.745 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 114.700 ms, heap usage 200.458 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5437.396 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 139.571 ms, heap usage 475.410 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5360.958 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 132.303 ms, heap usage 263.798 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5816.636 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 109.987 ms, heap usage 370.392 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6508.546 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 151.519 ms, heap usage 454.843 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (6503.038 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 161.985 ms, heap usage 225.150 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (6483.786 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 155.104 ms, heap usage 211.658 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5966.197 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 114.941 ms, heap usage 491.451 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5483.775 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 111.799 ms, heap usage 348.157 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5507.539 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 108.341 ms, heap usage 370.245 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5327.190 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 113.063 ms, heap usage 388.257 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5557.026 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 110.199 ms, heap usage 417.705 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5562.068 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 126.001 ms, heap usage 351.790 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6050.139 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.904 ms, heap usage 386.999 MB -> 98.211 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (849.676 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 92.825 ms, heap usage 251.209 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (293.931 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 81.249 ms, heap usage 241.124 MB -> 98.578 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (226.956 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 91.506 ms, heap usage 241.078 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (191.729 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 78.792 ms, heap usage 241.079 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (218.258 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 74.230 ms, heap usage 242.048 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (144.150 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.946 ms, heap usage 241.906 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (210.382 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 71.898 ms, heap usage 242.050 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (186.636 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 69.225 ms, heap usage 242.269 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (151.402 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.216 ms, heap usage 242.392 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (141.084 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.568 ms, heap usage 241.853 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (154.671 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 69.023 ms, heap usage 241.879 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (160.571 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 69.450 ms, heap usage 241.961 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (144.086 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.026 ms, heap usage 242.454 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (164.946 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 82.038 ms, heap usage 241.950 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (156.703 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 165.245 ms, heap usage 123.756 MB -> 100.768 MB.\n====== db-shootout (database) [default], iteration 0 completed (8279.994 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.136 ms, heap usage 156.590 MB -> 107.747 MB.\n====== db-shootout (database) [default], iteration 1 completed (6864.949 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 75.858 ms, heap usage 407.555 MB -> 110.498 MB.\n====== db-shootout (database) [default], iteration 2 completed (8133.764 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 104.697 ms, heap usage 482.135 MB -> 111.678 MB.\n====== db-shootout (database) [default], iteration 3 completed (7257.953 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 83.316 ms, heap usage 481.700 MB -> 109.188 MB.\n====== db-shootout (database) [default], iteration 4 completed (8069.649 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.265 ms, heap usage 294.603 MB -> 109.495 MB.\n====== db-shootout (database) [default], iteration 5 completed (7054.228 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 68.851 ms, heap usage 202.466 MB -> 108.491 MB.\n====== db-shootout (database) [default], iteration 6 completed (7215.014 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 70.301 ms, heap usage 185.356 MB -> 112.420 MB.\n====== db-shootout (database) [default], iteration 7 completed (7645.298 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 96.708 ms, heap usage 408.179 MB -> 112.395 MB.\n====== db-shootout (database) [default], iteration 8 completed (7159.599 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 72.654 ms, heap usage 260.488 MB -> 111.217 MB.\n====== db-shootout (database) [default], iteration 9 completed (8102.269 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 93.215 ms, heap usage 247.067 MB -> 111.793 MB.\n====== db-shootout (database) [default], iteration 10 completed (8201.659 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 88.084 ms, heap usage 196.019 MB -> 108.876 MB.\n====== db-shootout (database) [default], iteration 11 completed (8928.872 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 89.395 ms, heap usage 148.929 MB -> 108.561 MB.\n====== db-shootout (database) [default], iteration 12 completed (9484.912 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 76.072 ms, heap usage 175.761 MB -> 108.269 MB.\n====== db-shootout (database) [default], iteration 13 completed (9352.132 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 82.217 ms, heap usage 204.503 MB -> 108.293 MB.\n====== db-shootout (database) [default], iteration 14 completed (7825.940 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35547 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 104.455 ms, heap usage 320.432 MB -> 112.082 MB.\n====== finagle-http (web) [default], iteration 0 completed (20069.884 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 121.654 ms, heap usage 326.481 MB -> 115.826 MB.\n====== finagle-http (web) [default], iteration 1 completed (16009.480 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 90.148 ms, heap usage 243.494 MB -> 115.849 MB.\n====== finagle-http (web) [default], iteration 2 completed (13975.211 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 107.935 ms, heap usage 232.462 MB -> 115.898 MB.\n====== finagle-http (web) [default], iteration 3 completed (11999.340 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 112.360 ms, heap usage 219.221 MB -> 115.906 MB.\n====== finagle-http (web) [default], iteration 4 completed (8709.573 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 80.389 ms, heap usage 209.710 MB -> 115.897 MB.\n====== finagle-http (web) [default], iteration 5 completed (7600.006 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 90.046 ms, heap usage 204.281 MB -> 117.849 MB.\n====== finagle-http (web) [default], iteration 6 completed (7535.088 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 127.775 ms, heap usage 194.577 MB -> 115.979 MB.\n====== finagle-http (web) [default], iteration 7 completed (6782.047 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 90.278 ms, heap usage 187.280 MB -> 115.910 MB.\n====== finagle-http (web) [default], iteration 8 completed (6265.913 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 70.116 ms, heap usage 178.110 MB -> 115.973 MB.\n====== finagle-http (web) [default], iteration 9 completed (4642.991 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 80.779 ms, heap usage 323.567 MB -> 115.970 MB.\n====== finagle-http (web) [default], iteration 10 completed (4145.819 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 86.020 ms, heap usage 307.268 MB -> 116.255 MB.\n====== finagle-http (web) [default], iteration 11 completed (3694.216 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 84.455 ms, heap usage 302.078 MB -> 115.982 MB.\n====== finagle-http (web) [default], iteration 12 completed (3721.920 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 75.293 ms, heap usage 297.157 MB -> 115.974 MB.\n====== finagle-http (web) [default], iteration 13 completed (3767.458 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 79.429 ms, heap usage 296.561 MB -> 115.986 MB.\n====== finagle-http (web) [default], iteration 14 completed (3686.511 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.883 ms, heap usage 311.874 MB -> 117.016 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14567.734 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 91.924 ms, heap usage 748.162 MB -> 117.250 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (11914.090 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 92.956 ms, heap usage 617.357 MB -> 113.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12046.703 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 87.006 ms, heap usage 625.175 MB -> 113.546 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12159.038 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.203 ms, heap usage 653.120 MB -> 113.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (11806.913 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 76.041 ms, heap usage 659.988 MB -> 113.544 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12119.651 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 86.933 ms, heap usage 630.908 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12011.323 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 76.199 ms, heap usage 641.149 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12029.477 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 87.864 ms, heap usage 643.745 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11818.715 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 72.649 ms, heap usage 644.929 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12661.824 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 71.217 ms, heap usage 707.143 MB -> 113.559 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12445.619 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 90.163 ms, heap usage 614.914 MB -> 113.567 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11921.951 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 91.365 ms, heap usage 628.943 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11610.642 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 86.133 ms, heap usage 641.617 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11968.551 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 89.380 ms, heap usage 631.059 MB -> 113.569 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12458.430 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.062 ms, heap usage 219.995 MB -> 127.548 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8456.478 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.690 ms, heap usage 264.960 MB -> 160.178 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (1975.817 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 96.778 ms, heap usage 491.689 MB -> 177.170 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1490.638 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.246 ms, heap usage 505.994 MB -> 171.820 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1466.459 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.026 ms, heap usage 450.661 MB -> 161.068 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1370.440 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.097 ms, heap usage 468.970 MB -> 161.284 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1330.634 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.589 ms, heap usage 518.427 MB -> 161.493 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1346.798 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 96.884 ms, heap usage 523.910 MB -> 161.699 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1440.812 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 103.228 ms, heap usage 529.346 MB -> 161.851 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1327.374 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 105.044 ms, heap usage 469.720 MB -> 161.981 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1294.957 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 100.316 ms, heap usage 501.456 MB -> 162.111 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1323.161 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.972 ms, heap usage 449.606 MB -> 162.225 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1316.463 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.494 ms, heap usage 482.770 MB -> 162.347 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1251.563 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.167 ms, heap usage 481.748 MB -> 162.468 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1258.373 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 100.073 ms, heap usage 488.726 MB -> 162.584 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1197.805 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 101.937 ms, heap usage 483.495 MB -> 142.934 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 578\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 46\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 578\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 16\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 21\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 118.34 op/s (118.34 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.659 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.171 ms, heap usage 432.717 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 40\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 578\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 21\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 10\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 326.53 op/s (326.53 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1502.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 119.563 ms, heap usage 432.268 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 444\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 578\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 15\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 21\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 10\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 512.82 op/s (512.82 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.766 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 109.500 ms, heap usage 435.750 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 385\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 578\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 17\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 43\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 10\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 806.05 op/s (806.05 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1328.547 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 97.208 ms, heap usage 451.265 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 578\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 17\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 43\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 10\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1023.02 op/s (1023.02 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1305.632 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 96.350 ms, heap usage 514.240 MB -> 143.197 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 578\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 15\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 17\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 43\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 10\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1242.867 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 101.166 ms, heap usage 508.976 MB -> 143.205 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 578\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 17\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 43\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 10\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1497.33 op/s (1497.33 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1258.665 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 99.032 ms, heap usage 512.234 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 364\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 578\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 17\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 43\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 10\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1697.61 op/s (1697.61 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1268.334 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 95.423 ms, heap usage 512.003 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 578\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 17\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 43\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 10\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1978.02 op/s (1978.02 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1237.745 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 103.146 ms, heap usage 509.925 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 578\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 17\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 43\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 11\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2150.54 op/s (2150.54 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.896 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 126.573 ms, heap usage 512.999 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 372\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 578\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 17\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 43\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 16\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2321.90 op/s (2321.90 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1307.247 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 98.357 ms, heap usage 512.777 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 431\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 578\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 15\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 17\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 43\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2181.82 op/s (2181.82 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1325.232 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 109.477 ms, heap usage 505.517 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 487\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 578\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 15\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 17\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 43\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2084.17 op/s (2084.17 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1394.190 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 139.535 ms, heap usage 506.758 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 34\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 578\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 15\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 17\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 43\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2901.55 op/s (2901.55 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1658.631 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 127.460 ms, heap usage 508.477 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 407\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 578\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 15\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 17\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 43\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2803.74 op/s (2803.74 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1491.065 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.885 ms, heap usage 453.988 MB -> 154.499 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27755.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.554 ms, heap usage 547.458 MB -> 430.313 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15259.872 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 125.316 ms, heap usage 449.474 MB -> 430.526 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15122.779 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 141.624 ms, heap usage 708.754 MB -> 430.655 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15373.306 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 128.350 ms, heap usage 441.660 MB -> 430.713 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15608.687 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 139.383 ms, heap usage 449.578 MB -> 430.640 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14679.610 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.195 ms, heap usage 582.706 MB -> 427.603 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14656.078 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.738 ms, heap usage 748.016 MB -> 427.676 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14951.115 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 144.137 ms, heap usage 748.028 MB -> 427.027 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14676.438 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 119.460 ms, heap usage 445.210 MB -> 425.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14790.642 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.441 ms, heap usage 811.379 MB -> 422.557 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15524.717 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 112.350 ms, heap usage 743.074 MB -> 422.735 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14859.821 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.323 ms, heap usage 524.729 MB -> 422.794 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14571.928 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 121.464 ms, heap usage 743.304 MB -> 422.918 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15308.674 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 101.113 ms, heap usage 640.318 MB -> 423.450 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15224.508 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 115.256 ms, heap usage 367.239 MB -> 168.967 MB.\n====== als (apache-spark) [default], iteration 0 completed (16795.053 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.030 ms, heap usage 313.600 MB -> 193.526 MB.\n====== als (apache-spark) [default], iteration 1 completed (8469.242 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 160.654 ms, heap usage 567.578 MB -> 195.087 MB.\n====== als (apache-spark) [default], iteration 2 completed (7810.714 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 139.767 ms, heap usage 587.341 MB -> 195.721 MB.\n====== als (apache-spark) [default], iteration 3 completed (7716.502 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 148.107 ms, heap usage 575.934 MB -> 196.268 MB.\n====== als (apache-spark) [default], iteration 4 completed (8456.560 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 138.590 ms, heap usage 562.663 MB -> 196.773 MB.\n====== als (apache-spark) [default], iteration 5 completed (7488.587 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 171.344 ms, heap usage 597.601 MB -> 197.349 MB.\n====== als (apache-spark) [default], iteration 6 completed (7384.134 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 135.616 ms, heap usage 488.658 MB -> 197.755 MB.\n====== als (apache-spark) [default], iteration 7 completed (7359.408 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 152.746 ms, heap usage 489.183 MB -> 198.457 MB.\n====== als (apache-spark) [default], iteration 8 completed (7508.314 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.470 ms, heap usage 655.695 MB -> 199.178 MB.\n====== als (apache-spark) [default], iteration 9 completed (7454.432 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 145.375 ms, heap usage 711.895 MB -> 199.372 MB.\n====== als (apache-spark) [default], iteration 10 completed (7211.595 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 138.795 ms, heap usage 475.128 MB -> 199.477 MB.\n====== als (apache-spark) [default], iteration 11 completed (7347.154 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 147.556 ms, heap usage 660.950 MB -> 199.919 MB.\n====== als (apache-spark) [default], iteration 12 completed (7182.671 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 140.073 ms, heap usage 599.239 MB -> 200.165 MB.\n====== als (apache-spark) [default], iteration 13 completed (7139.441 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 149.022 ms, heap usage 616.610 MB -> 200.192 MB.\n====== als (apache-spark) [default], iteration 14 completed (7258.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 136.682 ms, heap usage 688.044 MB -> 180.638 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4066.358 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.610 ms, heap usage 316.927 MB -> 180.452 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4148.655 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 136.795 ms, heap usage 315.954 MB -> 180.450 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (3999.060 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 159.271 ms, heap usage 385.700 MB -> 180.450 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (5593.874 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 148.535 ms, heap usage 310.950 MB -> 180.448 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4518.935 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 129.875 ms, heap usage 317.387 MB -> 180.447 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (5035.730 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 217.570 ms, heap usage 333.574 MB -> 180.442 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (4791.802 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 120.895 ms, heap usage 333.967 MB -> 180.445 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3792.220 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 122.742 ms, heap usage 351.572 MB -> 180.445 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3637.750 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 124.435 ms, heap usage 349.070 MB -> 180.443 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3495.283 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.278 ms, heap usage 323.566 MB -> 180.441 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4460.536 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 152.037 ms, heap usage 311.938 MB -> 180.444 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (5249.319 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 187.858 ms, heap usage 392.440 MB -> 180.439 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (6649.413 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 180.105 ms, heap usage 309.003 MB -> 180.437 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (4989.394 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 135.383 ms, heap usage 310.937 MB -> 180.439 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (4723.376 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 228.716 ms, heap usage 431.693 MB -> 202.734 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (490.324 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 186.054 ms, heap usage 232.234 MB -> 202.766 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (234.447 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 189.773 ms, heap usage 232.769 MB -> 202.768 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (238.741 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 165.726 ms, heap usage 232.766 MB -> 202.776 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (220.271 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 189.739 ms, heap usage 233.268 MB -> 202.775 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (213.975 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 187.633 ms, heap usage 232.767 MB -> 202.773 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (192.883 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 209.639 ms, heap usage 233.267 MB -> 202.768 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (210.763 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 151.897 ms, heap usage 232.775 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (202.398 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 180.762 ms, heap usage 232.768 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (248.195 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 180.770 ms, heap usage 233.268 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (231.780 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 175.670 ms, heap usage 232.769 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (209.958 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 194.613 ms, heap usage 232.777 MB -> 202.772 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (216.474 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 168.792 ms, heap usage 232.769 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (216.346 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 191.477 ms, heap usage 232.777 MB -> 202.769 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (208.956 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 174.623 ms, heap usage 232.777 MB -> 202.772 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (288.060 ms) ======\n"
    },
    "philosophers": {
        "times": [
            3392.961,
            1214.271,
            1265.219,
            1232.216,
            1143.981,
            1221.751,
            1156.078,
            1008.085,
            1180.396,
            1100.522,
            1163.782,
            962.079,
            1149.928,
            1091.746,
            1039.176
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 66.112 ms, heap usage 219.232 MB -> 63.892 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3770.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 131.923 ms, heap usage 270.271 MB -> 209.915 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1428.102 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.832 ms, heap usage 333.076 MB -> 209.987 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (974.435 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 135.288 ms, heap usage 420.309 MB -> 210.037 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.938 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 130.097 ms, heap usage 369.311 MB -> 210.085 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (924.911 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.548 ms, heap usage 303.927 MB -> 210.133 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (873.242 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.416 ms, heap usage 251.362 MB -> 210.180 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (854.311 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 124.763 ms, heap usage 278.475 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (917.803 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.433 ms, heap usage 444.121 MB -> 210.278 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (851.910 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 176.366 ms, heap usage 307.933 MB -> 210.326 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (910.849 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 125.593 ms, heap usage 217.555 MB -> 210.350 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.254 ms, heap usage 347.053 MB -> 210.451 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (829.834 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.518 ms, heap usage 443.548 MB -> 210.488 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (724.093 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 115.243 ms, heap usage 451.575 MB -> 210.526 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (861.012 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 118.164 ms, heap usage 350.072 MB -> 210.557 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (819.373 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 113.838 ms, heap usage 338.041 MB -> 147.047 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5528.186 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 137.408 ms, heap usage 278.418 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5389.745 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 114.700 ms, heap usage 200.458 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5437.396 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 139.571 ms, heap usage 475.410 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5360.958 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 132.303 ms, heap usage 263.798 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5816.636 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 109.987 ms, heap usage 370.392 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6508.546 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 151.519 ms, heap usage 454.843 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (6503.038 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 161.985 ms, heap usage 225.150 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (6483.786 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 155.104 ms, heap usage 211.658 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5966.197 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 114.941 ms, heap usage 491.451 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5483.775 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 111.799 ms, heap usage 348.157 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5507.539 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 108.341 ms, heap usage 370.245 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5327.190 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 113.063 ms, heap usage 388.257 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5557.026 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 110.199 ms, heap usage 417.705 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5562.068 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 126.001 ms, heap usage 351.790 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6050.139 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.904 ms, heap usage 386.999 MB -> 98.211 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (849.676 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 92.825 ms, heap usage 251.209 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (293.931 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 81.249 ms, heap usage 241.124 MB -> 98.578 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (226.956 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 91.506 ms, heap usage 241.078 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (191.729 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 78.792 ms, heap usage 241.079 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (218.258 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 74.230 ms, heap usage 242.048 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (144.150 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.946 ms, heap usage 241.906 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (210.382 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 71.898 ms, heap usage 242.050 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (186.636 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 69.225 ms, heap usage 242.269 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (151.402 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.216 ms, heap usage 242.392 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (141.084 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.568 ms, heap usage 241.853 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (154.671 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 69.023 ms, heap usage 241.879 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (160.571 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 69.450 ms, heap usage 241.961 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (144.086 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.026 ms, heap usage 242.454 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (164.946 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 82.038 ms, heap usage 241.950 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (156.703 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 165.245 ms, heap usage 123.756 MB -> 100.768 MB.\n====== db-shootout (database) [default], iteration 0 completed (8279.994 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.136 ms, heap usage 156.590 MB -> 107.747 MB.\n====== db-shootout (database) [default], iteration 1 completed (6864.949 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 75.858 ms, heap usage 407.555 MB -> 110.498 MB.\n====== db-shootout (database) [default], iteration 2 completed (8133.764 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 104.697 ms, heap usage 482.135 MB -> 111.678 MB.\n====== db-shootout (database) [default], iteration 3 completed (7257.953 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 83.316 ms, heap usage 481.700 MB -> 109.188 MB.\n====== db-shootout (database) [default], iteration 4 completed (8069.649 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.265 ms, heap usage 294.603 MB -> 109.495 MB.\n====== db-shootout (database) [default], iteration 5 completed (7054.228 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 68.851 ms, heap usage 202.466 MB -> 108.491 MB.\n====== db-shootout (database) [default], iteration 6 completed (7215.014 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 70.301 ms, heap usage 185.356 MB -> 112.420 MB.\n====== db-shootout (database) [default], iteration 7 completed (7645.298 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 96.708 ms, heap usage 408.179 MB -> 112.395 MB.\n====== db-shootout (database) [default], iteration 8 completed (7159.599 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 72.654 ms, heap usage 260.488 MB -> 111.217 MB.\n====== db-shootout (database) [default], iteration 9 completed (8102.269 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 93.215 ms, heap usage 247.067 MB -> 111.793 MB.\n====== db-shootout (database) [default], iteration 10 completed (8201.659 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 88.084 ms, heap usage 196.019 MB -> 108.876 MB.\n====== db-shootout (database) [default], iteration 11 completed (8928.872 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 89.395 ms, heap usage 148.929 MB -> 108.561 MB.\n====== db-shootout (database) [default], iteration 12 completed (9484.912 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 76.072 ms, heap usage 175.761 MB -> 108.269 MB.\n====== db-shootout (database) [default], iteration 13 completed (9352.132 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 82.217 ms, heap usage 204.503 MB -> 108.293 MB.\n====== db-shootout (database) [default], iteration 14 completed (7825.940 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35547 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 104.455 ms, heap usage 320.432 MB -> 112.082 MB.\n====== finagle-http (web) [default], iteration 0 completed (20069.884 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 121.654 ms, heap usage 326.481 MB -> 115.826 MB.\n====== finagle-http (web) [default], iteration 1 completed (16009.480 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 90.148 ms, heap usage 243.494 MB -> 115.849 MB.\n====== finagle-http (web) [default], iteration 2 completed (13975.211 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 107.935 ms, heap usage 232.462 MB -> 115.898 MB.\n====== finagle-http (web) [default], iteration 3 completed (11999.340 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 112.360 ms, heap usage 219.221 MB -> 115.906 MB.\n====== finagle-http (web) [default], iteration 4 completed (8709.573 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 80.389 ms, heap usage 209.710 MB -> 115.897 MB.\n====== finagle-http (web) [default], iteration 5 completed (7600.006 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 90.046 ms, heap usage 204.281 MB -> 117.849 MB.\n====== finagle-http (web) [default], iteration 6 completed (7535.088 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 127.775 ms, heap usage 194.577 MB -> 115.979 MB.\n====== finagle-http (web) [default], iteration 7 completed (6782.047 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 90.278 ms, heap usage 187.280 MB -> 115.910 MB.\n====== finagle-http (web) [default], iteration 8 completed (6265.913 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 70.116 ms, heap usage 178.110 MB -> 115.973 MB.\n====== finagle-http (web) [default], iteration 9 completed (4642.991 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 80.779 ms, heap usage 323.567 MB -> 115.970 MB.\n====== finagle-http (web) [default], iteration 10 completed (4145.819 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 86.020 ms, heap usage 307.268 MB -> 116.255 MB.\n====== finagle-http (web) [default], iteration 11 completed (3694.216 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 84.455 ms, heap usage 302.078 MB -> 115.982 MB.\n====== finagle-http (web) [default], iteration 12 completed (3721.920 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 75.293 ms, heap usage 297.157 MB -> 115.974 MB.\n====== finagle-http (web) [default], iteration 13 completed (3767.458 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 79.429 ms, heap usage 296.561 MB -> 115.986 MB.\n====== finagle-http (web) [default], iteration 14 completed (3686.511 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.883 ms, heap usage 311.874 MB -> 117.016 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14567.734 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 91.924 ms, heap usage 748.162 MB -> 117.250 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (11914.090 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 92.956 ms, heap usage 617.357 MB -> 113.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12046.703 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 87.006 ms, heap usage 625.175 MB -> 113.546 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12159.038 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.203 ms, heap usage 653.120 MB -> 113.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (11806.913 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 76.041 ms, heap usage 659.988 MB -> 113.544 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12119.651 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 86.933 ms, heap usage 630.908 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12011.323 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 76.199 ms, heap usage 641.149 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12029.477 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 87.864 ms, heap usage 643.745 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11818.715 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 72.649 ms, heap usage 644.929 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12661.824 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 71.217 ms, heap usage 707.143 MB -> 113.559 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12445.619 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 90.163 ms, heap usage 614.914 MB -> 113.567 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11921.951 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 91.365 ms, heap usage 628.943 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11610.642 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 86.133 ms, heap usage 641.617 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11968.551 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 89.380 ms, heap usage 631.059 MB -> 113.569 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12458.430 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.062 ms, heap usage 219.995 MB -> 127.548 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8456.478 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.690 ms, heap usage 264.960 MB -> 160.178 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (1975.817 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 96.778 ms, heap usage 491.689 MB -> 177.170 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1490.638 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.246 ms, heap usage 505.994 MB -> 171.820 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1466.459 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.026 ms, heap usage 450.661 MB -> 161.068 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1370.440 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.097 ms, heap usage 468.970 MB -> 161.284 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1330.634 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.589 ms, heap usage 518.427 MB -> 161.493 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1346.798 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 96.884 ms, heap usage 523.910 MB -> 161.699 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1440.812 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 103.228 ms, heap usage 529.346 MB -> 161.851 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1327.374 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 105.044 ms, heap usage 469.720 MB -> 161.981 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1294.957 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 100.316 ms, heap usage 501.456 MB -> 162.111 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1323.161 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.972 ms, heap usage 449.606 MB -> 162.225 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1316.463 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.494 ms, heap usage 482.770 MB -> 162.347 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1251.563 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.167 ms, heap usage 481.748 MB -> 162.468 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1258.373 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 100.073 ms, heap usage 488.726 MB -> 162.584 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1197.805 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 101.937 ms, heap usage 483.495 MB -> 142.934 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 578\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 46\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 578\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 16\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 21\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 118.34 op/s (118.34 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.659 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.171 ms, heap usage 432.717 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 40\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 578\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 21\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 10\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 326.53 op/s (326.53 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1502.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 119.563 ms, heap usage 432.268 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 444\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 578\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 15\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 21\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 10\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 512.82 op/s (512.82 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.766 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 109.500 ms, heap usage 435.750 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 385\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 578\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 17\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 43\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 10\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 806.05 op/s (806.05 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1328.547 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 97.208 ms, heap usage 451.265 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 578\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 17\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 43\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 10\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1023.02 op/s (1023.02 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1305.632 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 96.350 ms, heap usage 514.240 MB -> 143.197 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 578\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 15\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 17\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 43\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 10\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1242.867 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 101.166 ms, heap usage 508.976 MB -> 143.205 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 578\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 17\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 43\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 10\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1497.33 op/s (1497.33 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1258.665 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 99.032 ms, heap usage 512.234 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 364\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 578\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 17\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 43\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 10\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1697.61 op/s (1697.61 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1268.334 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 95.423 ms, heap usage 512.003 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 578\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 17\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 43\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 10\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1978.02 op/s (1978.02 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1237.745 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 103.146 ms, heap usage 509.925 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 578\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 17\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 43\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 11\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2150.54 op/s (2150.54 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.896 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 126.573 ms, heap usage 512.999 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 372\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 578\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 17\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 43\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 16\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2321.90 op/s (2321.90 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1307.247 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 98.357 ms, heap usage 512.777 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 431\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 578\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 15\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 17\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 43\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2181.82 op/s (2181.82 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1325.232 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 109.477 ms, heap usage 505.517 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 487\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 578\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 15\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 17\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 43\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2084.17 op/s (2084.17 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1394.190 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 139.535 ms, heap usage 506.758 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 34\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 578\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 15\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 17\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 43\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2901.55 op/s (2901.55 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1658.631 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 127.460 ms, heap usage 508.477 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 407\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 578\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 15\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 17\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 43\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2803.74 op/s (2803.74 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1491.065 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.885 ms, heap usage 453.988 MB -> 154.499 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27755.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.554 ms, heap usage 547.458 MB -> 430.313 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15259.872 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 125.316 ms, heap usage 449.474 MB -> 430.526 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15122.779 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 141.624 ms, heap usage 708.754 MB -> 430.655 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15373.306 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 128.350 ms, heap usage 441.660 MB -> 430.713 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15608.687 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 139.383 ms, heap usage 449.578 MB -> 430.640 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14679.610 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.195 ms, heap usage 582.706 MB -> 427.603 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14656.078 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.738 ms, heap usage 748.016 MB -> 427.676 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14951.115 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 144.137 ms, heap usage 748.028 MB -> 427.027 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14676.438 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 119.460 ms, heap usage 445.210 MB -> 425.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14790.642 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.441 ms, heap usage 811.379 MB -> 422.557 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15524.717 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 112.350 ms, heap usage 743.074 MB -> 422.735 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14859.821 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.323 ms, heap usage 524.729 MB -> 422.794 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14571.928 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 121.464 ms, heap usage 743.304 MB -> 422.918 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15308.674 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 101.113 ms, heap usage 640.318 MB -> 423.450 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15224.508 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 115.256 ms, heap usage 367.239 MB -> 168.967 MB.\n====== als (apache-spark) [default], iteration 0 completed (16795.053 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.030 ms, heap usage 313.600 MB -> 193.526 MB.\n====== als (apache-spark) [default], iteration 1 completed (8469.242 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 160.654 ms, heap usage 567.578 MB -> 195.087 MB.\n====== als (apache-spark) [default], iteration 2 completed (7810.714 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 139.767 ms, heap usage 587.341 MB -> 195.721 MB.\n====== als (apache-spark) [default], iteration 3 completed (7716.502 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 148.107 ms, heap usage 575.934 MB -> 196.268 MB.\n====== als (apache-spark) [default], iteration 4 completed (8456.560 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 138.590 ms, heap usage 562.663 MB -> 196.773 MB.\n====== als (apache-spark) [default], iteration 5 completed (7488.587 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 171.344 ms, heap usage 597.601 MB -> 197.349 MB.\n====== als (apache-spark) [default], iteration 6 completed (7384.134 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 135.616 ms, heap usage 488.658 MB -> 197.755 MB.\n====== als (apache-spark) [default], iteration 7 completed (7359.408 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 152.746 ms, heap usage 489.183 MB -> 198.457 MB.\n====== als (apache-spark) [default], iteration 8 completed (7508.314 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.470 ms, heap usage 655.695 MB -> 199.178 MB.\n====== als (apache-spark) [default], iteration 9 completed (7454.432 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 145.375 ms, heap usage 711.895 MB -> 199.372 MB.\n====== als (apache-spark) [default], iteration 10 completed (7211.595 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 138.795 ms, heap usage 475.128 MB -> 199.477 MB.\n====== als (apache-spark) [default], iteration 11 completed (7347.154 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 147.556 ms, heap usage 660.950 MB -> 199.919 MB.\n====== als (apache-spark) [default], iteration 12 completed (7182.671 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 140.073 ms, heap usage 599.239 MB -> 200.165 MB.\n====== als (apache-spark) [default], iteration 13 completed (7139.441 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 149.022 ms, heap usage 616.610 MB -> 200.192 MB.\n====== als (apache-spark) [default], iteration 14 completed (7258.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 136.682 ms, heap usage 688.044 MB -> 180.638 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4066.358 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.610 ms, heap usage 316.927 MB -> 180.452 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4148.655 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 136.795 ms, heap usage 315.954 MB -> 180.450 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (3999.060 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 159.271 ms, heap usage 385.700 MB -> 180.450 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (5593.874 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 148.535 ms, heap usage 310.950 MB -> 180.448 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4518.935 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 129.875 ms, heap usage 317.387 MB -> 180.447 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (5035.730 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 217.570 ms, heap usage 333.574 MB -> 180.442 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (4791.802 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 120.895 ms, heap usage 333.967 MB -> 180.445 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3792.220 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 122.742 ms, heap usage 351.572 MB -> 180.445 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3637.750 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 124.435 ms, heap usage 349.070 MB -> 180.443 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3495.283 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.278 ms, heap usage 323.566 MB -> 180.441 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4460.536 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 152.037 ms, heap usage 311.938 MB -> 180.444 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (5249.319 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 187.858 ms, heap usage 392.440 MB -> 180.439 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (6649.413 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 180.105 ms, heap usage 309.003 MB -> 180.437 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (4989.394 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 135.383 ms, heap usage 310.937 MB -> 180.439 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (4723.376 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 228.716 ms, heap usage 431.693 MB -> 202.734 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (490.324 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 186.054 ms, heap usage 232.234 MB -> 202.766 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (234.447 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 189.773 ms, heap usage 232.769 MB -> 202.768 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (238.741 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 165.726 ms, heap usage 232.766 MB -> 202.776 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (220.271 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 189.739 ms, heap usage 233.268 MB -> 202.775 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (213.975 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 187.633 ms, heap usage 232.767 MB -> 202.773 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (192.883 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 209.639 ms, heap usage 233.267 MB -> 202.768 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (210.763 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 151.897 ms, heap usage 232.775 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (202.398 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 180.762 ms, heap usage 232.768 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (248.195 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 180.770 ms, heap usage 233.268 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (231.780 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 175.670 ms, heap usage 232.769 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (209.958 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 194.613 ms, heap usage 232.777 MB -> 202.772 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (216.474 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 168.792 ms, heap usage 232.769 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (216.346 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 191.477 ms, heap usage 232.777 MB -> 202.769 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (208.956 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 174.623 ms, heap usage 232.777 MB -> 202.772 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (288.060 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 221.026 ms, heap usage 234.269 MB -> 181.769 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (3392.961 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 164.865 ms, heap usage 257.799 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1214.271 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 164.887 ms, heap usage 247.855 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (1265.219 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 174.036 ms, heap usage 335.882 MB -> 181.691 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1232.216 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 158.082 ms, heap usage 312.882 MB -> 181.696 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1143.981 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 186.387 ms, heap usage 265.776 MB -> 181.694 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1221.751 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 168.753 ms, heap usage 308.136 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (1156.078 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 170.950 ms, heap usage 293.715 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1008.085 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 123.940 ms, heap usage 277.005 MB -> 181.697 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1180.396 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 128.815 ms, heap usage 387.449 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1100.522 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 138.025 ms, heap usage 418.405 MB -> 181.693 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (1163.782 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 148.968 ms, heap usage 358.892 MB -> 181.700 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (962.079 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 128.600 ms, heap usage 253.394 MB -> 181.701 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1149.928 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 159.056 ms, heap usage 356.386 MB -> 181.694 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1091.746 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 169.292 ms, heap usage 337.852 MB -> 181.701 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1039.176 ms) ======\n"
    },
    "log-regression": {
        "times": [
            10460.378,
            2133.327,
            1897.189,
            1616.738,
            1343.036,
            1225.999,
            1184.178,
            1135.639,
            1083.766,
            1110.796,
            1101.737,
            1098.55,
            1379.031,
            1303.525,
            1553.553
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 66.112 ms, heap usage 219.232 MB -> 63.892 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3770.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 131.923 ms, heap usage 270.271 MB -> 209.915 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1428.102 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.832 ms, heap usage 333.076 MB -> 209.987 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (974.435 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 135.288 ms, heap usage 420.309 MB -> 210.037 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.938 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 130.097 ms, heap usage 369.311 MB -> 210.085 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (924.911 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.548 ms, heap usage 303.927 MB -> 210.133 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (873.242 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.416 ms, heap usage 251.362 MB -> 210.180 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (854.311 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 124.763 ms, heap usage 278.475 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (917.803 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.433 ms, heap usage 444.121 MB -> 210.278 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (851.910 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 176.366 ms, heap usage 307.933 MB -> 210.326 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (910.849 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 125.593 ms, heap usage 217.555 MB -> 210.350 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.254 ms, heap usage 347.053 MB -> 210.451 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (829.834 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.518 ms, heap usage 443.548 MB -> 210.488 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (724.093 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 115.243 ms, heap usage 451.575 MB -> 210.526 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (861.012 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 118.164 ms, heap usage 350.072 MB -> 210.557 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (819.373 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 113.838 ms, heap usage 338.041 MB -> 147.047 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5528.186 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 137.408 ms, heap usage 278.418 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5389.745 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 114.700 ms, heap usage 200.458 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5437.396 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 139.571 ms, heap usage 475.410 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5360.958 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 132.303 ms, heap usage 263.798 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5816.636 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 109.987 ms, heap usage 370.392 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6508.546 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 151.519 ms, heap usage 454.843 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (6503.038 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 161.985 ms, heap usage 225.150 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (6483.786 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 155.104 ms, heap usage 211.658 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5966.197 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 114.941 ms, heap usage 491.451 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5483.775 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 111.799 ms, heap usage 348.157 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5507.539 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 108.341 ms, heap usage 370.245 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5327.190 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 113.063 ms, heap usage 388.257 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5557.026 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 110.199 ms, heap usage 417.705 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5562.068 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 126.001 ms, heap usage 351.790 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6050.139 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.904 ms, heap usage 386.999 MB -> 98.211 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (849.676 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 92.825 ms, heap usage 251.209 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (293.931 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 81.249 ms, heap usage 241.124 MB -> 98.578 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (226.956 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 91.506 ms, heap usage 241.078 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (191.729 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 78.792 ms, heap usage 241.079 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (218.258 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 74.230 ms, heap usage 242.048 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (144.150 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.946 ms, heap usage 241.906 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (210.382 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 71.898 ms, heap usage 242.050 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (186.636 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 69.225 ms, heap usage 242.269 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (151.402 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.216 ms, heap usage 242.392 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (141.084 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.568 ms, heap usage 241.853 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (154.671 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 69.023 ms, heap usage 241.879 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (160.571 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 69.450 ms, heap usage 241.961 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (144.086 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.026 ms, heap usage 242.454 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (164.946 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 82.038 ms, heap usage 241.950 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (156.703 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 165.245 ms, heap usage 123.756 MB -> 100.768 MB.\n====== db-shootout (database) [default], iteration 0 completed (8279.994 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.136 ms, heap usage 156.590 MB -> 107.747 MB.\n====== db-shootout (database) [default], iteration 1 completed (6864.949 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 75.858 ms, heap usage 407.555 MB -> 110.498 MB.\n====== db-shootout (database) [default], iteration 2 completed (8133.764 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 104.697 ms, heap usage 482.135 MB -> 111.678 MB.\n====== db-shootout (database) [default], iteration 3 completed (7257.953 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 83.316 ms, heap usage 481.700 MB -> 109.188 MB.\n====== db-shootout (database) [default], iteration 4 completed (8069.649 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.265 ms, heap usage 294.603 MB -> 109.495 MB.\n====== db-shootout (database) [default], iteration 5 completed (7054.228 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 68.851 ms, heap usage 202.466 MB -> 108.491 MB.\n====== db-shootout (database) [default], iteration 6 completed (7215.014 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 70.301 ms, heap usage 185.356 MB -> 112.420 MB.\n====== db-shootout (database) [default], iteration 7 completed (7645.298 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 96.708 ms, heap usage 408.179 MB -> 112.395 MB.\n====== db-shootout (database) [default], iteration 8 completed (7159.599 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 72.654 ms, heap usage 260.488 MB -> 111.217 MB.\n====== db-shootout (database) [default], iteration 9 completed (8102.269 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 93.215 ms, heap usage 247.067 MB -> 111.793 MB.\n====== db-shootout (database) [default], iteration 10 completed (8201.659 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 88.084 ms, heap usage 196.019 MB -> 108.876 MB.\n====== db-shootout (database) [default], iteration 11 completed (8928.872 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 89.395 ms, heap usage 148.929 MB -> 108.561 MB.\n====== db-shootout (database) [default], iteration 12 completed (9484.912 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 76.072 ms, heap usage 175.761 MB -> 108.269 MB.\n====== db-shootout (database) [default], iteration 13 completed (9352.132 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 82.217 ms, heap usage 204.503 MB -> 108.293 MB.\n====== db-shootout (database) [default], iteration 14 completed (7825.940 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35547 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 104.455 ms, heap usage 320.432 MB -> 112.082 MB.\n====== finagle-http (web) [default], iteration 0 completed (20069.884 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 121.654 ms, heap usage 326.481 MB -> 115.826 MB.\n====== finagle-http (web) [default], iteration 1 completed (16009.480 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 90.148 ms, heap usage 243.494 MB -> 115.849 MB.\n====== finagle-http (web) [default], iteration 2 completed (13975.211 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 107.935 ms, heap usage 232.462 MB -> 115.898 MB.\n====== finagle-http (web) [default], iteration 3 completed (11999.340 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 112.360 ms, heap usage 219.221 MB -> 115.906 MB.\n====== finagle-http (web) [default], iteration 4 completed (8709.573 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 80.389 ms, heap usage 209.710 MB -> 115.897 MB.\n====== finagle-http (web) [default], iteration 5 completed (7600.006 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 90.046 ms, heap usage 204.281 MB -> 117.849 MB.\n====== finagle-http (web) [default], iteration 6 completed (7535.088 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 127.775 ms, heap usage 194.577 MB -> 115.979 MB.\n====== finagle-http (web) [default], iteration 7 completed (6782.047 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 90.278 ms, heap usage 187.280 MB -> 115.910 MB.\n====== finagle-http (web) [default], iteration 8 completed (6265.913 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 70.116 ms, heap usage 178.110 MB -> 115.973 MB.\n====== finagle-http (web) [default], iteration 9 completed (4642.991 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 80.779 ms, heap usage 323.567 MB -> 115.970 MB.\n====== finagle-http (web) [default], iteration 10 completed (4145.819 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 86.020 ms, heap usage 307.268 MB -> 116.255 MB.\n====== finagle-http (web) [default], iteration 11 completed (3694.216 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 84.455 ms, heap usage 302.078 MB -> 115.982 MB.\n====== finagle-http (web) [default], iteration 12 completed (3721.920 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 75.293 ms, heap usage 297.157 MB -> 115.974 MB.\n====== finagle-http (web) [default], iteration 13 completed (3767.458 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 79.429 ms, heap usage 296.561 MB -> 115.986 MB.\n====== finagle-http (web) [default], iteration 14 completed (3686.511 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.883 ms, heap usage 311.874 MB -> 117.016 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14567.734 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 91.924 ms, heap usage 748.162 MB -> 117.250 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (11914.090 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 92.956 ms, heap usage 617.357 MB -> 113.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12046.703 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 87.006 ms, heap usage 625.175 MB -> 113.546 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12159.038 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.203 ms, heap usage 653.120 MB -> 113.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (11806.913 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 76.041 ms, heap usage 659.988 MB -> 113.544 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12119.651 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 86.933 ms, heap usage 630.908 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12011.323 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 76.199 ms, heap usage 641.149 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12029.477 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 87.864 ms, heap usage 643.745 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11818.715 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 72.649 ms, heap usage 644.929 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12661.824 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 71.217 ms, heap usage 707.143 MB -> 113.559 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12445.619 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 90.163 ms, heap usage 614.914 MB -> 113.567 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11921.951 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 91.365 ms, heap usage 628.943 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11610.642 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 86.133 ms, heap usage 641.617 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11968.551 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 89.380 ms, heap usage 631.059 MB -> 113.569 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12458.430 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.062 ms, heap usage 219.995 MB -> 127.548 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8456.478 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.690 ms, heap usage 264.960 MB -> 160.178 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (1975.817 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 96.778 ms, heap usage 491.689 MB -> 177.170 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1490.638 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.246 ms, heap usage 505.994 MB -> 171.820 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1466.459 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.026 ms, heap usage 450.661 MB -> 161.068 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1370.440 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.097 ms, heap usage 468.970 MB -> 161.284 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1330.634 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.589 ms, heap usage 518.427 MB -> 161.493 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1346.798 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 96.884 ms, heap usage 523.910 MB -> 161.699 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1440.812 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 103.228 ms, heap usage 529.346 MB -> 161.851 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1327.374 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 105.044 ms, heap usage 469.720 MB -> 161.981 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1294.957 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 100.316 ms, heap usage 501.456 MB -> 162.111 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1323.161 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.972 ms, heap usage 449.606 MB -> 162.225 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1316.463 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.494 ms, heap usage 482.770 MB -> 162.347 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1251.563 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.167 ms, heap usage 481.748 MB -> 162.468 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1258.373 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 100.073 ms, heap usage 488.726 MB -> 162.584 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1197.805 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 101.937 ms, heap usage 483.495 MB -> 142.934 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 578\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 46\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 578\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 16\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 21\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 118.34 op/s (118.34 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.659 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.171 ms, heap usage 432.717 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 40\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 578\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 21\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 10\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 326.53 op/s (326.53 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1502.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 119.563 ms, heap usage 432.268 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 444\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 578\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 15\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 21\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 10\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 512.82 op/s (512.82 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.766 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 109.500 ms, heap usage 435.750 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 385\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 578\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 17\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 43\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 10\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 806.05 op/s (806.05 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1328.547 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 97.208 ms, heap usage 451.265 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 578\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 17\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 43\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 10\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1023.02 op/s (1023.02 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1305.632 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 96.350 ms, heap usage 514.240 MB -> 143.197 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 578\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 15\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 17\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 43\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 10\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1242.867 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 101.166 ms, heap usage 508.976 MB -> 143.205 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 578\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 17\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 43\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 10\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1497.33 op/s (1497.33 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1258.665 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 99.032 ms, heap usage 512.234 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 364\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 578\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 17\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 43\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 10\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1697.61 op/s (1697.61 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1268.334 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 95.423 ms, heap usage 512.003 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 578\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 17\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 43\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 10\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1978.02 op/s (1978.02 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1237.745 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 103.146 ms, heap usage 509.925 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 578\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 17\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 43\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 11\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2150.54 op/s (2150.54 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.896 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 126.573 ms, heap usage 512.999 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 372\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 578\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 17\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 43\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 16\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2321.90 op/s (2321.90 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1307.247 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 98.357 ms, heap usage 512.777 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 431\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 578\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 15\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 17\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 43\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2181.82 op/s (2181.82 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1325.232 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 109.477 ms, heap usage 505.517 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 487\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 578\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 15\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 17\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 43\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2084.17 op/s (2084.17 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1394.190 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 139.535 ms, heap usage 506.758 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 34\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 578\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 15\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 17\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 43\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2901.55 op/s (2901.55 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1658.631 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 127.460 ms, heap usage 508.477 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 407\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 578\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 15\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 17\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 43\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2803.74 op/s (2803.74 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1491.065 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.885 ms, heap usage 453.988 MB -> 154.499 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27755.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.554 ms, heap usage 547.458 MB -> 430.313 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15259.872 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 125.316 ms, heap usage 449.474 MB -> 430.526 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15122.779 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 141.624 ms, heap usage 708.754 MB -> 430.655 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15373.306 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 128.350 ms, heap usage 441.660 MB -> 430.713 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15608.687 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 139.383 ms, heap usage 449.578 MB -> 430.640 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14679.610 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.195 ms, heap usage 582.706 MB -> 427.603 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14656.078 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.738 ms, heap usage 748.016 MB -> 427.676 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14951.115 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 144.137 ms, heap usage 748.028 MB -> 427.027 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14676.438 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 119.460 ms, heap usage 445.210 MB -> 425.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14790.642 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.441 ms, heap usage 811.379 MB -> 422.557 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15524.717 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 112.350 ms, heap usage 743.074 MB -> 422.735 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14859.821 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.323 ms, heap usage 524.729 MB -> 422.794 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14571.928 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 121.464 ms, heap usage 743.304 MB -> 422.918 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15308.674 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 101.113 ms, heap usage 640.318 MB -> 423.450 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15224.508 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 115.256 ms, heap usage 367.239 MB -> 168.967 MB.\n====== als (apache-spark) [default], iteration 0 completed (16795.053 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.030 ms, heap usage 313.600 MB -> 193.526 MB.\n====== als (apache-spark) [default], iteration 1 completed (8469.242 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 160.654 ms, heap usage 567.578 MB -> 195.087 MB.\n====== als (apache-spark) [default], iteration 2 completed (7810.714 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 139.767 ms, heap usage 587.341 MB -> 195.721 MB.\n====== als (apache-spark) [default], iteration 3 completed (7716.502 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 148.107 ms, heap usage 575.934 MB -> 196.268 MB.\n====== als (apache-spark) [default], iteration 4 completed (8456.560 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 138.590 ms, heap usage 562.663 MB -> 196.773 MB.\n====== als (apache-spark) [default], iteration 5 completed (7488.587 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 171.344 ms, heap usage 597.601 MB -> 197.349 MB.\n====== als (apache-spark) [default], iteration 6 completed (7384.134 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 135.616 ms, heap usage 488.658 MB -> 197.755 MB.\n====== als (apache-spark) [default], iteration 7 completed (7359.408 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 152.746 ms, heap usage 489.183 MB -> 198.457 MB.\n====== als (apache-spark) [default], iteration 8 completed (7508.314 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.470 ms, heap usage 655.695 MB -> 199.178 MB.\n====== als (apache-spark) [default], iteration 9 completed (7454.432 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 145.375 ms, heap usage 711.895 MB -> 199.372 MB.\n====== als (apache-spark) [default], iteration 10 completed (7211.595 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 138.795 ms, heap usage 475.128 MB -> 199.477 MB.\n====== als (apache-spark) [default], iteration 11 completed (7347.154 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 147.556 ms, heap usage 660.950 MB -> 199.919 MB.\n====== als (apache-spark) [default], iteration 12 completed (7182.671 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 140.073 ms, heap usage 599.239 MB -> 200.165 MB.\n====== als (apache-spark) [default], iteration 13 completed (7139.441 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 149.022 ms, heap usage 616.610 MB -> 200.192 MB.\n====== als (apache-spark) [default], iteration 14 completed (7258.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 136.682 ms, heap usage 688.044 MB -> 180.638 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4066.358 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.610 ms, heap usage 316.927 MB -> 180.452 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4148.655 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 136.795 ms, heap usage 315.954 MB -> 180.450 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (3999.060 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 159.271 ms, heap usage 385.700 MB -> 180.450 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (5593.874 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 148.535 ms, heap usage 310.950 MB -> 180.448 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4518.935 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 129.875 ms, heap usage 317.387 MB -> 180.447 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (5035.730 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 217.570 ms, heap usage 333.574 MB -> 180.442 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (4791.802 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 120.895 ms, heap usage 333.967 MB -> 180.445 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3792.220 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 122.742 ms, heap usage 351.572 MB -> 180.445 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3637.750 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 124.435 ms, heap usage 349.070 MB -> 180.443 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3495.283 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.278 ms, heap usage 323.566 MB -> 180.441 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4460.536 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 152.037 ms, heap usage 311.938 MB -> 180.444 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (5249.319 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 187.858 ms, heap usage 392.440 MB -> 180.439 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (6649.413 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 180.105 ms, heap usage 309.003 MB -> 180.437 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (4989.394 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 135.383 ms, heap usage 310.937 MB -> 180.439 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (4723.376 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 228.716 ms, heap usage 431.693 MB -> 202.734 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (490.324 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 186.054 ms, heap usage 232.234 MB -> 202.766 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (234.447 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 189.773 ms, heap usage 232.769 MB -> 202.768 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (238.741 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 165.726 ms, heap usage 232.766 MB -> 202.776 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (220.271 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 189.739 ms, heap usage 233.268 MB -> 202.775 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (213.975 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 187.633 ms, heap usage 232.767 MB -> 202.773 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (192.883 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 209.639 ms, heap usage 233.267 MB -> 202.768 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (210.763 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 151.897 ms, heap usage 232.775 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (202.398 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 180.762 ms, heap usage 232.768 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (248.195 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 180.770 ms, heap usage 233.268 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (231.780 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 175.670 ms, heap usage 232.769 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (209.958 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 194.613 ms, heap usage 232.777 MB -> 202.772 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (216.474 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 168.792 ms, heap usage 232.769 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (216.346 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 191.477 ms, heap usage 232.777 MB -> 202.769 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (208.956 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 174.623 ms, heap usage 232.777 MB -> 202.772 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (288.060 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 221.026 ms, heap usage 234.269 MB -> 181.769 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (3392.961 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 164.865 ms, heap usage 257.799 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1214.271 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 164.887 ms, heap usage 247.855 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (1265.219 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 174.036 ms, heap usage 335.882 MB -> 181.691 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1232.216 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 158.082 ms, heap usage 312.882 MB -> 181.696 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1143.981 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 186.387 ms, heap usage 265.776 MB -> 181.694 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1221.751 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 168.753 ms, heap usage 308.136 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (1156.078 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 170.950 ms, heap usage 293.715 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1008.085 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 123.940 ms, heap usage 277.005 MB -> 181.697 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1180.396 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 128.815 ms, heap usage 387.449 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1100.522 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 138.025 ms, heap usage 418.405 MB -> 181.693 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (1163.782 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 148.968 ms, heap usage 358.892 MB -> 181.700 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (962.079 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 128.600 ms, heap usage 253.394 MB -> 181.701 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1149.928 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 159.056 ms, heap usage 356.386 MB -> 181.694 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1091.746 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 169.292 ms, heap usage 337.852 MB -> 181.701 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1039.176 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 182.112 ms, heap usage 289.052 MB -> 193.815 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (10460.378 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 249.691 ms, heap usage 612.346 MB -> 276.595 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2133.327 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 174.393 ms, heap usage 749.875 MB -> 277.586 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1897.189 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 201.492 ms, heap usage 737.876 MB -> 278.096 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1616.738 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 166.122 ms, heap usage 590.404 MB -> 277.782 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1343.036 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 139.030 ms, heap usage 751.047 MB -> 278.564 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1225.999 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 135.060 ms, heap usage 713.637 MB -> 278.737 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1184.178 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.394 ms, heap usage 686.914 MB -> 278.866 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1135.639 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 146.389 ms, heap usage 503.842 MB -> 278.446 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1083.766 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 132.416 ms, heap usage 584.134 MB -> 278.937 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1110.796 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.521 ms, heap usage 631.772 MB -> 279.332 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1101.737 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.096 ms, heap usage 666.927 MB -> 279.560 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1098.550 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.593 ms, heap usage 715.721 MB -> 279.954 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1379.031 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 178.612 ms, heap usage 697.585 MB -> 280.100 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1303.525 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 172.624 ms, heap usage 707.326 MB -> 280.270 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1553.553 ms) ======\n"
    },
    "gauss-mix": {
        "times": [
            19728.458,
            14356.289,
            12022.75,
            11440.226,
            12242.911,
            12824.585,
            11320.456,
            10506.174,
            10385.827,
            12137.488,
            12257.854,
            11643.554,
            12052.307,
            10565.054,
            10602.834
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 66.112 ms, heap usage 219.232 MB -> 63.892 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3770.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 131.923 ms, heap usage 270.271 MB -> 209.915 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1428.102 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.832 ms, heap usage 333.076 MB -> 209.987 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (974.435 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 135.288 ms, heap usage 420.309 MB -> 210.037 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.938 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 130.097 ms, heap usage 369.311 MB -> 210.085 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (924.911 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.548 ms, heap usage 303.927 MB -> 210.133 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (873.242 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.416 ms, heap usage 251.362 MB -> 210.180 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (854.311 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 124.763 ms, heap usage 278.475 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (917.803 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.433 ms, heap usage 444.121 MB -> 210.278 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (851.910 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 176.366 ms, heap usage 307.933 MB -> 210.326 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (910.849 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 125.593 ms, heap usage 217.555 MB -> 210.350 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.254 ms, heap usage 347.053 MB -> 210.451 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (829.834 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.518 ms, heap usage 443.548 MB -> 210.488 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (724.093 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 115.243 ms, heap usage 451.575 MB -> 210.526 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (861.012 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 118.164 ms, heap usage 350.072 MB -> 210.557 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (819.373 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 113.838 ms, heap usage 338.041 MB -> 147.047 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5528.186 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 137.408 ms, heap usage 278.418 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5389.745 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 114.700 ms, heap usage 200.458 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5437.396 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 139.571 ms, heap usage 475.410 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5360.958 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 132.303 ms, heap usage 263.798 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5816.636 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 109.987 ms, heap usage 370.392 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6508.546 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 151.519 ms, heap usage 454.843 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (6503.038 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 161.985 ms, heap usage 225.150 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (6483.786 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 155.104 ms, heap usage 211.658 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5966.197 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 114.941 ms, heap usage 491.451 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5483.775 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 111.799 ms, heap usage 348.157 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5507.539 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 108.341 ms, heap usage 370.245 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5327.190 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 113.063 ms, heap usage 388.257 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5557.026 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 110.199 ms, heap usage 417.705 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5562.068 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 126.001 ms, heap usage 351.790 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6050.139 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.904 ms, heap usage 386.999 MB -> 98.211 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (849.676 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 92.825 ms, heap usage 251.209 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (293.931 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 81.249 ms, heap usage 241.124 MB -> 98.578 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (226.956 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 91.506 ms, heap usage 241.078 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (191.729 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 78.792 ms, heap usage 241.079 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (218.258 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 74.230 ms, heap usage 242.048 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (144.150 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.946 ms, heap usage 241.906 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (210.382 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 71.898 ms, heap usage 242.050 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (186.636 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 69.225 ms, heap usage 242.269 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (151.402 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.216 ms, heap usage 242.392 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (141.084 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.568 ms, heap usage 241.853 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (154.671 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 69.023 ms, heap usage 241.879 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (160.571 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 69.450 ms, heap usage 241.961 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (144.086 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.026 ms, heap usage 242.454 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (164.946 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 82.038 ms, heap usage 241.950 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (156.703 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 165.245 ms, heap usage 123.756 MB -> 100.768 MB.\n====== db-shootout (database) [default], iteration 0 completed (8279.994 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.136 ms, heap usage 156.590 MB -> 107.747 MB.\n====== db-shootout (database) [default], iteration 1 completed (6864.949 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 75.858 ms, heap usage 407.555 MB -> 110.498 MB.\n====== db-shootout (database) [default], iteration 2 completed (8133.764 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 104.697 ms, heap usage 482.135 MB -> 111.678 MB.\n====== db-shootout (database) [default], iteration 3 completed (7257.953 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 83.316 ms, heap usage 481.700 MB -> 109.188 MB.\n====== db-shootout (database) [default], iteration 4 completed (8069.649 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.265 ms, heap usage 294.603 MB -> 109.495 MB.\n====== db-shootout (database) [default], iteration 5 completed (7054.228 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 68.851 ms, heap usage 202.466 MB -> 108.491 MB.\n====== db-shootout (database) [default], iteration 6 completed (7215.014 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 70.301 ms, heap usage 185.356 MB -> 112.420 MB.\n====== db-shootout (database) [default], iteration 7 completed (7645.298 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 96.708 ms, heap usage 408.179 MB -> 112.395 MB.\n====== db-shootout (database) [default], iteration 8 completed (7159.599 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 72.654 ms, heap usage 260.488 MB -> 111.217 MB.\n====== db-shootout (database) [default], iteration 9 completed (8102.269 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 93.215 ms, heap usage 247.067 MB -> 111.793 MB.\n====== db-shootout (database) [default], iteration 10 completed (8201.659 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 88.084 ms, heap usage 196.019 MB -> 108.876 MB.\n====== db-shootout (database) [default], iteration 11 completed (8928.872 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 89.395 ms, heap usage 148.929 MB -> 108.561 MB.\n====== db-shootout (database) [default], iteration 12 completed (9484.912 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 76.072 ms, heap usage 175.761 MB -> 108.269 MB.\n====== db-shootout (database) [default], iteration 13 completed (9352.132 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 82.217 ms, heap usage 204.503 MB -> 108.293 MB.\n====== db-shootout (database) [default], iteration 14 completed (7825.940 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35547 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 104.455 ms, heap usage 320.432 MB -> 112.082 MB.\n====== finagle-http (web) [default], iteration 0 completed (20069.884 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 121.654 ms, heap usage 326.481 MB -> 115.826 MB.\n====== finagle-http (web) [default], iteration 1 completed (16009.480 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 90.148 ms, heap usage 243.494 MB -> 115.849 MB.\n====== finagle-http (web) [default], iteration 2 completed (13975.211 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 107.935 ms, heap usage 232.462 MB -> 115.898 MB.\n====== finagle-http (web) [default], iteration 3 completed (11999.340 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 112.360 ms, heap usage 219.221 MB -> 115.906 MB.\n====== finagle-http (web) [default], iteration 4 completed (8709.573 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 80.389 ms, heap usage 209.710 MB -> 115.897 MB.\n====== finagle-http (web) [default], iteration 5 completed (7600.006 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 90.046 ms, heap usage 204.281 MB -> 117.849 MB.\n====== finagle-http (web) [default], iteration 6 completed (7535.088 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 127.775 ms, heap usage 194.577 MB -> 115.979 MB.\n====== finagle-http (web) [default], iteration 7 completed (6782.047 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 90.278 ms, heap usage 187.280 MB -> 115.910 MB.\n====== finagle-http (web) [default], iteration 8 completed (6265.913 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 70.116 ms, heap usage 178.110 MB -> 115.973 MB.\n====== finagle-http (web) [default], iteration 9 completed (4642.991 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 80.779 ms, heap usage 323.567 MB -> 115.970 MB.\n====== finagle-http (web) [default], iteration 10 completed (4145.819 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 86.020 ms, heap usage 307.268 MB -> 116.255 MB.\n====== finagle-http (web) [default], iteration 11 completed (3694.216 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 84.455 ms, heap usage 302.078 MB -> 115.982 MB.\n====== finagle-http (web) [default], iteration 12 completed (3721.920 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 75.293 ms, heap usage 297.157 MB -> 115.974 MB.\n====== finagle-http (web) [default], iteration 13 completed (3767.458 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 79.429 ms, heap usage 296.561 MB -> 115.986 MB.\n====== finagle-http (web) [default], iteration 14 completed (3686.511 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.883 ms, heap usage 311.874 MB -> 117.016 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14567.734 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 91.924 ms, heap usage 748.162 MB -> 117.250 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (11914.090 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 92.956 ms, heap usage 617.357 MB -> 113.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12046.703 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 87.006 ms, heap usage 625.175 MB -> 113.546 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12159.038 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.203 ms, heap usage 653.120 MB -> 113.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (11806.913 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 76.041 ms, heap usage 659.988 MB -> 113.544 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12119.651 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 86.933 ms, heap usage 630.908 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12011.323 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 76.199 ms, heap usage 641.149 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12029.477 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 87.864 ms, heap usage 643.745 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11818.715 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 72.649 ms, heap usage 644.929 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12661.824 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 71.217 ms, heap usage 707.143 MB -> 113.559 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12445.619 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 90.163 ms, heap usage 614.914 MB -> 113.567 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11921.951 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 91.365 ms, heap usage 628.943 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11610.642 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 86.133 ms, heap usage 641.617 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11968.551 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 89.380 ms, heap usage 631.059 MB -> 113.569 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12458.430 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.062 ms, heap usage 219.995 MB -> 127.548 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8456.478 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.690 ms, heap usage 264.960 MB -> 160.178 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (1975.817 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 96.778 ms, heap usage 491.689 MB -> 177.170 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1490.638 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.246 ms, heap usage 505.994 MB -> 171.820 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1466.459 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.026 ms, heap usage 450.661 MB -> 161.068 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1370.440 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.097 ms, heap usage 468.970 MB -> 161.284 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1330.634 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.589 ms, heap usage 518.427 MB -> 161.493 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1346.798 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 96.884 ms, heap usage 523.910 MB -> 161.699 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1440.812 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 103.228 ms, heap usage 529.346 MB -> 161.851 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1327.374 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 105.044 ms, heap usage 469.720 MB -> 161.981 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1294.957 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 100.316 ms, heap usage 501.456 MB -> 162.111 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1323.161 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.972 ms, heap usage 449.606 MB -> 162.225 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1316.463 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.494 ms, heap usage 482.770 MB -> 162.347 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1251.563 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.167 ms, heap usage 481.748 MB -> 162.468 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1258.373 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 100.073 ms, heap usage 488.726 MB -> 162.584 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1197.805 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 101.937 ms, heap usage 483.495 MB -> 142.934 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 578\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 46\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 578\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 16\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 21\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 118.34 op/s (118.34 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.659 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.171 ms, heap usage 432.717 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 40\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 578\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 21\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 10\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 326.53 op/s (326.53 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1502.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 119.563 ms, heap usage 432.268 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 444\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 578\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 15\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 21\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 10\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 512.82 op/s (512.82 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.766 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 109.500 ms, heap usage 435.750 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 385\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 578\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 17\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 43\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 10\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 806.05 op/s (806.05 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1328.547 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 97.208 ms, heap usage 451.265 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 578\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 17\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 43\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 10\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1023.02 op/s (1023.02 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1305.632 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 96.350 ms, heap usage 514.240 MB -> 143.197 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 578\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 15\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 17\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 43\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 10\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1242.867 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 101.166 ms, heap usage 508.976 MB -> 143.205 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 578\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 17\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 43\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 10\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1497.33 op/s (1497.33 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1258.665 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 99.032 ms, heap usage 512.234 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 364\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 578\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 17\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 43\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 10\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1697.61 op/s (1697.61 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1268.334 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 95.423 ms, heap usage 512.003 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 578\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 17\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 43\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 10\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1978.02 op/s (1978.02 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1237.745 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 103.146 ms, heap usage 509.925 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 578\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 17\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 43\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 11\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2150.54 op/s (2150.54 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.896 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 126.573 ms, heap usage 512.999 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 372\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 578\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 17\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 43\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 16\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2321.90 op/s (2321.90 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1307.247 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 98.357 ms, heap usage 512.777 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 431\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 578\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 15\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 17\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 43\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2181.82 op/s (2181.82 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1325.232 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 109.477 ms, heap usage 505.517 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 487\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 578\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 15\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 17\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 43\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2084.17 op/s (2084.17 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1394.190 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 139.535 ms, heap usage 506.758 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 34\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 578\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 15\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 17\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 43\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2901.55 op/s (2901.55 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1658.631 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 127.460 ms, heap usage 508.477 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 407\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 578\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 15\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 17\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 43\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2803.74 op/s (2803.74 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1491.065 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.885 ms, heap usage 453.988 MB -> 154.499 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27755.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.554 ms, heap usage 547.458 MB -> 430.313 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15259.872 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 125.316 ms, heap usage 449.474 MB -> 430.526 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15122.779 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 141.624 ms, heap usage 708.754 MB -> 430.655 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15373.306 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 128.350 ms, heap usage 441.660 MB -> 430.713 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15608.687 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 139.383 ms, heap usage 449.578 MB -> 430.640 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14679.610 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.195 ms, heap usage 582.706 MB -> 427.603 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14656.078 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.738 ms, heap usage 748.016 MB -> 427.676 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14951.115 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 144.137 ms, heap usage 748.028 MB -> 427.027 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14676.438 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 119.460 ms, heap usage 445.210 MB -> 425.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14790.642 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.441 ms, heap usage 811.379 MB -> 422.557 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15524.717 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 112.350 ms, heap usage 743.074 MB -> 422.735 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14859.821 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.323 ms, heap usage 524.729 MB -> 422.794 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14571.928 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 121.464 ms, heap usage 743.304 MB -> 422.918 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15308.674 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 101.113 ms, heap usage 640.318 MB -> 423.450 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15224.508 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 115.256 ms, heap usage 367.239 MB -> 168.967 MB.\n====== als (apache-spark) [default], iteration 0 completed (16795.053 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.030 ms, heap usage 313.600 MB -> 193.526 MB.\n====== als (apache-spark) [default], iteration 1 completed (8469.242 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 160.654 ms, heap usage 567.578 MB -> 195.087 MB.\n====== als (apache-spark) [default], iteration 2 completed (7810.714 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 139.767 ms, heap usage 587.341 MB -> 195.721 MB.\n====== als (apache-spark) [default], iteration 3 completed (7716.502 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 148.107 ms, heap usage 575.934 MB -> 196.268 MB.\n====== als (apache-spark) [default], iteration 4 completed (8456.560 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 138.590 ms, heap usage 562.663 MB -> 196.773 MB.\n====== als (apache-spark) [default], iteration 5 completed (7488.587 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 171.344 ms, heap usage 597.601 MB -> 197.349 MB.\n====== als (apache-spark) [default], iteration 6 completed (7384.134 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 135.616 ms, heap usage 488.658 MB -> 197.755 MB.\n====== als (apache-spark) [default], iteration 7 completed (7359.408 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 152.746 ms, heap usage 489.183 MB -> 198.457 MB.\n====== als (apache-spark) [default], iteration 8 completed (7508.314 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.470 ms, heap usage 655.695 MB -> 199.178 MB.\n====== als (apache-spark) [default], iteration 9 completed (7454.432 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 145.375 ms, heap usage 711.895 MB -> 199.372 MB.\n====== als (apache-spark) [default], iteration 10 completed (7211.595 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 138.795 ms, heap usage 475.128 MB -> 199.477 MB.\n====== als (apache-spark) [default], iteration 11 completed (7347.154 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 147.556 ms, heap usage 660.950 MB -> 199.919 MB.\n====== als (apache-spark) [default], iteration 12 completed (7182.671 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 140.073 ms, heap usage 599.239 MB -> 200.165 MB.\n====== als (apache-spark) [default], iteration 13 completed (7139.441 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 149.022 ms, heap usage 616.610 MB -> 200.192 MB.\n====== als (apache-spark) [default], iteration 14 completed (7258.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 136.682 ms, heap usage 688.044 MB -> 180.638 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4066.358 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.610 ms, heap usage 316.927 MB -> 180.452 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4148.655 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 136.795 ms, heap usage 315.954 MB -> 180.450 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (3999.060 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 159.271 ms, heap usage 385.700 MB -> 180.450 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (5593.874 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 148.535 ms, heap usage 310.950 MB -> 180.448 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4518.935 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 129.875 ms, heap usage 317.387 MB -> 180.447 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (5035.730 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 217.570 ms, heap usage 333.574 MB -> 180.442 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (4791.802 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 120.895 ms, heap usage 333.967 MB -> 180.445 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3792.220 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 122.742 ms, heap usage 351.572 MB -> 180.445 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3637.750 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 124.435 ms, heap usage 349.070 MB -> 180.443 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3495.283 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.278 ms, heap usage 323.566 MB -> 180.441 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4460.536 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 152.037 ms, heap usage 311.938 MB -> 180.444 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (5249.319 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 187.858 ms, heap usage 392.440 MB -> 180.439 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (6649.413 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 180.105 ms, heap usage 309.003 MB -> 180.437 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (4989.394 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 135.383 ms, heap usage 310.937 MB -> 180.439 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (4723.376 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 228.716 ms, heap usage 431.693 MB -> 202.734 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (490.324 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 186.054 ms, heap usage 232.234 MB -> 202.766 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (234.447 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 189.773 ms, heap usage 232.769 MB -> 202.768 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (238.741 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 165.726 ms, heap usage 232.766 MB -> 202.776 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (220.271 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 189.739 ms, heap usage 233.268 MB -> 202.775 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (213.975 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 187.633 ms, heap usage 232.767 MB -> 202.773 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (192.883 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 209.639 ms, heap usage 233.267 MB -> 202.768 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (210.763 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 151.897 ms, heap usage 232.775 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (202.398 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 180.762 ms, heap usage 232.768 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (248.195 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 180.770 ms, heap usage 233.268 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (231.780 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 175.670 ms, heap usage 232.769 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (209.958 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 194.613 ms, heap usage 232.777 MB -> 202.772 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (216.474 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 168.792 ms, heap usage 232.769 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (216.346 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 191.477 ms, heap usage 232.777 MB -> 202.769 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (208.956 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 174.623 ms, heap usage 232.777 MB -> 202.772 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (288.060 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 221.026 ms, heap usage 234.269 MB -> 181.769 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (3392.961 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 164.865 ms, heap usage 257.799 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1214.271 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 164.887 ms, heap usage 247.855 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (1265.219 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 174.036 ms, heap usage 335.882 MB -> 181.691 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1232.216 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 158.082 ms, heap usage 312.882 MB -> 181.696 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1143.981 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 186.387 ms, heap usage 265.776 MB -> 181.694 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1221.751 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 168.753 ms, heap usage 308.136 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (1156.078 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 170.950 ms, heap usage 293.715 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1008.085 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 123.940 ms, heap usage 277.005 MB -> 181.697 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1180.396 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 128.815 ms, heap usage 387.449 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1100.522 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 138.025 ms, heap usage 418.405 MB -> 181.693 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (1163.782 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 148.968 ms, heap usage 358.892 MB -> 181.700 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (962.079 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 128.600 ms, heap usage 253.394 MB -> 181.701 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1149.928 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 159.056 ms, heap usage 356.386 MB -> 181.694 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1091.746 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 169.292 ms, heap usage 337.852 MB -> 181.701 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1039.176 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 182.112 ms, heap usage 289.052 MB -> 193.815 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (10460.378 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 249.691 ms, heap usage 612.346 MB -> 276.595 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2133.327 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 174.393 ms, heap usage 749.875 MB -> 277.586 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1897.189 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 201.492 ms, heap usage 737.876 MB -> 278.096 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1616.738 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 166.122 ms, heap usage 590.404 MB -> 277.782 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1343.036 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 139.030 ms, heap usage 751.047 MB -> 278.564 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1225.999 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 135.060 ms, heap usage 713.637 MB -> 278.737 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1184.178 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.394 ms, heap usage 686.914 MB -> 278.866 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1135.639 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 146.389 ms, heap usage 503.842 MB -> 278.446 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1083.766 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 132.416 ms, heap usage 584.134 MB -> 278.937 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1110.796 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.521 ms, heap usage 631.772 MB -> 279.332 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1101.737 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.096 ms, heap usage 666.927 MB -> 279.560 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1098.550 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.593 ms, heap usage 715.721 MB -> 279.954 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1379.031 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 178.612 ms, heap usage 697.585 MB -> 280.100 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1303.525 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 172.624 ms, heap usage 707.326 MB -> 280.270 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1553.553 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 253.674 ms, heap usage 628.586 MB -> 211.397 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (19728.458 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 195.400 ms, heap usage 633.004 MB -> 218.458 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (14356.289 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 258.367 ms, heap usage 584.346 MB -> 220.058 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (12022.750 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 206.254 ms, heap usage 478.870 MB -> 221.663 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (11440.226 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 205.173 ms, heap usage 272.439 MB -> 222.510 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (12242.911 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 192.824 ms, heap usage 620.422 MB -> 222.653 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (12824.585 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 158.309 ms, heap usage 403.358 MB -> 222.852 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (11320.456 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.868 ms, heap usage 814.237 MB -> 222.896 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (10506.174 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.074 ms, heap usage 472.161 MB -> 223.041 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (10385.827 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 152.012 ms, heap usage 809.084 MB -> 222.968 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (12137.488 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 254.083 ms, heap usage 680.017 MB -> 222.753 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (12257.854 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 175.187 ms, heap usage 270.903 MB -> 222.887 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (11643.554 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 176.459 ms, heap usage 427.607 MB -> 222.738 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (12052.307 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.744 ms, heap usage 733.505 MB -> 222.977 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10565.054 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 173.248 ms, heap usage 293.330 MB -> 222.794 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (10602.834 ms) ======\n"
    },
    "mnemonics": {
        "times": [
            4706.707,
            4756.493,
            4793.19,
            5004.463,
            5170.093,
            4603.909,
            4763.569,
            4720.227,
            4754.002,
            4828.89,
            4768.666,
            4472.817,
            4392.084,
            4121.987,
            4847.513
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 66.112 ms, heap usage 219.232 MB -> 63.892 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3770.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 131.923 ms, heap usage 270.271 MB -> 209.915 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1428.102 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.832 ms, heap usage 333.076 MB -> 209.987 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (974.435 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 135.288 ms, heap usage 420.309 MB -> 210.037 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.938 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 130.097 ms, heap usage 369.311 MB -> 210.085 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (924.911 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.548 ms, heap usage 303.927 MB -> 210.133 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (873.242 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.416 ms, heap usage 251.362 MB -> 210.180 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (854.311 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 124.763 ms, heap usage 278.475 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (917.803 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.433 ms, heap usage 444.121 MB -> 210.278 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (851.910 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 176.366 ms, heap usage 307.933 MB -> 210.326 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (910.849 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 125.593 ms, heap usage 217.555 MB -> 210.350 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.254 ms, heap usage 347.053 MB -> 210.451 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (829.834 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.518 ms, heap usage 443.548 MB -> 210.488 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (724.093 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 115.243 ms, heap usage 451.575 MB -> 210.526 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (861.012 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 118.164 ms, heap usage 350.072 MB -> 210.557 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (819.373 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 113.838 ms, heap usage 338.041 MB -> 147.047 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5528.186 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 137.408 ms, heap usage 278.418 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5389.745 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 114.700 ms, heap usage 200.458 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5437.396 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 139.571 ms, heap usage 475.410 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5360.958 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 132.303 ms, heap usage 263.798 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5816.636 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 109.987 ms, heap usage 370.392 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6508.546 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 151.519 ms, heap usage 454.843 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (6503.038 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 161.985 ms, heap usage 225.150 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (6483.786 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 155.104 ms, heap usage 211.658 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5966.197 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 114.941 ms, heap usage 491.451 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5483.775 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 111.799 ms, heap usage 348.157 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5507.539 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 108.341 ms, heap usage 370.245 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5327.190 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 113.063 ms, heap usage 388.257 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5557.026 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 110.199 ms, heap usage 417.705 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5562.068 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 126.001 ms, heap usage 351.790 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6050.139 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.904 ms, heap usage 386.999 MB -> 98.211 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (849.676 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 92.825 ms, heap usage 251.209 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (293.931 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 81.249 ms, heap usage 241.124 MB -> 98.578 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (226.956 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 91.506 ms, heap usage 241.078 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (191.729 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 78.792 ms, heap usage 241.079 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (218.258 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 74.230 ms, heap usage 242.048 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (144.150 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.946 ms, heap usage 241.906 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (210.382 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 71.898 ms, heap usage 242.050 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (186.636 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 69.225 ms, heap usage 242.269 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (151.402 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.216 ms, heap usage 242.392 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (141.084 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.568 ms, heap usage 241.853 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (154.671 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 69.023 ms, heap usage 241.879 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (160.571 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 69.450 ms, heap usage 241.961 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (144.086 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.026 ms, heap usage 242.454 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (164.946 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 82.038 ms, heap usage 241.950 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (156.703 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 165.245 ms, heap usage 123.756 MB -> 100.768 MB.\n====== db-shootout (database) [default], iteration 0 completed (8279.994 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.136 ms, heap usage 156.590 MB -> 107.747 MB.\n====== db-shootout (database) [default], iteration 1 completed (6864.949 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 75.858 ms, heap usage 407.555 MB -> 110.498 MB.\n====== db-shootout (database) [default], iteration 2 completed (8133.764 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 104.697 ms, heap usage 482.135 MB -> 111.678 MB.\n====== db-shootout (database) [default], iteration 3 completed (7257.953 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 83.316 ms, heap usage 481.700 MB -> 109.188 MB.\n====== db-shootout (database) [default], iteration 4 completed (8069.649 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.265 ms, heap usage 294.603 MB -> 109.495 MB.\n====== db-shootout (database) [default], iteration 5 completed (7054.228 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 68.851 ms, heap usage 202.466 MB -> 108.491 MB.\n====== db-shootout (database) [default], iteration 6 completed (7215.014 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 70.301 ms, heap usage 185.356 MB -> 112.420 MB.\n====== db-shootout (database) [default], iteration 7 completed (7645.298 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 96.708 ms, heap usage 408.179 MB -> 112.395 MB.\n====== db-shootout (database) [default], iteration 8 completed (7159.599 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 72.654 ms, heap usage 260.488 MB -> 111.217 MB.\n====== db-shootout (database) [default], iteration 9 completed (8102.269 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 93.215 ms, heap usage 247.067 MB -> 111.793 MB.\n====== db-shootout (database) [default], iteration 10 completed (8201.659 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 88.084 ms, heap usage 196.019 MB -> 108.876 MB.\n====== db-shootout (database) [default], iteration 11 completed (8928.872 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 89.395 ms, heap usage 148.929 MB -> 108.561 MB.\n====== db-shootout (database) [default], iteration 12 completed (9484.912 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 76.072 ms, heap usage 175.761 MB -> 108.269 MB.\n====== db-shootout (database) [default], iteration 13 completed (9352.132 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 82.217 ms, heap usage 204.503 MB -> 108.293 MB.\n====== db-shootout (database) [default], iteration 14 completed (7825.940 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35547 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 104.455 ms, heap usage 320.432 MB -> 112.082 MB.\n====== finagle-http (web) [default], iteration 0 completed (20069.884 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 121.654 ms, heap usage 326.481 MB -> 115.826 MB.\n====== finagle-http (web) [default], iteration 1 completed (16009.480 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 90.148 ms, heap usage 243.494 MB -> 115.849 MB.\n====== finagle-http (web) [default], iteration 2 completed (13975.211 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 107.935 ms, heap usage 232.462 MB -> 115.898 MB.\n====== finagle-http (web) [default], iteration 3 completed (11999.340 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 112.360 ms, heap usage 219.221 MB -> 115.906 MB.\n====== finagle-http (web) [default], iteration 4 completed (8709.573 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 80.389 ms, heap usage 209.710 MB -> 115.897 MB.\n====== finagle-http (web) [default], iteration 5 completed (7600.006 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 90.046 ms, heap usage 204.281 MB -> 117.849 MB.\n====== finagle-http (web) [default], iteration 6 completed (7535.088 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 127.775 ms, heap usage 194.577 MB -> 115.979 MB.\n====== finagle-http (web) [default], iteration 7 completed (6782.047 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 90.278 ms, heap usage 187.280 MB -> 115.910 MB.\n====== finagle-http (web) [default], iteration 8 completed (6265.913 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 70.116 ms, heap usage 178.110 MB -> 115.973 MB.\n====== finagle-http (web) [default], iteration 9 completed (4642.991 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 80.779 ms, heap usage 323.567 MB -> 115.970 MB.\n====== finagle-http (web) [default], iteration 10 completed (4145.819 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 86.020 ms, heap usage 307.268 MB -> 116.255 MB.\n====== finagle-http (web) [default], iteration 11 completed (3694.216 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 84.455 ms, heap usage 302.078 MB -> 115.982 MB.\n====== finagle-http (web) [default], iteration 12 completed (3721.920 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 75.293 ms, heap usage 297.157 MB -> 115.974 MB.\n====== finagle-http (web) [default], iteration 13 completed (3767.458 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 79.429 ms, heap usage 296.561 MB -> 115.986 MB.\n====== finagle-http (web) [default], iteration 14 completed (3686.511 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.883 ms, heap usage 311.874 MB -> 117.016 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14567.734 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 91.924 ms, heap usage 748.162 MB -> 117.250 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (11914.090 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 92.956 ms, heap usage 617.357 MB -> 113.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12046.703 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 87.006 ms, heap usage 625.175 MB -> 113.546 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12159.038 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.203 ms, heap usage 653.120 MB -> 113.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (11806.913 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 76.041 ms, heap usage 659.988 MB -> 113.544 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12119.651 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 86.933 ms, heap usage 630.908 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12011.323 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 76.199 ms, heap usage 641.149 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12029.477 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 87.864 ms, heap usage 643.745 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11818.715 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 72.649 ms, heap usage 644.929 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12661.824 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 71.217 ms, heap usage 707.143 MB -> 113.559 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12445.619 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 90.163 ms, heap usage 614.914 MB -> 113.567 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11921.951 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 91.365 ms, heap usage 628.943 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11610.642 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 86.133 ms, heap usage 641.617 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11968.551 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 89.380 ms, heap usage 631.059 MB -> 113.569 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12458.430 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.062 ms, heap usage 219.995 MB -> 127.548 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8456.478 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.690 ms, heap usage 264.960 MB -> 160.178 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (1975.817 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 96.778 ms, heap usage 491.689 MB -> 177.170 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1490.638 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.246 ms, heap usage 505.994 MB -> 171.820 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1466.459 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.026 ms, heap usage 450.661 MB -> 161.068 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1370.440 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.097 ms, heap usage 468.970 MB -> 161.284 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1330.634 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.589 ms, heap usage 518.427 MB -> 161.493 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1346.798 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 96.884 ms, heap usage 523.910 MB -> 161.699 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1440.812 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 103.228 ms, heap usage 529.346 MB -> 161.851 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1327.374 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 105.044 ms, heap usage 469.720 MB -> 161.981 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1294.957 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 100.316 ms, heap usage 501.456 MB -> 162.111 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1323.161 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.972 ms, heap usage 449.606 MB -> 162.225 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1316.463 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.494 ms, heap usage 482.770 MB -> 162.347 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1251.563 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.167 ms, heap usage 481.748 MB -> 162.468 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1258.373 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 100.073 ms, heap usage 488.726 MB -> 162.584 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1197.805 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 101.937 ms, heap usage 483.495 MB -> 142.934 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 578\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 46\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 578\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 16\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 21\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 118.34 op/s (118.34 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.659 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.171 ms, heap usage 432.717 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 40\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 578\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 21\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 10\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 326.53 op/s (326.53 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1502.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 119.563 ms, heap usage 432.268 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 444\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 578\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 15\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 21\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 10\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 512.82 op/s (512.82 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.766 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 109.500 ms, heap usage 435.750 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 385\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 578\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 17\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 43\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 10\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 806.05 op/s (806.05 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1328.547 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 97.208 ms, heap usage 451.265 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 578\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 17\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 43\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 10\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1023.02 op/s (1023.02 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1305.632 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 96.350 ms, heap usage 514.240 MB -> 143.197 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 578\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 15\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 17\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 43\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 10\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1242.867 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 101.166 ms, heap usage 508.976 MB -> 143.205 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 578\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 17\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 43\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 10\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1497.33 op/s (1497.33 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1258.665 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 99.032 ms, heap usage 512.234 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 364\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 578\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 17\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 43\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 10\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1697.61 op/s (1697.61 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1268.334 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 95.423 ms, heap usage 512.003 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 578\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 17\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 43\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 10\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1978.02 op/s (1978.02 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1237.745 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 103.146 ms, heap usage 509.925 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 578\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 17\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 43\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 11\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2150.54 op/s (2150.54 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.896 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 126.573 ms, heap usage 512.999 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 372\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 578\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 17\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 43\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 16\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2321.90 op/s (2321.90 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1307.247 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 98.357 ms, heap usage 512.777 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 431\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 578\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 15\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 17\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 43\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2181.82 op/s (2181.82 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1325.232 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 109.477 ms, heap usage 505.517 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 487\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 578\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 15\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 17\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 43\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2084.17 op/s (2084.17 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1394.190 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 139.535 ms, heap usage 506.758 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 34\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 578\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 15\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 17\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 43\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2901.55 op/s (2901.55 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1658.631 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 127.460 ms, heap usage 508.477 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 407\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 578\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 15\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 17\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 43\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2803.74 op/s (2803.74 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1491.065 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.885 ms, heap usage 453.988 MB -> 154.499 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27755.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.554 ms, heap usage 547.458 MB -> 430.313 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15259.872 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 125.316 ms, heap usage 449.474 MB -> 430.526 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15122.779 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 141.624 ms, heap usage 708.754 MB -> 430.655 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15373.306 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 128.350 ms, heap usage 441.660 MB -> 430.713 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15608.687 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 139.383 ms, heap usage 449.578 MB -> 430.640 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14679.610 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.195 ms, heap usage 582.706 MB -> 427.603 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14656.078 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.738 ms, heap usage 748.016 MB -> 427.676 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14951.115 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 144.137 ms, heap usage 748.028 MB -> 427.027 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14676.438 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 119.460 ms, heap usage 445.210 MB -> 425.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14790.642 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.441 ms, heap usage 811.379 MB -> 422.557 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15524.717 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 112.350 ms, heap usage 743.074 MB -> 422.735 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14859.821 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.323 ms, heap usage 524.729 MB -> 422.794 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14571.928 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 121.464 ms, heap usage 743.304 MB -> 422.918 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15308.674 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 101.113 ms, heap usage 640.318 MB -> 423.450 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15224.508 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 115.256 ms, heap usage 367.239 MB -> 168.967 MB.\n====== als (apache-spark) [default], iteration 0 completed (16795.053 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.030 ms, heap usage 313.600 MB -> 193.526 MB.\n====== als (apache-spark) [default], iteration 1 completed (8469.242 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 160.654 ms, heap usage 567.578 MB -> 195.087 MB.\n====== als (apache-spark) [default], iteration 2 completed (7810.714 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 139.767 ms, heap usage 587.341 MB -> 195.721 MB.\n====== als (apache-spark) [default], iteration 3 completed (7716.502 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 148.107 ms, heap usage 575.934 MB -> 196.268 MB.\n====== als (apache-spark) [default], iteration 4 completed (8456.560 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 138.590 ms, heap usage 562.663 MB -> 196.773 MB.\n====== als (apache-spark) [default], iteration 5 completed (7488.587 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 171.344 ms, heap usage 597.601 MB -> 197.349 MB.\n====== als (apache-spark) [default], iteration 6 completed (7384.134 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 135.616 ms, heap usage 488.658 MB -> 197.755 MB.\n====== als (apache-spark) [default], iteration 7 completed (7359.408 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 152.746 ms, heap usage 489.183 MB -> 198.457 MB.\n====== als (apache-spark) [default], iteration 8 completed (7508.314 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.470 ms, heap usage 655.695 MB -> 199.178 MB.\n====== als (apache-spark) [default], iteration 9 completed (7454.432 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 145.375 ms, heap usage 711.895 MB -> 199.372 MB.\n====== als (apache-spark) [default], iteration 10 completed (7211.595 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 138.795 ms, heap usage 475.128 MB -> 199.477 MB.\n====== als (apache-spark) [default], iteration 11 completed (7347.154 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 147.556 ms, heap usage 660.950 MB -> 199.919 MB.\n====== als (apache-spark) [default], iteration 12 completed (7182.671 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 140.073 ms, heap usage 599.239 MB -> 200.165 MB.\n====== als (apache-spark) [default], iteration 13 completed (7139.441 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 149.022 ms, heap usage 616.610 MB -> 200.192 MB.\n====== als (apache-spark) [default], iteration 14 completed (7258.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 136.682 ms, heap usage 688.044 MB -> 180.638 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4066.358 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.610 ms, heap usage 316.927 MB -> 180.452 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4148.655 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 136.795 ms, heap usage 315.954 MB -> 180.450 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (3999.060 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 159.271 ms, heap usage 385.700 MB -> 180.450 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (5593.874 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 148.535 ms, heap usage 310.950 MB -> 180.448 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4518.935 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 129.875 ms, heap usage 317.387 MB -> 180.447 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (5035.730 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 217.570 ms, heap usage 333.574 MB -> 180.442 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (4791.802 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 120.895 ms, heap usage 333.967 MB -> 180.445 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3792.220 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 122.742 ms, heap usage 351.572 MB -> 180.445 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3637.750 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 124.435 ms, heap usage 349.070 MB -> 180.443 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3495.283 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.278 ms, heap usage 323.566 MB -> 180.441 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4460.536 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 152.037 ms, heap usage 311.938 MB -> 180.444 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (5249.319 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 187.858 ms, heap usage 392.440 MB -> 180.439 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (6649.413 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 180.105 ms, heap usage 309.003 MB -> 180.437 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (4989.394 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 135.383 ms, heap usage 310.937 MB -> 180.439 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (4723.376 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 228.716 ms, heap usage 431.693 MB -> 202.734 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (490.324 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 186.054 ms, heap usage 232.234 MB -> 202.766 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (234.447 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 189.773 ms, heap usage 232.769 MB -> 202.768 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (238.741 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 165.726 ms, heap usage 232.766 MB -> 202.776 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (220.271 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 189.739 ms, heap usage 233.268 MB -> 202.775 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (213.975 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 187.633 ms, heap usage 232.767 MB -> 202.773 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (192.883 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 209.639 ms, heap usage 233.267 MB -> 202.768 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (210.763 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 151.897 ms, heap usage 232.775 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (202.398 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 180.762 ms, heap usage 232.768 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (248.195 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 180.770 ms, heap usage 233.268 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (231.780 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 175.670 ms, heap usage 232.769 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (209.958 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 194.613 ms, heap usage 232.777 MB -> 202.772 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (216.474 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 168.792 ms, heap usage 232.769 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (216.346 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 191.477 ms, heap usage 232.777 MB -> 202.769 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (208.956 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 174.623 ms, heap usage 232.777 MB -> 202.772 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (288.060 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 221.026 ms, heap usage 234.269 MB -> 181.769 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (3392.961 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 164.865 ms, heap usage 257.799 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1214.271 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 164.887 ms, heap usage 247.855 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (1265.219 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 174.036 ms, heap usage 335.882 MB -> 181.691 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1232.216 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 158.082 ms, heap usage 312.882 MB -> 181.696 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1143.981 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 186.387 ms, heap usage 265.776 MB -> 181.694 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1221.751 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 168.753 ms, heap usage 308.136 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (1156.078 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 170.950 ms, heap usage 293.715 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1008.085 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 123.940 ms, heap usage 277.005 MB -> 181.697 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1180.396 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 128.815 ms, heap usage 387.449 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1100.522 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 138.025 ms, heap usage 418.405 MB -> 181.693 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (1163.782 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 148.968 ms, heap usage 358.892 MB -> 181.700 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (962.079 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 128.600 ms, heap usage 253.394 MB -> 181.701 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1149.928 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 159.056 ms, heap usage 356.386 MB -> 181.694 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1091.746 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 169.292 ms, heap usage 337.852 MB -> 181.701 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1039.176 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 182.112 ms, heap usage 289.052 MB -> 193.815 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (10460.378 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 249.691 ms, heap usage 612.346 MB -> 276.595 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2133.327 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 174.393 ms, heap usage 749.875 MB -> 277.586 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1897.189 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 201.492 ms, heap usage 737.876 MB -> 278.096 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1616.738 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 166.122 ms, heap usage 590.404 MB -> 277.782 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1343.036 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 139.030 ms, heap usage 751.047 MB -> 278.564 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1225.999 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 135.060 ms, heap usage 713.637 MB -> 278.737 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1184.178 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.394 ms, heap usage 686.914 MB -> 278.866 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1135.639 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 146.389 ms, heap usage 503.842 MB -> 278.446 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1083.766 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 132.416 ms, heap usage 584.134 MB -> 278.937 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1110.796 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.521 ms, heap usage 631.772 MB -> 279.332 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1101.737 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.096 ms, heap usage 666.927 MB -> 279.560 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1098.550 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.593 ms, heap usage 715.721 MB -> 279.954 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1379.031 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 178.612 ms, heap usage 697.585 MB -> 280.100 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1303.525 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 172.624 ms, heap usage 707.326 MB -> 280.270 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1553.553 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 253.674 ms, heap usage 628.586 MB -> 211.397 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (19728.458 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 195.400 ms, heap usage 633.004 MB -> 218.458 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (14356.289 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 258.367 ms, heap usage 584.346 MB -> 220.058 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (12022.750 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 206.254 ms, heap usage 478.870 MB -> 221.663 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (11440.226 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 205.173 ms, heap usage 272.439 MB -> 222.510 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (12242.911 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 192.824 ms, heap usage 620.422 MB -> 222.653 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (12824.585 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 158.309 ms, heap usage 403.358 MB -> 222.852 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (11320.456 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.868 ms, heap usage 814.237 MB -> 222.896 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (10506.174 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.074 ms, heap usage 472.161 MB -> 223.041 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (10385.827 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 152.012 ms, heap usage 809.084 MB -> 222.968 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (12137.488 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 254.083 ms, heap usage 680.017 MB -> 222.753 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (12257.854 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 175.187 ms, heap usage 270.903 MB -> 222.887 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (11643.554 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 176.459 ms, heap usage 427.607 MB -> 222.738 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (12052.307 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.744 ms, heap usage 733.505 MB -> 222.977 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10565.054 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 173.248 ms, heap usage 293.330 MB -> 222.794 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (10602.834 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 153.994 ms, heap usage 775.962 MB -> 214.297 MB.\n====== mnemonics (functional) [default], iteration 0 completed (4706.707 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 145.287 ms, heap usage 339.250 MB -> 214.114 MB.\n====== mnemonics (functional) [default], iteration 1 completed (4756.493 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 165.078 ms, heap usage 349.654 MB -> 214.112 MB.\n====== mnemonics (functional) [default], iteration 2 completed (4793.190 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 146.465 ms, heap usage 349.167 MB -> 214.112 MB.\n====== mnemonics (functional) [default], iteration 3 completed (5004.463 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 219.865 ms, heap usage 345.729 MB -> 214.121 MB.\n====== mnemonics (functional) [default], iteration 4 completed (5170.093 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 152.917 ms, heap usage 343.228 MB -> 214.114 MB.\n====== mnemonics (functional) [default], iteration 5 completed (4603.909 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 143.765 ms, heap usage 350.163 MB -> 214.117 MB.\n====== mnemonics (functional) [default], iteration 6 completed (4763.569 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 151.642 ms, heap usage 349.670 MB -> 214.124 MB.\n====== mnemonics (functional) [default], iteration 7 completed (4720.227 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 188.249 ms, heap usage 341.354 MB -> 214.118 MB.\n====== mnemonics (functional) [default], iteration 8 completed (4754.002 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 154.612 ms, heap usage 349.665 MB -> 214.115 MB.\n====== mnemonics (functional) [default], iteration 9 completed (4828.890 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 171.495 ms, heap usage 343.228 MB -> 214.115 MB.\n====== mnemonics (functional) [default], iteration 10 completed (4768.666 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 218.826 ms, heap usage 344.228 MB -> 214.118 MB.\n====== mnemonics (functional) [default], iteration 11 completed (4472.817 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 182.764 ms, heap usage 344.154 MB -> 214.118 MB.\n====== mnemonics (functional) [default], iteration 12 completed (4392.084 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 153.137 ms, heap usage 356.429 MB -> 214.115 MB.\n====== mnemonics (functional) [default], iteration 13 completed (4121.987 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 149.595 ms, heap usage 347.010 MB -> 214.115 MB.\n====== mnemonics (functional) [default], iteration 14 completed (4847.513 ms) ======\n"
    },
    "dotty": {
        "times": [
            11521.459,
            5990.472,
            4100.873,
            3585.636,
            3086.453,
            2791.375,
            2585.203,
            2541.041,
            2287.446,
            2164.413,
            2031.436,
            2059.757,
            1969.796,
            2254.408,
            1764.264
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 66.112 ms, heap usage 219.232 MB -> 63.892 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3770.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 131.923 ms, heap usage 270.271 MB -> 209.915 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1428.102 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.832 ms, heap usage 333.076 MB -> 209.987 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (974.435 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 135.288 ms, heap usage 420.309 MB -> 210.037 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.938 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 130.097 ms, heap usage 369.311 MB -> 210.085 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (924.911 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.548 ms, heap usage 303.927 MB -> 210.133 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (873.242 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.416 ms, heap usage 251.362 MB -> 210.180 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (854.311 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 124.763 ms, heap usage 278.475 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (917.803 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.433 ms, heap usage 444.121 MB -> 210.278 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (851.910 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 176.366 ms, heap usage 307.933 MB -> 210.326 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (910.849 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 125.593 ms, heap usage 217.555 MB -> 210.350 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.254 ms, heap usage 347.053 MB -> 210.451 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (829.834 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.518 ms, heap usage 443.548 MB -> 210.488 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (724.093 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 115.243 ms, heap usage 451.575 MB -> 210.526 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (861.012 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 118.164 ms, heap usage 350.072 MB -> 210.557 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (819.373 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 113.838 ms, heap usage 338.041 MB -> 147.047 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5528.186 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 137.408 ms, heap usage 278.418 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5389.745 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 114.700 ms, heap usage 200.458 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5437.396 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 139.571 ms, heap usage 475.410 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5360.958 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 132.303 ms, heap usage 263.798 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5816.636 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 109.987 ms, heap usage 370.392 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6508.546 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 151.519 ms, heap usage 454.843 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (6503.038 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 161.985 ms, heap usage 225.150 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (6483.786 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 155.104 ms, heap usage 211.658 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5966.197 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 114.941 ms, heap usage 491.451 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5483.775 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 111.799 ms, heap usage 348.157 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5507.539 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 108.341 ms, heap usage 370.245 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5327.190 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 113.063 ms, heap usage 388.257 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5557.026 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 110.199 ms, heap usage 417.705 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5562.068 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 126.001 ms, heap usage 351.790 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6050.139 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.904 ms, heap usage 386.999 MB -> 98.211 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (849.676 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 92.825 ms, heap usage 251.209 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (293.931 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 81.249 ms, heap usage 241.124 MB -> 98.578 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (226.956 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 91.506 ms, heap usage 241.078 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (191.729 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 78.792 ms, heap usage 241.079 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (218.258 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 74.230 ms, heap usage 242.048 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (144.150 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.946 ms, heap usage 241.906 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (210.382 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 71.898 ms, heap usage 242.050 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (186.636 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 69.225 ms, heap usage 242.269 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (151.402 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.216 ms, heap usage 242.392 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (141.084 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.568 ms, heap usage 241.853 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (154.671 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 69.023 ms, heap usage 241.879 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (160.571 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 69.450 ms, heap usage 241.961 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (144.086 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.026 ms, heap usage 242.454 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (164.946 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 82.038 ms, heap usage 241.950 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (156.703 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 165.245 ms, heap usage 123.756 MB -> 100.768 MB.\n====== db-shootout (database) [default], iteration 0 completed (8279.994 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.136 ms, heap usage 156.590 MB -> 107.747 MB.\n====== db-shootout (database) [default], iteration 1 completed (6864.949 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 75.858 ms, heap usage 407.555 MB -> 110.498 MB.\n====== db-shootout (database) [default], iteration 2 completed (8133.764 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 104.697 ms, heap usage 482.135 MB -> 111.678 MB.\n====== db-shootout (database) [default], iteration 3 completed (7257.953 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 83.316 ms, heap usage 481.700 MB -> 109.188 MB.\n====== db-shootout (database) [default], iteration 4 completed (8069.649 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.265 ms, heap usage 294.603 MB -> 109.495 MB.\n====== db-shootout (database) [default], iteration 5 completed (7054.228 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 68.851 ms, heap usage 202.466 MB -> 108.491 MB.\n====== db-shootout (database) [default], iteration 6 completed (7215.014 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 70.301 ms, heap usage 185.356 MB -> 112.420 MB.\n====== db-shootout (database) [default], iteration 7 completed (7645.298 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 96.708 ms, heap usage 408.179 MB -> 112.395 MB.\n====== db-shootout (database) [default], iteration 8 completed (7159.599 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 72.654 ms, heap usage 260.488 MB -> 111.217 MB.\n====== db-shootout (database) [default], iteration 9 completed (8102.269 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 93.215 ms, heap usage 247.067 MB -> 111.793 MB.\n====== db-shootout (database) [default], iteration 10 completed (8201.659 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 88.084 ms, heap usage 196.019 MB -> 108.876 MB.\n====== db-shootout (database) [default], iteration 11 completed (8928.872 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 89.395 ms, heap usage 148.929 MB -> 108.561 MB.\n====== db-shootout (database) [default], iteration 12 completed (9484.912 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 76.072 ms, heap usage 175.761 MB -> 108.269 MB.\n====== db-shootout (database) [default], iteration 13 completed (9352.132 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 82.217 ms, heap usage 204.503 MB -> 108.293 MB.\n====== db-shootout (database) [default], iteration 14 completed (7825.940 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35547 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 104.455 ms, heap usage 320.432 MB -> 112.082 MB.\n====== finagle-http (web) [default], iteration 0 completed (20069.884 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 121.654 ms, heap usage 326.481 MB -> 115.826 MB.\n====== finagle-http (web) [default], iteration 1 completed (16009.480 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 90.148 ms, heap usage 243.494 MB -> 115.849 MB.\n====== finagle-http (web) [default], iteration 2 completed (13975.211 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 107.935 ms, heap usage 232.462 MB -> 115.898 MB.\n====== finagle-http (web) [default], iteration 3 completed (11999.340 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 112.360 ms, heap usage 219.221 MB -> 115.906 MB.\n====== finagle-http (web) [default], iteration 4 completed (8709.573 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 80.389 ms, heap usage 209.710 MB -> 115.897 MB.\n====== finagle-http (web) [default], iteration 5 completed (7600.006 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 90.046 ms, heap usage 204.281 MB -> 117.849 MB.\n====== finagle-http (web) [default], iteration 6 completed (7535.088 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 127.775 ms, heap usage 194.577 MB -> 115.979 MB.\n====== finagle-http (web) [default], iteration 7 completed (6782.047 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 90.278 ms, heap usage 187.280 MB -> 115.910 MB.\n====== finagle-http (web) [default], iteration 8 completed (6265.913 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 70.116 ms, heap usage 178.110 MB -> 115.973 MB.\n====== finagle-http (web) [default], iteration 9 completed (4642.991 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 80.779 ms, heap usage 323.567 MB -> 115.970 MB.\n====== finagle-http (web) [default], iteration 10 completed (4145.819 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 86.020 ms, heap usage 307.268 MB -> 116.255 MB.\n====== finagle-http (web) [default], iteration 11 completed (3694.216 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 84.455 ms, heap usage 302.078 MB -> 115.982 MB.\n====== finagle-http (web) [default], iteration 12 completed (3721.920 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 75.293 ms, heap usage 297.157 MB -> 115.974 MB.\n====== finagle-http (web) [default], iteration 13 completed (3767.458 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 79.429 ms, heap usage 296.561 MB -> 115.986 MB.\n====== finagle-http (web) [default], iteration 14 completed (3686.511 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.883 ms, heap usage 311.874 MB -> 117.016 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14567.734 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 91.924 ms, heap usage 748.162 MB -> 117.250 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (11914.090 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 92.956 ms, heap usage 617.357 MB -> 113.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12046.703 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 87.006 ms, heap usage 625.175 MB -> 113.546 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12159.038 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.203 ms, heap usage 653.120 MB -> 113.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (11806.913 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 76.041 ms, heap usage 659.988 MB -> 113.544 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12119.651 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 86.933 ms, heap usage 630.908 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12011.323 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 76.199 ms, heap usage 641.149 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12029.477 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 87.864 ms, heap usage 643.745 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11818.715 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 72.649 ms, heap usage 644.929 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12661.824 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 71.217 ms, heap usage 707.143 MB -> 113.559 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12445.619 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 90.163 ms, heap usage 614.914 MB -> 113.567 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11921.951 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 91.365 ms, heap usage 628.943 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11610.642 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 86.133 ms, heap usage 641.617 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11968.551 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 89.380 ms, heap usage 631.059 MB -> 113.569 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12458.430 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.062 ms, heap usage 219.995 MB -> 127.548 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8456.478 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.690 ms, heap usage 264.960 MB -> 160.178 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (1975.817 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 96.778 ms, heap usage 491.689 MB -> 177.170 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1490.638 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.246 ms, heap usage 505.994 MB -> 171.820 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1466.459 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.026 ms, heap usage 450.661 MB -> 161.068 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1370.440 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.097 ms, heap usage 468.970 MB -> 161.284 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1330.634 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.589 ms, heap usage 518.427 MB -> 161.493 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1346.798 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 96.884 ms, heap usage 523.910 MB -> 161.699 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1440.812 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 103.228 ms, heap usage 529.346 MB -> 161.851 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1327.374 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 105.044 ms, heap usage 469.720 MB -> 161.981 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1294.957 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 100.316 ms, heap usage 501.456 MB -> 162.111 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1323.161 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.972 ms, heap usage 449.606 MB -> 162.225 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1316.463 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.494 ms, heap usage 482.770 MB -> 162.347 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1251.563 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.167 ms, heap usage 481.748 MB -> 162.468 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1258.373 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 100.073 ms, heap usage 488.726 MB -> 162.584 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1197.805 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 101.937 ms, heap usage 483.495 MB -> 142.934 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 578\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 46\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 578\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 16\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 21\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 118.34 op/s (118.34 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.659 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.171 ms, heap usage 432.717 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 40\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 578\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 21\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 10\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 326.53 op/s (326.53 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1502.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 119.563 ms, heap usage 432.268 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 444\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 578\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 15\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 21\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 10\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 512.82 op/s (512.82 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.766 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 109.500 ms, heap usage 435.750 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 385\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 578\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 17\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 43\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 10\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 806.05 op/s (806.05 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1328.547 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 97.208 ms, heap usage 451.265 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 578\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 17\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 43\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 10\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1023.02 op/s (1023.02 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1305.632 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 96.350 ms, heap usage 514.240 MB -> 143.197 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 578\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 15\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 17\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 43\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 10\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1242.867 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 101.166 ms, heap usage 508.976 MB -> 143.205 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 578\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 17\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 43\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 10\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1497.33 op/s (1497.33 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1258.665 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 99.032 ms, heap usage 512.234 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 364\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 578\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 17\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 43\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 10\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1697.61 op/s (1697.61 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1268.334 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 95.423 ms, heap usage 512.003 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 578\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 17\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 43\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 10\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1978.02 op/s (1978.02 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1237.745 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 103.146 ms, heap usage 509.925 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 578\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 17\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 43\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 11\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2150.54 op/s (2150.54 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.896 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 126.573 ms, heap usage 512.999 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 372\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 578\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 17\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 43\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 16\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2321.90 op/s (2321.90 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1307.247 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 98.357 ms, heap usage 512.777 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 431\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 578\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 15\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 17\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 43\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2181.82 op/s (2181.82 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1325.232 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 109.477 ms, heap usage 505.517 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 487\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 578\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 15\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 17\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 43\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2084.17 op/s (2084.17 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1394.190 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 139.535 ms, heap usage 506.758 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 34\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 578\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 15\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 17\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 43\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2901.55 op/s (2901.55 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1658.631 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 127.460 ms, heap usage 508.477 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 407\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 578\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 15\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 17\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 43\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2803.74 op/s (2803.74 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1491.065 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.885 ms, heap usage 453.988 MB -> 154.499 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27755.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.554 ms, heap usage 547.458 MB -> 430.313 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15259.872 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 125.316 ms, heap usage 449.474 MB -> 430.526 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15122.779 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 141.624 ms, heap usage 708.754 MB -> 430.655 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15373.306 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 128.350 ms, heap usage 441.660 MB -> 430.713 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15608.687 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 139.383 ms, heap usage 449.578 MB -> 430.640 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14679.610 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.195 ms, heap usage 582.706 MB -> 427.603 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14656.078 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.738 ms, heap usage 748.016 MB -> 427.676 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14951.115 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 144.137 ms, heap usage 748.028 MB -> 427.027 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14676.438 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 119.460 ms, heap usage 445.210 MB -> 425.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14790.642 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.441 ms, heap usage 811.379 MB -> 422.557 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15524.717 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 112.350 ms, heap usage 743.074 MB -> 422.735 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14859.821 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.323 ms, heap usage 524.729 MB -> 422.794 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14571.928 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 121.464 ms, heap usage 743.304 MB -> 422.918 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15308.674 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 101.113 ms, heap usage 640.318 MB -> 423.450 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15224.508 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 115.256 ms, heap usage 367.239 MB -> 168.967 MB.\n====== als (apache-spark) [default], iteration 0 completed (16795.053 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.030 ms, heap usage 313.600 MB -> 193.526 MB.\n====== als (apache-spark) [default], iteration 1 completed (8469.242 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 160.654 ms, heap usage 567.578 MB -> 195.087 MB.\n====== als (apache-spark) [default], iteration 2 completed (7810.714 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 139.767 ms, heap usage 587.341 MB -> 195.721 MB.\n====== als (apache-spark) [default], iteration 3 completed (7716.502 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 148.107 ms, heap usage 575.934 MB -> 196.268 MB.\n====== als (apache-spark) [default], iteration 4 completed (8456.560 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 138.590 ms, heap usage 562.663 MB -> 196.773 MB.\n====== als (apache-spark) [default], iteration 5 completed (7488.587 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 171.344 ms, heap usage 597.601 MB -> 197.349 MB.\n====== als (apache-spark) [default], iteration 6 completed (7384.134 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 135.616 ms, heap usage 488.658 MB -> 197.755 MB.\n====== als (apache-spark) [default], iteration 7 completed (7359.408 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 152.746 ms, heap usage 489.183 MB -> 198.457 MB.\n====== als (apache-spark) [default], iteration 8 completed (7508.314 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.470 ms, heap usage 655.695 MB -> 199.178 MB.\n====== als (apache-spark) [default], iteration 9 completed (7454.432 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 145.375 ms, heap usage 711.895 MB -> 199.372 MB.\n====== als (apache-spark) [default], iteration 10 completed (7211.595 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 138.795 ms, heap usage 475.128 MB -> 199.477 MB.\n====== als (apache-spark) [default], iteration 11 completed (7347.154 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 147.556 ms, heap usage 660.950 MB -> 199.919 MB.\n====== als (apache-spark) [default], iteration 12 completed (7182.671 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 140.073 ms, heap usage 599.239 MB -> 200.165 MB.\n====== als (apache-spark) [default], iteration 13 completed (7139.441 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 149.022 ms, heap usage 616.610 MB -> 200.192 MB.\n====== als (apache-spark) [default], iteration 14 completed (7258.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 136.682 ms, heap usage 688.044 MB -> 180.638 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4066.358 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.610 ms, heap usage 316.927 MB -> 180.452 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4148.655 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 136.795 ms, heap usage 315.954 MB -> 180.450 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (3999.060 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 159.271 ms, heap usage 385.700 MB -> 180.450 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (5593.874 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 148.535 ms, heap usage 310.950 MB -> 180.448 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4518.935 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 129.875 ms, heap usage 317.387 MB -> 180.447 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (5035.730 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 217.570 ms, heap usage 333.574 MB -> 180.442 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (4791.802 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 120.895 ms, heap usage 333.967 MB -> 180.445 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3792.220 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 122.742 ms, heap usage 351.572 MB -> 180.445 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3637.750 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 124.435 ms, heap usage 349.070 MB -> 180.443 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3495.283 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.278 ms, heap usage 323.566 MB -> 180.441 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4460.536 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 152.037 ms, heap usage 311.938 MB -> 180.444 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (5249.319 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 187.858 ms, heap usage 392.440 MB -> 180.439 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (6649.413 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 180.105 ms, heap usage 309.003 MB -> 180.437 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (4989.394 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 135.383 ms, heap usage 310.937 MB -> 180.439 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (4723.376 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 228.716 ms, heap usage 431.693 MB -> 202.734 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (490.324 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 186.054 ms, heap usage 232.234 MB -> 202.766 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (234.447 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 189.773 ms, heap usage 232.769 MB -> 202.768 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (238.741 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 165.726 ms, heap usage 232.766 MB -> 202.776 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (220.271 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 189.739 ms, heap usage 233.268 MB -> 202.775 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (213.975 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 187.633 ms, heap usage 232.767 MB -> 202.773 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (192.883 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 209.639 ms, heap usage 233.267 MB -> 202.768 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (210.763 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 151.897 ms, heap usage 232.775 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (202.398 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 180.762 ms, heap usage 232.768 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (248.195 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 180.770 ms, heap usage 233.268 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (231.780 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 175.670 ms, heap usage 232.769 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (209.958 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 194.613 ms, heap usage 232.777 MB -> 202.772 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (216.474 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 168.792 ms, heap usage 232.769 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (216.346 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 191.477 ms, heap usage 232.777 MB -> 202.769 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (208.956 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 174.623 ms, heap usage 232.777 MB -> 202.772 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (288.060 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 221.026 ms, heap usage 234.269 MB -> 181.769 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (3392.961 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 164.865 ms, heap usage 257.799 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1214.271 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 164.887 ms, heap usage 247.855 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (1265.219 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 174.036 ms, heap usage 335.882 MB -> 181.691 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1232.216 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 158.082 ms, heap usage 312.882 MB -> 181.696 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1143.981 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 186.387 ms, heap usage 265.776 MB -> 181.694 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1221.751 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 168.753 ms, heap usage 308.136 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (1156.078 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 170.950 ms, heap usage 293.715 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1008.085 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 123.940 ms, heap usage 277.005 MB -> 181.697 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1180.396 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 128.815 ms, heap usage 387.449 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1100.522 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 138.025 ms, heap usage 418.405 MB -> 181.693 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (1163.782 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 148.968 ms, heap usage 358.892 MB -> 181.700 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (962.079 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 128.600 ms, heap usage 253.394 MB -> 181.701 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1149.928 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 159.056 ms, heap usage 356.386 MB -> 181.694 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1091.746 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 169.292 ms, heap usage 337.852 MB -> 181.701 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1039.176 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 182.112 ms, heap usage 289.052 MB -> 193.815 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (10460.378 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 249.691 ms, heap usage 612.346 MB -> 276.595 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2133.327 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 174.393 ms, heap usage 749.875 MB -> 277.586 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1897.189 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 201.492 ms, heap usage 737.876 MB -> 278.096 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1616.738 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 166.122 ms, heap usage 590.404 MB -> 277.782 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1343.036 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 139.030 ms, heap usage 751.047 MB -> 278.564 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1225.999 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 135.060 ms, heap usage 713.637 MB -> 278.737 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1184.178 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.394 ms, heap usage 686.914 MB -> 278.866 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1135.639 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 146.389 ms, heap usage 503.842 MB -> 278.446 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1083.766 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 132.416 ms, heap usage 584.134 MB -> 278.937 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1110.796 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.521 ms, heap usage 631.772 MB -> 279.332 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1101.737 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.096 ms, heap usage 666.927 MB -> 279.560 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1098.550 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.593 ms, heap usage 715.721 MB -> 279.954 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1379.031 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 178.612 ms, heap usage 697.585 MB -> 280.100 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1303.525 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 172.624 ms, heap usage 707.326 MB -> 280.270 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1553.553 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 253.674 ms, heap usage 628.586 MB -> 211.397 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (19728.458 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 195.400 ms, heap usage 633.004 MB -> 218.458 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (14356.289 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 258.367 ms, heap usage 584.346 MB -> 220.058 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (12022.750 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 206.254 ms, heap usage 478.870 MB -> 221.663 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (11440.226 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 205.173 ms, heap usage 272.439 MB -> 222.510 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (12242.911 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 192.824 ms, heap usage 620.422 MB -> 222.653 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (12824.585 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 158.309 ms, heap usage 403.358 MB -> 222.852 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (11320.456 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.868 ms, heap usage 814.237 MB -> 222.896 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (10506.174 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.074 ms, heap usage 472.161 MB -> 223.041 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (10385.827 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 152.012 ms, heap usage 809.084 MB -> 222.968 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (12137.488 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 254.083 ms, heap usage 680.017 MB -> 222.753 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (12257.854 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 175.187 ms, heap usage 270.903 MB -> 222.887 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (11643.554 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 176.459 ms, heap usage 427.607 MB -> 222.738 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (12052.307 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.744 ms, heap usage 733.505 MB -> 222.977 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10565.054 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 173.248 ms, heap usage 293.330 MB -> 222.794 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (10602.834 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 153.994 ms, heap usage 775.962 MB -> 214.297 MB.\n====== mnemonics (functional) [default], iteration 0 completed (4706.707 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 145.287 ms, heap usage 339.250 MB -> 214.114 MB.\n====== mnemonics (functional) [default], iteration 1 completed (4756.493 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 165.078 ms, heap usage 349.654 MB -> 214.112 MB.\n====== mnemonics (functional) [default], iteration 2 completed (4793.190 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 146.465 ms, heap usage 349.167 MB -> 214.112 MB.\n====== mnemonics (functional) [default], iteration 3 completed (5004.463 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 219.865 ms, heap usage 345.729 MB -> 214.121 MB.\n====== mnemonics (functional) [default], iteration 4 completed (5170.093 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 152.917 ms, heap usage 343.228 MB -> 214.114 MB.\n====== mnemonics (functional) [default], iteration 5 completed (4603.909 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 143.765 ms, heap usage 350.163 MB -> 214.117 MB.\n====== mnemonics (functional) [default], iteration 6 completed (4763.569 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 151.642 ms, heap usage 349.670 MB -> 214.124 MB.\n====== mnemonics (functional) [default], iteration 7 completed (4720.227 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 188.249 ms, heap usage 341.354 MB -> 214.118 MB.\n====== mnemonics (functional) [default], iteration 8 completed (4754.002 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 154.612 ms, heap usage 349.665 MB -> 214.115 MB.\n====== mnemonics (functional) [default], iteration 9 completed (4828.890 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 171.495 ms, heap usage 343.228 MB -> 214.115 MB.\n====== mnemonics (functional) [default], iteration 10 completed (4768.666 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 218.826 ms, heap usage 344.228 MB -> 214.118 MB.\n====== mnemonics (functional) [default], iteration 11 completed (4472.817 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 182.764 ms, heap usage 344.154 MB -> 214.118 MB.\n====== mnemonics (functional) [default], iteration 12 completed (4392.084 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 153.137 ms, heap usage 356.429 MB -> 214.115 MB.\n====== mnemonics (functional) [default], iteration 13 completed (4121.987 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 149.595 ms, heap usage 347.010 MB -> 214.115 MB.\n====== mnemonics (functional) [default], iteration 14 completed (4847.513 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 212.421 ms, heap usage 356.615 MB -> 216.525 MB.\n====== dotty (scala) [default], iteration 0 completed (11521.459 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 206.452 ms, heap usage 426.038 MB -> 233.213 MB.\n====== dotty (scala) [default], iteration 1 completed (5990.472 ms) ======\n====== dotty (scala) [default], iteration 2 started ======\nGC before operation: completed in 211.584 ms, heap usage 468.754 MB -> 233.177 MB.\n====== dotty (scala) [default], iteration 2 completed (4100.873 ms) ======\n====== dotty (scala) [default], iteration 3 started ======\nGC before operation: completed in 164.825 ms, heap usage 464.698 MB -> 233.190 MB.\n====== dotty (scala) [default], iteration 3 completed (3585.636 ms) ======\n====== dotty (scala) [default], iteration 4 started ======\nGC before operation: completed in 164.813 ms, heap usage 461.187 MB -> 233.190 MB.\n====== dotty (scala) [default], iteration 4 completed (3086.453 ms) ======\n====== dotty (scala) [default], iteration 5 started ======\nGC before operation: completed in 185.595 ms, heap usage 459.205 MB -> 233.204 MB.\n====== dotty (scala) [default], iteration 5 completed (2791.375 ms) ======\n====== dotty (scala) [default], iteration 6 started ======\nGC before operation: completed in 179.407 ms, heap usage 456.730 MB -> 233.212 MB.\n====== dotty (scala) [default], iteration 6 completed (2585.203 ms) ======\n====== dotty (scala) [default], iteration 7 started ======\nGC before operation: completed in 163.631 ms, heap usage 455.232 MB -> 233.221 MB.\n====== dotty (scala) [default], iteration 7 completed (2541.041 ms) ======\n====== dotty (scala) [default], iteration 8 started ======\nGC before operation: completed in 170.083 ms, heap usage 454.246 MB -> 233.225 MB.\n====== dotty (scala) [default], iteration 8 completed (2287.446 ms) ======\n====== dotty (scala) [default], iteration 9 started ======\nGC before operation: completed in 186.353 ms, heap usage 453.222 MB -> 233.234 MB.\n====== dotty (scala) [default], iteration 9 completed (2164.413 ms) ======\n====== dotty (scala) [default], iteration 10 started ======\nGC before operation: completed in 183.846 ms, heap usage 452.231 MB -> 233.241 MB.\n====== dotty (scala) [default], iteration 10 completed (2031.436 ms) ======\n====== dotty (scala) [default], iteration 11 started ======\nGC before operation: completed in 166.348 ms, heap usage 451.252 MB -> 233.245 MB.\n====== dotty (scala) [default], iteration 11 completed (2059.757 ms) ======\n====== dotty (scala) [default], iteration 12 started ======\nGC before operation: completed in 187.979 ms, heap usage 450.255 MB -> 233.241 MB.\n====== dotty (scala) [default], iteration 12 completed (1969.796 ms) ======\n====== dotty (scala) [default], iteration 13 started ======\nGC before operation: completed in 204.086 ms, heap usage 448.769 MB -> 233.254 MB.\n====== dotty (scala) [default], iteration 13 completed (2254.408 ms) ======\n====== dotty (scala) [default], iteration 14 started ======\nGC before operation: completed in 218.581 ms, heap usage 447.777 MB -> 233.256 MB.\n====== dotty (scala) [default], iteration 14 completed (1764.264 ms) ======\n"
    },
    "finagle-chirper": {
        "times": [
            12314.776,
            5610.877,
            3460.439,
            3144.464,
            3148.605,
            3051.289,
            2930.359,
            2782.455,
            3061.947,
            2800.351,
            2731.642,
            3752.699,
            2944.197,
            2707.996,
            2611.046
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 81.361 ms, heap usage 194.025 MB -> 75.910 MB.\n====== scrabble (functional) [default], iteration 0 completed (1256.709 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 87.093 ms, heap usage 240.815 MB -> 75.997 MB.\n====== scrabble (functional) [default], iteration 1 completed (610.638 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 74.034 ms, heap usage 148.677 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 2 completed (532.168 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 62.184 ms, heap usage 153.592 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 3 completed (521.400 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 59.432 ms, heap usage 229.941 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 4 completed (580.095 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 72.271 ms, heap usage 283.129 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 5 completed (530.457 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 59.899 ms, heap usage 201.322 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 6 completed (500.472 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.268 ms, heap usage 193.905 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 7 completed (509.236 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 58.192 ms, heap usage 166.098 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 8 completed (504.096 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 70.989 ms, heap usage 122.699 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 9 completed (476.451 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 66.684 ms, heap usage 324.250 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 10 completed (485.693 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 62.293 ms, heap usage 375.822 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 11 completed (604.250 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 58.713 ms, heap usage 162.628 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 12 completed (470.886 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 65.959 ms, heap usage 113.502 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 13 completed (493.373 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 67.562 ms, heap usage 322.230 MB -> 75.996 MB.\n====== scrabble (functional) [default], iteration 14 completed (452.162 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 23.504 ms, heap usage 668.483 MB -> 29.794 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19149.522 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 135.470 ms, heap usage 635.699 MB -> 149.265 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10606.771 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.687 ms, heap usage 402.013 MB -> 146.347 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10735.718 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 114.819 ms, heap usage 602.642 MB -> 147.526 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10417.032 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 114.005 ms, heap usage 657.420 MB -> 147.621 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11053.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.037 ms, heap usage 636.090 MB -> 147.732 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10408.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 119.508 ms, heap usage 666.732 MB -> 147.842 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10395.887 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 110.180 ms, heap usage 452.706 MB -> 147.957 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10573.528 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 116.082 ms, heap usage 376.374 MB -> 148.014 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10424.467 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 117.946 ms, heap usage 506.399 MB -> 148.118 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (11500.139 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.405 ms, heap usage 743.474 MB -> 148.148 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10534.404 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 117.470 ms, heap usage 443.408 MB -> 148.271 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10356.524 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 127.349 ms, heap usage 601.716 MB -> 148.380 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10157.271 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 107.640 ms, heap usage 623.119 MB -> 148.480 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11356.579 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 113.180 ms, heap usage 603.551 MB -> 148.570 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10681.230 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.206 ms, heap usage 372.876 MB -> 31.969 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2931.160 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 39.069 ms, heap usage 67.478 MB -> 32.793 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2167.410 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.693 ms, heap usage 74.272 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2172.520 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 36.963 ms, heap usage 49.518 MB -> 32.794 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.488 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 42.713 ms, heap usage 65.386 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2174.330 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 36.357 ms, heap usage 60.909 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2130.556 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 35.847 ms, heap usage 68.800 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2124.907 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 41.118 ms, heap usage 69.376 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2124.124 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 36.888 ms, heap usage 61.801 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2124.653 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 40.804 ms, heap usage 60.427 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2131.541 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 34.160 ms, heap usage 82.220 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2023.909 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 29.397 ms, heap usage 122.696 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1993.631 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.843 ms, heap usage 36.668 MB -> 32.796 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2028.063 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 31.153 ms, heap usage 87.059 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1996.410 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 30.715 ms, heap usage 143.290 MB -> 32.797 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2027.432 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 37.500 ms, heap usage 68.018 MB -> 33.639 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17440.893 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 173.567 ms, heap usage 795.616 MB -> 91.728 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14250.195 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 165.294 ms, heap usage 697.822 MB -> 90.009 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (13569.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 239.425 ms, heap usage 569.713 MB -> 116.773 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (12880.854 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 208.306 ms, heap usage 447.510 MB -> 112.994 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\n====== akka-uct (concurrency) [default], iteration 4 completed (13407.097 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 206.686 ms, heap usage 518.221 MB -> 108.190 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12613.792 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 231.982 ms, heap usage 630.089 MB -> 113.855 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\n====== akka-uct (concurrency) [default], iteration 6 completed (13206.299 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 231.998 ms, heap usage 612.239 MB -> 120.585 MB.\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13412.219 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 244.905 ms, heap usage 385.458 MB -> 107.622 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (15705.366 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 225.119 ms, heap usage 522.637 MB -> 120.924 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13572.252 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 198.806 ms, heap usage 398.975 MB -> 109.205 MB.\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (14895.858 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 194.977 ms, heap usage 731.131 MB -> 105.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13147.220 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 246.734 ms, heap usage 656.715 MB -> 127.112 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (14359.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 388.326 ms, heap usage 445.975 MB -> 124.302 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15233.136 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 237.753 ms, heap usage 765.139 MB -> 121.763 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13662.774 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 91.011 ms, heap usage 296.467 MB -> 85.988 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21462.837 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 106.301 ms, heap usage 441.849 MB -> 96.677 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (16281.709 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 119.225 ms, heap usage 475.589 MB -> 98.899 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14534.203 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.110 ms, heap usage 269.534 MB -> 100.475 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13754.629 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 103.105 ms, heap usage 155.378 MB -> 100.789 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (15150.312 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.078 ms, heap usage 198.477 MB -> 99.352 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14314.557 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 83.411 ms, heap usage 107.491 MB -> 99.914 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14349.236 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 104.266 ms, heap usage 137.051 MB -> 101.917 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13836.241 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 88.592 ms, heap usage 177.777 MB -> 100.019 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12489.907 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 116.318 ms, heap usage 511.321 MB -> 100.286 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12299.757 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 93.081 ms, heap usage 158.414 MB -> 99.856 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12428.118 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 96.563 ms, heap usage 311.906 MB -> 99.966 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (13293.548 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 113.953 ms, heap usage 280.034 MB -> 101.977 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (14552.880 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 82.019 ms, heap usage 137.742 MB -> 101.152 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13664.642 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 91.579 ms, heap usage 457.466 MB -> 100.263 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12737.711 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.795 ms, heap usage 165.708 MB -> 58.460 MB.\n====== scala-doku (scala) [default], iteration 0 completed (5019.675 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.078 ms, heap usage 141.800 MB -> 58.558 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3168.279 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.370 ms, heap usage 114.558 MB -> 58.559 MB.\n====== scala-doku (scala) [default], iteration 2 completed (3119.922 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 71.958 ms, heap usage 118.061 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2856.356 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 79.949 ms, heap usage 120.560 MB -> 58.560 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2719.660 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 73.274 ms, heap usage 122.060 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2790.389 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 72.033 ms, heap usage 123.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 6 completed (3012.073 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 71.845 ms, heap usage 122.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2639.788 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 74.650 ms, heap usage 122.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2867.468 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 64.524 ms, heap usage 122.062 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2729.114 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 63.379 ms, heap usage 122.061 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2909.024 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 80.847 ms, heap usage 121.561 MB -> 58.561 MB.\n====== scala-doku (scala) [default], iteration 11 completed (3088.673 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 72.360 ms, heap usage 121.561 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2749.353 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 78.508 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2602.809 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 54.285 ms, heap usage 121.562 MB -> 58.562 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2505.622 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 66.112 ms, heap usage 219.232 MB -> 63.892 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3770.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 131.923 ms, heap usage 270.271 MB -> 209.915 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1428.102 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.832 ms, heap usage 333.076 MB -> 209.987 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (974.435 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 135.288 ms, heap usage 420.309 MB -> 210.037 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.938 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 130.097 ms, heap usage 369.311 MB -> 210.085 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (924.911 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.548 ms, heap usage 303.927 MB -> 210.133 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (873.242 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 118.416 ms, heap usage 251.362 MB -> 210.180 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (854.311 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 124.763 ms, heap usage 278.475 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (917.803 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.433 ms, heap usage 444.121 MB -> 210.278 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (851.910 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 176.366 ms, heap usage 307.933 MB -> 210.326 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (910.849 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 125.593 ms, heap usage 217.555 MB -> 210.350 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.117 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.254 ms, heap usage 347.053 MB -> 210.451 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (829.834 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.518 ms, heap usage 443.548 MB -> 210.488 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (724.093 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 115.243 ms, heap usage 451.575 MB -> 210.526 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (861.012 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 118.164 ms, heap usage 350.072 MB -> 210.557 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (819.373 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 113.838 ms, heap usage 338.041 MB -> 147.047 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5528.186 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 137.408 ms, heap usage 278.418 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5389.745 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 114.700 ms, heap usage 200.458 MB -> 146.955 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5437.396 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 139.571 ms, heap usage 475.410 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5360.958 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 132.303 ms, heap usage 263.798 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5816.636 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 109.987 ms, heap usage 370.392 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6508.546 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 151.519 ms, heap usage 454.843 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (6503.038 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 161.985 ms, heap usage 225.150 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (6483.786 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 155.104 ms, heap usage 211.658 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5966.197 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 114.941 ms, heap usage 491.451 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5483.775 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 111.799 ms, heap usage 348.157 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5507.539 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 108.341 ms, heap usage 370.245 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5327.190 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 113.063 ms, heap usage 388.257 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5557.026 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 110.199 ms, heap usage 417.705 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5562.068 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 126.001 ms, heap usage 351.790 MB -> 146.990 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (6050.139 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.904 ms, heap usage 386.999 MB -> 98.211 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (849.676 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 92.825 ms, heap usage 251.209 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (293.931 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 81.249 ms, heap usage 241.124 MB -> 98.578 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (226.956 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 91.506 ms, heap usage 241.078 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (191.729 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 78.792 ms, heap usage 241.079 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (218.258 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 74.230 ms, heap usage 242.048 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (144.150 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.946 ms, heap usage 241.906 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (210.382 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 71.898 ms, heap usage 242.050 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (186.636 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 69.225 ms, heap usage 242.269 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (151.402 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.216 ms, heap usage 242.392 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (141.084 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.568 ms, heap usage 241.853 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (154.671 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 69.023 ms, heap usage 241.879 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (160.571 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 69.450 ms, heap usage 241.961 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (144.086 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 83.026 ms, heap usage 242.454 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (164.946 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 82.038 ms, heap usage 241.950 MB -> 98.579 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (156.703 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 165.245 ms, heap usage 123.756 MB -> 100.768 MB.\n====== db-shootout (database) [default], iteration 0 completed (8279.994 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.136 ms, heap usage 156.590 MB -> 107.747 MB.\n====== db-shootout (database) [default], iteration 1 completed (6864.949 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 75.858 ms, heap usage 407.555 MB -> 110.498 MB.\n====== db-shootout (database) [default], iteration 2 completed (8133.764 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 104.697 ms, heap usage 482.135 MB -> 111.678 MB.\n====== db-shootout (database) [default], iteration 3 completed (7257.953 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 83.316 ms, heap usage 481.700 MB -> 109.188 MB.\n====== db-shootout (database) [default], iteration 4 completed (8069.649 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 78.265 ms, heap usage 294.603 MB -> 109.495 MB.\n====== db-shootout (database) [default], iteration 5 completed (7054.228 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 68.851 ms, heap usage 202.466 MB -> 108.491 MB.\n====== db-shootout (database) [default], iteration 6 completed (7215.014 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 70.301 ms, heap usage 185.356 MB -> 112.420 MB.\n====== db-shootout (database) [default], iteration 7 completed (7645.298 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 96.708 ms, heap usage 408.179 MB -> 112.395 MB.\n====== db-shootout (database) [default], iteration 8 completed (7159.599 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 72.654 ms, heap usage 260.488 MB -> 111.217 MB.\n====== db-shootout (database) [default], iteration 9 completed (8102.269 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 93.215 ms, heap usage 247.067 MB -> 111.793 MB.\n====== db-shootout (database) [default], iteration 10 completed (8201.659 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 88.084 ms, heap usage 196.019 MB -> 108.876 MB.\n====== db-shootout (database) [default], iteration 11 completed (8928.872 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 89.395 ms, heap usage 148.929 MB -> 108.561 MB.\n====== db-shootout (database) [default], iteration 12 completed (9484.912 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 76.072 ms, heap usage 175.761 MB -> 108.269 MB.\n====== db-shootout (database) [default], iteration 13 completed (9352.132 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 82.217 ms, heap usage 204.503 MB -> 108.293 MB.\n====== db-shootout (database) [default], iteration 14 completed (7825.940 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35547 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 104.455 ms, heap usage 320.432 MB -> 112.082 MB.\n====== finagle-http (web) [default], iteration 0 completed (20069.884 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 121.654 ms, heap usage 326.481 MB -> 115.826 MB.\n====== finagle-http (web) [default], iteration 1 completed (16009.480 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 90.148 ms, heap usage 243.494 MB -> 115.849 MB.\n====== finagle-http (web) [default], iteration 2 completed (13975.211 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 107.935 ms, heap usage 232.462 MB -> 115.898 MB.\n====== finagle-http (web) [default], iteration 3 completed (11999.340 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 112.360 ms, heap usage 219.221 MB -> 115.906 MB.\n====== finagle-http (web) [default], iteration 4 completed (8709.573 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 80.389 ms, heap usage 209.710 MB -> 115.897 MB.\n====== finagle-http (web) [default], iteration 5 completed (7600.006 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 90.046 ms, heap usage 204.281 MB -> 117.849 MB.\n====== finagle-http (web) [default], iteration 6 completed (7535.088 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 127.775 ms, heap usage 194.577 MB -> 115.979 MB.\n====== finagle-http (web) [default], iteration 7 completed (6782.047 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 90.278 ms, heap usage 187.280 MB -> 115.910 MB.\n====== finagle-http (web) [default], iteration 8 completed (6265.913 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 70.116 ms, heap usage 178.110 MB -> 115.973 MB.\n====== finagle-http (web) [default], iteration 9 completed (4642.991 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 80.779 ms, heap usage 323.567 MB -> 115.970 MB.\n====== finagle-http (web) [default], iteration 10 completed (4145.819 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 86.020 ms, heap usage 307.268 MB -> 116.255 MB.\n====== finagle-http (web) [default], iteration 11 completed (3694.216 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 84.455 ms, heap usage 302.078 MB -> 115.982 MB.\n====== finagle-http (web) [default], iteration 12 completed (3721.920 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 75.293 ms, heap usage 297.157 MB -> 115.974 MB.\n====== finagle-http (web) [default], iteration 13 completed (3767.458 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 79.429 ms, heap usage 296.561 MB -> 115.986 MB.\n====== finagle-http (web) [default], iteration 14 completed (3686.511 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.883 ms, heap usage 311.874 MB -> 117.016 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14567.734 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 91.924 ms, heap usage 748.162 MB -> 117.250 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (11914.090 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 92.956 ms, heap usage 617.357 MB -> 113.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12046.703 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 87.006 ms, heap usage 625.175 MB -> 113.546 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12159.038 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 73.203 ms, heap usage 653.120 MB -> 113.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (11806.913 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 76.041 ms, heap usage 659.988 MB -> 113.544 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12119.651 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 86.933 ms, heap usage 630.908 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12011.323 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 76.199 ms, heap usage 641.149 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12029.477 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 87.864 ms, heap usage 643.745 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11818.715 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 72.649 ms, heap usage 644.929 MB -> 113.554 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12661.824 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 71.217 ms, heap usage 707.143 MB -> 113.559 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12445.619 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 90.163 ms, heap usage 614.914 MB -> 113.567 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11921.951 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 91.365 ms, heap usage 628.943 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (11610.642 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 86.133 ms, heap usage 641.617 MB -> 113.566 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11968.551 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 89.380 ms, heap usage 631.059 MB -> 113.569 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12458.430 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.062 ms, heap usage 219.995 MB -> 127.548 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8456.478 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.690 ms, heap usage 264.960 MB -> 160.178 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (1975.817 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 96.778 ms, heap usage 491.689 MB -> 177.170 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1490.638 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 98.246 ms, heap usage 505.994 MB -> 171.820 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1466.459 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.026 ms, heap usage 450.661 MB -> 161.068 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1370.440 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.097 ms, heap usage 468.970 MB -> 161.284 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1330.634 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.589 ms, heap usage 518.427 MB -> 161.493 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1346.798 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 96.884 ms, heap usage 523.910 MB -> 161.699 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1440.812 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 103.228 ms, heap usage 529.346 MB -> 161.851 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1327.374 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 105.044 ms, heap usage 469.720 MB -> 161.981 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1294.957 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 100.316 ms, heap usage 501.456 MB -> 162.111 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1323.161 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 97.972 ms, heap usage 449.606 MB -> 162.225 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1316.463 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.494 ms, heap usage 482.770 MB -> 162.347 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1251.563 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.167 ms, heap usage 481.748 MB -> 162.468 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1258.373 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 100.073 ms, heap usage 488.726 MB -> 162.584 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1197.805 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 101.937 ms, heap usage 483.495 MB -> 142.934 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 578\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 46\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 578\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 16\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 21\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 10\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 118.34 op/s (118.34 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.659 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 104.171 ms, heap usage 432.717 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 40\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 578\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 17\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 21\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 10\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 326.53 op/s (326.53 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1502.898 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 119.563 ms, heap usage 432.268 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 444\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 17\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 578\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 15\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 17\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 21\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 10\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 512.82 op/s (512.82 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1269.766 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 109.500 ms, heap usage 435.750 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 385\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 43\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 578\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 17\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 43\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 10\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 806.05 op/s (806.05 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1328.547 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 97.208 ms, heap usage 451.265 MB -> 143.196 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 578\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 17\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 43\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 10\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1023.02 op/s (1023.02 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1305.632 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 96.350 ms, heap usage 514.240 MB -> 143.197 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 578\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 15\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 17\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 43\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 10\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1242.867 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 101.166 ms, heap usage 508.976 MB -> 143.205 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 578\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 17\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 43\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 10\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1497.33 op/s (1497.33 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1258.665 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 99.032 ms, heap usage 512.234 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 364\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 578\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 17\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 43\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 10\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1697.61 op/s (1697.61 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1268.334 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 95.423 ms, heap usage 512.003 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 578\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 17\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 43\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 10\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1978.02 op/s (1978.02 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1237.745 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 103.146 ms, heap usage 509.925 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 578\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 17\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 43\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 11\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2150.54 op/s (2150.54 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.896 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 126.573 ms, heap usage 512.999 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 372\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 578\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 17\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 43\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 16\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2321.90 op/s (2321.90 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1307.247 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 98.357 ms, heap usage 512.777 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 431\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 578\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 15\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 17\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 43\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2181.82 op/s (2181.82 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1325.232 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 109.477 ms, heap usage 505.517 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 487\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 578\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 15\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 17\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 43\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2084.17 op/s (2084.17 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1394.190 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 139.535 ms, heap usage 506.758 MB -> 143.201 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 34\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 578\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 15\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 17\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 43\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2901.55 op/s (2901.55 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1658.631 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 127.460 ms, heap usage 508.477 MB -> 143.198 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 407\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 578\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 15\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 17\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 43\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2803.74 op/s (2803.74 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1491.065 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 147.885 ms, heap usage 453.988 MB -> 154.499 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27755.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.554 ms, heap usage 547.458 MB -> 430.313 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15259.872 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 125.316 ms, heap usage 449.474 MB -> 430.526 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15122.779 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 141.624 ms, heap usage 708.754 MB -> 430.655 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15373.306 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 128.350 ms, heap usage 441.660 MB -> 430.713 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15608.687 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 139.383 ms, heap usage 449.578 MB -> 430.640 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14679.610 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.195 ms, heap usage 582.706 MB -> 427.603 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14656.078 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.738 ms, heap usage 748.016 MB -> 427.676 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14951.115 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 144.137 ms, heap usage 748.028 MB -> 427.027 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14676.438 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 119.460 ms, heap usage 445.210 MB -> 425.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14790.642 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.441 ms, heap usage 811.379 MB -> 422.557 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15524.717 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 112.350 ms, heap usage 743.074 MB -> 422.735 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14859.821 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 124.323 ms, heap usage 524.729 MB -> 422.794 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14571.928 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 121.464 ms, heap usage 743.304 MB -> 422.918 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15308.674 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 101.113 ms, heap usage 640.318 MB -> 423.450 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15224.508 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 115.256 ms, heap usage 367.239 MB -> 168.967 MB.\n====== als (apache-spark) [default], iteration 0 completed (16795.053 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 166.030 ms, heap usage 313.600 MB -> 193.526 MB.\n====== als (apache-spark) [default], iteration 1 completed (8469.242 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 160.654 ms, heap usage 567.578 MB -> 195.087 MB.\n====== als (apache-spark) [default], iteration 2 completed (7810.714 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 139.767 ms, heap usage 587.341 MB -> 195.721 MB.\n====== als (apache-spark) [default], iteration 3 completed (7716.502 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 148.107 ms, heap usage 575.934 MB -> 196.268 MB.\n====== als (apache-spark) [default], iteration 4 completed (8456.560 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 138.590 ms, heap usage 562.663 MB -> 196.773 MB.\n====== als (apache-spark) [default], iteration 5 completed (7488.587 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 171.344 ms, heap usage 597.601 MB -> 197.349 MB.\n====== als (apache-spark) [default], iteration 6 completed (7384.134 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 135.616 ms, heap usage 488.658 MB -> 197.755 MB.\n====== als (apache-spark) [default], iteration 7 completed (7359.408 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 152.746 ms, heap usage 489.183 MB -> 198.457 MB.\n====== als (apache-spark) [default], iteration 8 completed (7508.314 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 134.470 ms, heap usage 655.695 MB -> 199.178 MB.\n====== als (apache-spark) [default], iteration 9 completed (7454.432 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 145.375 ms, heap usage 711.895 MB -> 199.372 MB.\n====== als (apache-spark) [default], iteration 10 completed (7211.595 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 138.795 ms, heap usage 475.128 MB -> 199.477 MB.\n====== als (apache-spark) [default], iteration 11 completed (7347.154 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 147.556 ms, heap usage 660.950 MB -> 199.919 MB.\n====== als (apache-spark) [default], iteration 12 completed (7182.671 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 140.073 ms, heap usage 599.239 MB -> 200.165 MB.\n====== als (apache-spark) [default], iteration 13 completed (7139.441 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 149.022 ms, heap usage 616.610 MB -> 200.192 MB.\n====== als (apache-spark) [default], iteration 14 completed (7258.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 136.682 ms, heap usage 688.044 MB -> 180.638 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4066.358 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 126.610 ms, heap usage 316.927 MB -> 180.452 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4148.655 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 136.795 ms, heap usage 315.954 MB -> 180.450 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (3999.060 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 159.271 ms, heap usage 385.700 MB -> 180.450 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (5593.874 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 148.535 ms, heap usage 310.950 MB -> 180.448 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4518.935 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 129.875 ms, heap usage 317.387 MB -> 180.447 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (5035.730 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 217.570 ms, heap usage 333.574 MB -> 180.442 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (4791.802 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 120.895 ms, heap usage 333.967 MB -> 180.445 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3792.220 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 122.742 ms, heap usage 351.572 MB -> 180.445 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3637.750 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 124.435 ms, heap usage 349.070 MB -> 180.443 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3495.283 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.278 ms, heap usage 323.566 MB -> 180.441 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4460.536 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 152.037 ms, heap usage 311.938 MB -> 180.444 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (5249.319 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 187.858 ms, heap usage 392.440 MB -> 180.439 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (6649.413 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 180.105 ms, heap usage 309.003 MB -> 180.437 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (4989.394 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 135.383 ms, heap usage 310.937 MB -> 180.439 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (4723.376 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 228.716 ms, heap usage 431.693 MB -> 202.734 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (490.324 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 186.054 ms, heap usage 232.234 MB -> 202.766 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (234.447 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 189.773 ms, heap usage 232.769 MB -> 202.768 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (238.741 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 165.726 ms, heap usage 232.766 MB -> 202.776 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (220.271 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 189.739 ms, heap usage 233.268 MB -> 202.775 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (213.975 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 187.633 ms, heap usage 232.767 MB -> 202.773 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (192.883 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 209.639 ms, heap usage 233.267 MB -> 202.768 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (210.763 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 151.897 ms, heap usage 232.775 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (202.398 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 180.762 ms, heap usage 232.768 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (248.195 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 180.770 ms, heap usage 233.268 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (231.780 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 175.670 ms, heap usage 232.769 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (209.958 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 194.613 ms, heap usage 232.777 MB -> 202.772 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (216.474 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 168.792 ms, heap usage 232.769 MB -> 202.771 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (216.346 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 191.477 ms, heap usage 232.777 MB -> 202.769 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (208.956 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 174.623 ms, heap usage 232.777 MB -> 202.772 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (288.060 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 221.026 ms, heap usage 234.269 MB -> 181.769 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (3392.961 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 164.865 ms, heap usage 257.799 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1214.271 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 164.887 ms, heap usage 247.855 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (1265.219 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 174.036 ms, heap usage 335.882 MB -> 181.691 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1232.216 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 158.082 ms, heap usage 312.882 MB -> 181.696 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1143.981 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 186.387 ms, heap usage 265.776 MB -> 181.694 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1221.751 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 168.753 ms, heap usage 308.136 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (1156.078 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 170.950 ms, heap usage 293.715 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1008.085 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 123.940 ms, heap usage 277.005 MB -> 181.697 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1180.396 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 128.815 ms, heap usage 387.449 MB -> 181.692 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1100.522 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 138.025 ms, heap usage 418.405 MB -> 181.693 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (1163.782 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 148.968 ms, heap usage 358.892 MB -> 181.700 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (962.079 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 128.600 ms, heap usage 253.394 MB -> 181.701 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1149.928 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 159.056 ms, heap usage 356.386 MB -> 181.694 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1091.746 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 169.292 ms, heap usage 337.852 MB -> 181.701 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1039.176 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 182.112 ms, heap usage 289.052 MB -> 193.815 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (10460.378 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 249.691 ms, heap usage 612.346 MB -> 276.595 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2133.327 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 174.393 ms, heap usage 749.875 MB -> 277.586 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1897.189 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 201.492 ms, heap usage 737.876 MB -> 278.096 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1616.738 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 166.122 ms, heap usage 590.404 MB -> 277.782 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1343.036 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 139.030 ms, heap usage 751.047 MB -> 278.564 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1225.999 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 135.060 ms, heap usage 713.637 MB -> 278.737 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1184.178 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 127.394 ms, heap usage 686.914 MB -> 278.866 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1135.639 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 146.389 ms, heap usage 503.842 MB -> 278.446 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1083.766 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 132.416 ms, heap usage 584.134 MB -> 278.937 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1110.796 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.521 ms, heap usage 631.772 MB -> 279.332 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1101.737 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.096 ms, heap usage 666.927 MB -> 279.560 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1098.550 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.593 ms, heap usage 715.721 MB -> 279.954 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1379.031 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 178.612 ms, heap usage 697.585 MB -> 280.100 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1303.525 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 172.624 ms, heap usage 707.326 MB -> 280.270 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1553.553 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 253.674 ms, heap usage 628.586 MB -> 211.397 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (19728.458 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 195.400 ms, heap usage 633.004 MB -> 218.458 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (14356.289 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 258.367 ms, heap usage 584.346 MB -> 220.058 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (12022.750 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 206.254 ms, heap usage 478.870 MB -> 221.663 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (11440.226 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 205.173 ms, heap usage 272.439 MB -> 222.510 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (12242.911 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 192.824 ms, heap usage 620.422 MB -> 222.653 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (12824.585 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 158.309 ms, heap usage 403.358 MB -> 222.852 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (11320.456 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 155.868 ms, heap usage 814.237 MB -> 222.896 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (10506.174 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.074 ms, heap usage 472.161 MB -> 223.041 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (10385.827 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 152.012 ms, heap usage 809.084 MB -> 222.968 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (12137.488 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 254.083 ms, heap usage 680.017 MB -> 222.753 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (12257.854 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 175.187 ms, heap usage 270.903 MB -> 222.887 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (11643.554 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 176.459 ms, heap usage 427.607 MB -> 222.738 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (12052.307 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.744 ms, heap usage 733.505 MB -> 222.977 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10565.054 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 173.248 ms, heap usage 293.330 MB -> 222.794 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (10602.834 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 153.994 ms, heap usage 775.962 MB -> 214.297 MB.\n====== mnemonics (functional) [default], iteration 0 completed (4706.707 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 145.287 ms, heap usage 339.250 MB -> 214.114 MB.\n====== mnemonics (functional) [default], iteration 1 completed (4756.493 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 165.078 ms, heap usage 349.654 MB -> 214.112 MB.\n====== mnemonics (functional) [default], iteration 2 completed (4793.190 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 146.465 ms, heap usage 349.167 MB -> 214.112 MB.\n====== mnemonics (functional) [default], iteration 3 completed (5004.463 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 219.865 ms, heap usage 345.729 MB -> 214.121 MB.\n====== mnemonics (functional) [default], iteration 4 completed (5170.093 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 152.917 ms, heap usage 343.228 MB -> 214.114 MB.\n====== mnemonics (functional) [default], iteration 5 completed (4603.909 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 143.765 ms, heap usage 350.163 MB -> 214.117 MB.\n====== mnemonics (functional) [default], iteration 6 completed (4763.569 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 151.642 ms, heap usage 349.670 MB -> 214.124 MB.\n====== mnemonics (functional) [default], iteration 7 completed (4720.227 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 188.249 ms, heap usage 341.354 MB -> 214.118 MB.\n====== mnemonics (functional) [default], iteration 8 completed (4754.002 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 154.612 ms, heap usage 349.665 MB -> 214.115 MB.\n====== mnemonics (functional) [default], iteration 9 completed (4828.890 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 171.495 ms, heap usage 343.228 MB -> 214.115 MB.\n====== mnemonics (functional) [default], iteration 10 completed (4768.666 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 218.826 ms, heap usage 344.228 MB -> 214.118 MB.\n====== mnemonics (functional) [default], iteration 11 completed (4472.817 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 182.764 ms, heap usage 344.154 MB -> 214.118 MB.\n====== mnemonics (functional) [default], iteration 12 completed (4392.084 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 153.137 ms, heap usage 356.429 MB -> 214.115 MB.\n====== mnemonics (functional) [default], iteration 13 completed (4121.987 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 149.595 ms, heap usage 347.010 MB -> 214.115 MB.\n====== mnemonics (functional) [default], iteration 14 completed (4847.513 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 212.421 ms, heap usage 356.615 MB -> 216.525 MB.\n====== dotty (scala) [default], iteration 0 completed (11521.459 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 206.452 ms, heap usage 426.038 MB -> 233.213 MB.\n====== dotty (scala) [default], iteration 1 completed (5990.472 ms) ======\n====== dotty (scala) [default], iteration 2 started ======\nGC before operation: completed in 211.584 ms, heap usage 468.754 MB -> 233.177 MB.\n====== dotty (scala) [default], iteration 2 completed (4100.873 ms) ======\n====== dotty (scala) [default], iteration 3 started ======\nGC before operation: completed in 164.825 ms, heap usage 464.698 MB -> 233.190 MB.\n====== dotty (scala) [default], iteration 3 completed (3585.636 ms) ======\n====== dotty (scala) [default], iteration 4 started ======\nGC before operation: completed in 164.813 ms, heap usage 461.187 MB -> 233.190 MB.\n====== dotty (scala) [default], iteration 4 completed (3086.453 ms) ======\n====== dotty (scala) [default], iteration 5 started ======\nGC before operation: completed in 185.595 ms, heap usage 459.205 MB -> 233.204 MB.\n====== dotty (scala) [default], iteration 5 completed (2791.375 ms) ======\n====== dotty (scala) [default], iteration 6 started ======\nGC before operation: completed in 179.407 ms, heap usage 456.730 MB -> 233.212 MB.\n====== dotty (scala) [default], iteration 6 completed (2585.203 ms) ======\n====== dotty (scala) [default], iteration 7 started ======\nGC before operation: completed in 163.631 ms, heap usage 455.232 MB -> 233.221 MB.\n====== dotty (scala) [default], iteration 7 completed (2541.041 ms) ======\n====== dotty (scala) [default], iteration 8 started ======\nGC before operation: completed in 170.083 ms, heap usage 454.246 MB -> 233.225 MB.\n====== dotty (scala) [default], iteration 8 completed (2287.446 ms) ======\n====== dotty (scala) [default], iteration 9 started ======\nGC before operation: completed in 186.353 ms, heap usage 453.222 MB -> 233.234 MB.\n====== dotty (scala) [default], iteration 9 completed (2164.413 ms) ======\n====== dotty (scala) [default], iteration 10 started ======\nGC before operation: completed in 183.846 ms, heap usage 452.231 MB -> 233.241 MB.\n====== dotty (scala) [default], iteration 10 completed (2031.436 ms) ======\n====== dotty (scala) [default], iteration 11 started ======\nGC before operation: completed in 166.348 ms, heap usage 451.252 MB -> 233.245 MB.\n====== dotty (scala) [default], iteration 11 completed (2059.757 ms) ======\n====== dotty (scala) [default], iteration 12 started ======\nGC before operation: completed in 187.979 ms, heap usage 450.255 MB -> 233.241 MB.\n====== dotty (scala) [default], iteration 12 completed (1969.796 ms) ======\n====== dotty (scala) [default], iteration 13 started ======\nGC before operation: completed in 204.086 ms, heap usage 448.769 MB -> 233.254 MB.\n====== dotty (scala) [default], iteration 13 completed (2254.408 ms) ======\n====== dotty (scala) [default], iteration 14 started ======\nGC before operation: completed in 218.581 ms, heap usage 447.777 MB -> 233.256 MB.\n====== dotty (scala) [default], iteration 14 completed (1764.264 ms) ======\nMaster port: 37161\nCache ports: 37755, 35505, 44133, 34129\n====== finagle-chirper (web) [default], iteration 0 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 274.623 ms, heap usage 576.756 MB -> 227.001 MB.\n====== finagle-chirper (web) [default], iteration 0 completed (12314.776 ms) ======\n====== finagle-chirper (web) [default], iteration 1 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 198.833 ms, heap usage 390.786 MB -> 228.226 MB.\n====== finagle-chirper (web) [default], iteration 1 completed (5610.877 ms) ======\n====== finagle-chirper (web) [default], iteration 2 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 183.425 ms, heap usage 233.526 MB -> 228.314 MB.\n====== finagle-chirper (web) [default], iteration 2 completed (3460.439 ms) ======\n====== finagle-chirper (web) [default], iteration 3 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 156.966 ms, heap usage 613.072 MB -> 229.352 MB.\n====== finagle-chirper (web) [default], iteration 3 completed (3144.464 ms) ======\n====== finagle-chirper (web) [default], iteration 4 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 162.692 ms, heap usage 584.448 MB -> 228.812 MB.\n====== finagle-chirper (web) [default], iteration 4 completed (3148.605 ms) ======\n====== finagle-chirper (web) [default], iteration 5 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 181.975 ms, heap usage 542.016 MB -> 228.815 MB.\n====== finagle-chirper (web) [default], iteration 5 completed (3051.289 ms) ======\n====== finagle-chirper (web) [default], iteration 6 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 148.995 ms, heap usage 526.197 MB -> 228.830 MB.\n====== finagle-chirper (web) [default], iteration 6 completed (2930.359 ms) ======\n====== finagle-chirper (web) [default], iteration 7 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 146.253 ms, heap usage 498.328 MB -> 228.854 MB.\n====== finagle-chirper (web) [default], iteration 7 completed (2782.455 ms) ======\n====== finagle-chirper (web) [default], iteration 8 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 161.654 ms, heap usage 446.551 MB -> 228.861 MB.\n====== finagle-chirper (web) [default], iteration 8 completed (3061.947 ms) ======\n====== finagle-chirper (web) [default], iteration 9 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 175.571 ms, heap usage 445.307 MB -> 228.853 MB.\n====== finagle-chirper (web) [default], iteration 9 completed (2800.351 ms) ======\n====== finagle-chirper (web) [default], iteration 10 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 155.418 ms, heap usage 420.372 MB -> 228.863 MB.\n====== finagle-chirper (web) [default], iteration 10 completed (2731.642 ms) ======\n====== finagle-chirper (web) [default], iteration 11 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 179.641 ms, heap usage 383.199 MB -> 228.866 MB.\n====== finagle-chirper (web) [default], iteration 11 completed (3752.699 ms) ======\n====== finagle-chirper (web) [default], iteration 12 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 192.656 ms, heap usage 383.089 MB -> 228.871 MB.\n====== finagle-chirper (web) [default], iteration 12 completed (2944.197 ms) ======\n====== finagle-chirper (web) [default], iteration 13 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 146.370 ms, heap usage 384.972 MB -> 228.963 MB.\n====== finagle-chirper (web) [default], iteration 13 completed (2707.996 ms) ======\n====== finagle-chirper (web) [default], iteration 14 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 183.082 ms, heap usage 382.372 MB -> 228.893 MB.\n====== finagle-chirper (web) [default], iteration 14 completed (2611.046 ms) ======\n"
    },
    "times": [
        242331.38199999998,
        154637.959,
        142929.362,
        138121.417,
        138240.146,
        132777.639,
        131506.113,
        128848.091,
        127718.893,
        127357.496,
        128610.761,
        127650.399,
        130714.015,
        129631.301,
        125665.719
    ]
}